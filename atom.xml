<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Coding Pub</title>
  <subtitle>猎户座</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://codingpub.github.io/"/>
  <updated>2017-08-03T15:37:53.000Z</updated>
  <id>http://codingpub.github.io/</id>
  
  <author>
    <name>Xiaobin, Lin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>路由器折腾记</title>
    <link href="http://codingpub.github.io/2017/07/22/%E8%B7%AF%E7%94%B1%E5%99%A8%E6%8A%98%E8%85%BE%E8%AE%B0/"/>
    <id>http://codingpub.github.io/2017/07/22/路由器折腾记/</id>
    <published>2017-07-22T14:14:00.000Z</published>
    <updated>2017-08-03T15:37:53.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h1><p>作为一名开发攻城狮，Google 是获取开发资源、解决日常问题的主要途径，日常工作学习中我们多少都会接触一些梯子，有免费的不稳定的但是能用梯子，也有收费的较可靠的梯子。但这些梯子通常都需要安装一个支持软件或进行一些配置才能使用，以前只在一两台电脑上使用感觉还好，最近多了几个设备有用梯子的需求，单独配置麻烦不说，通常收费帐号也有登录设备个数的限制，因此把主意打到了路由器上。</p>
<a id="more"></a>
<p>想法是有了，但是要实践还是碰上了不少问题，所以还是记录下来备用。个人认为 IT 创业公司比较有这方面的需求，如果还需要员工自备梯子，也太不厚道了。</p>
<p><strong>注意：</strong> 本文附带的链接，仅供参考，博主虽然在用或者用过，但不保证没有安全隐患。</p>
<h1 id="常见的梯子种类"><a href="#常见的梯子种类" class="headerlink" title="常见的梯子种类"></a>常见的梯子种类</h1><h2 id="VPN"><a href="#VPN" class="headerlink" title="VPN"></a>VPN</h2><p><a href="https://zh.wikipedia.org/zh-hans/%E8%99%9B%E6%93%AC%E7%A7%81%E4%BA%BA%E7%B6%B2%E8%B7%AF" target="_blank" rel="external">VPN</a> 就不多提了，不知道它原理的人很多，但不知道它能干嘛的人估计不多。贵的 VPN 不管是访问墙内还是墙外的站点，网速都不会差，但现如今动不动就是 100M 200M 的宽带，VPN 如果要保持这个网速，估计价格会让很多屌丝程序员放弃使用。共享两个博主早前使用的 VPN 来源 <a href="http://www.vpngate.net/cn/" target="_blank" rel="external">链接1</a> <a href="https://bestvpnchina.net/%E5%85%8D%E8%B4%B9vpn%E6%8E%A8%E8%8D%90/" target="_blank" rel="external">链接2</a>，有需要的自取，已经很久没有用了，不保证能正常使用并且继续免费。</p>
<h2 id="PAC-自动代理"><a href="#PAC-自动代理" class="headerlink" title="PAC 自动代理"></a>PAC 自动代理</h2><blockquote>
<p>代理自动配置（英语：Proxy auto-config，简称PAC）是一种网页浏览器技术，用于定义浏览器该如何自动选择适当的代理服务器来访问一个网址。</p>
</blockquote>
<p>PAC 可以设置白名单，名单内的走代理，名单外的直连，这样可以保证国内站点的访问速度。比较大的局限是 PAC 只能作用于通过浏览器发起的网络请求，通过普通应用程序发起的请求无效，而作为攻城狮的我们，经常需要从墙外搬一些砖头回来，所以你懂的很多时候这个家伙帮不上忙。附一个免费的 <a href="https://pac.itzmx.com/" target="_blank" rel="external">PAC 链接</a> 给有需要的读者。</p>
<h2 id="Shadowsocks"><a href="#Shadowsocks" class="headerlink" title="Shadowsocks"></a>Shadowsocks</h2><blockquote>
<p>Shadowsocks是一种基于 Socks5 代理方式的网络数据加密传输包，并采用 Apache 许可证、GPL、MIT 许可证等多种自由软件许可协议开放源代码。Shadowsocks 分为服务器端和客户端，在使用之前，需要先将服务器端部署到服务器上面，然后通过客户端连接并创建本地代理。</p>
</blockquote>
<p><a href="https://github.com/shadowsocks" target="_blank" rel="external">Shadowsocks</a> 是 Github 上的开源项目，市面上有不少 SS 服务提供商提供收费的 SS 服务，相对于 VPN 来说，通过它的访问速度可能没有那么快，但是胜在价格便宜，大部分客户端都会实黑白名单的功能，避免不必要的网络请求走代理服务器。博主目前使用的 SS-Link，价格很低，不过因为一些客观原因，目前是包月状态，过一段时间如果稳定了再考虑包年。</p>
<blockquote>
<p>SS-Link换域名了，新域名是 <ssjiasu.xyz> 或者 <ss-link.me> 。我们没有跑路。 —— from SS加速官方微博</ss-link.me></ssjiasu.xyz></p>
</blockquote>
<p>看到这个的时候，博主笑了，这年头大家都不容易啊。</p>
<h2 id="Shadowsocks-R"><a href="#Shadowsocks-R" class="headerlink" title="Shadowsocks-R"></a>Shadowsocks-R</h2><p><a href="https://github.com/breakwa11/shadowsocks-rss" target="_blank" rel="external">SSR</a> 也是个开源项目，功能和 SS 类似，据说比 SS 更安全，但是流传并不广，市面上还没看到 SSR 的服务提供商，如果想尝试的话，可能需要自己搭建服务器环境。其实博主差点就用了，但就是没有找到服务提供商，目前还没有自己租服务器、搭建服务器环境，因此放弃了~</p>
<h1 id="在路由器上搭梯子"><a href="#在路由器上搭梯子" class="headerlink" title="在路由器上搭梯子"></a>在路由器上搭梯子</h1><p>上面介绍了一些梯子的类型，其中 VPN、SS、SSR 客户端都可以部署在智能路由器上，目前智能路由器系统主要包括：<a href="https://openwrt.org/" target="_blank" rel="external">OpenWrt</a>、<a href="https://www.dd-wrt.com/wiki/index.php/%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87" target="_blank" rel="external">DD-WRT</a>、<a href="http://downloads.pandorabox.com.cn/" target="_blank" rel="external">PandoraBox</a>、<a href="https://asuswrt.lostrealm.ca/about" target="_blank" rel="external">Asuswrt-Merlin</a>，还有包括极路由、小米路由在内的原厂智能路由。</p>
<h2 id="OpenWrt"><a href="#OpenWrt" class="headerlink" title="OpenWrt"></a>OpenWrt</h2><p>就博主目前了解的情况，<a href="https://openwrt.org/" target="_blank" rel="external">OpenWrt</a> 是目前大部分甚至可能是所有主流智能路由系统的源头，其他智能路由系统都是 OpenWrt 的分支或深度定制版本，包括 PandoraBox 和小米路由系统。</p>
<p>分享几个博主之前收藏的链接：</p>
<ul>
<li><a href="https://softwaredownload.gitbooks.io/openwrt-fanqiang/ebook/03.0.html" target="_blank" rel="external">OpenWrt＋shadowsocks-libev实现路由器自动翻墙</a></li>
<li><a href="https://www.gitbook.com/book/softwaredownload/openwrt-fanqiang/details" target="_blank" rel="external">史上最详细的OpenWrt shadowsocks路由器自动翻墙教程</a></li>
<li><a href="https://imciel.com/2016/01/22/openwrt-shadowsocks/" target="_blank" rel="external">我的路由器自动翻墙方案 shadowsocks+dns2socks+pdnsd+dnsmasq</a></li>
<li><a href="https://medium.com/@cooerson/%E6%89%93%E9%80%A0%E4%B8%80%E5%8F%B0%E7%BF%BB%E5%A2%99%E8%B7%AF%E7%94%B1%E5%99%A8-2015-10-28-c498f4daf599" target="_blank" rel="external">打造一台翻墙路由器</a></li>
</ul>
<p>收藏了这么多，然并卵，博主家的两个路由器都不支持刷 OpenWrt，不管是迅雷路由还是斐讯路由，也可能是博主技能不够不会刷，反正最后是放弃了。</p>
<h2 id="PandoraBox"><a href="#PandoraBox" class="headerlink" title="PandoraBox"></a>PandoraBox</h2><p><a href="http://downloads.pandorabox.com.cn/" target="_blank" rel="external">PandoraBox</a> 相对于 OpenWrt 来说是小众产品，博主本来并不考虑它的，只是偶然间看到<a href="http://www.192ly.com/router-settings/phicomm-s/k2-sj-pandorabox.html" target="_blank" rel="external">斐讯k2刷潘多拉固件教程</a>，又刷不来 OpenWrt，再考虑到家里的 k2 还是免费淘回来的，至此开始了踩坑之旅。</p>
<p>刷机过程的坎坷就不说了，填完坑感觉也就那样（有需要刷机工具和固件的私聊），然后刷完机发现潘多拉固件自带了一个 SSR 客户端，前面也提到了，博主实在找不到 SSR 服务，只能开始折腾卸载原装程序，安装 SS 客户端，为什么需要卸载呢，这就是 k2 刷机的坑了，k2 的存储空间在刷完潘多拉后只剩下了可怜几百k，删掉了一些原装程序也不见长，安装 SS 又需要各种依赖包，博主技能值不足，折腾了一周还是放弃了。索性最终成功刷回了原厂固件，家里又多了一个备用路由器。</p>
<h2 id="小米路由器"><a href="#小米路由器" class="headerlink" title="小米路由器"></a>小米路由器</h2><p>小米路由器的系统是基于 OpenWrt 深度定制的，从 UI 上已经看不到 OpenWrt 的身影。博主本身算是半个米粉，因此在考虑换路由器的时候，有点偏向于尝试小米的产品。结果吧，虽然基本达到了换路由的目的，但是还是有很多想吐槽的地方。</p>
<ul>
<li>信号穿墙效果不好</li>
<li>网速上不去</li>
<li>网页广告</li>
</ul>
<p>本来想买小米路由 3G，但由于是新品，还买不到，只好退而求其次买了小米路由3。5G wifi 穿墙信号是真的不好，2G 的也一般，不知道官网说的强力穿墙是几个意思。经常掉线的情况，还不能肯定是路由器的问题，还是小区宽带的问题。网页植入广告是个很严重的问题，这个事找客服是搞不定的，小米客服说是电信插入的广告，电信说是路由器插入的广告，只能自己想办法把广告域名屏蔽掉。小米路由鼓吹自己是个智能路由，结果连个屏蔽域名的功能都不提供，也是够智能的，广告拦截插件只拦别人家的广告。Root 后的小米应该可以通过命令行屏蔽域名，博主用的方法是在光猫上设置屏蔽站点：</p>
<ul>
<li><a href="http://www.tuia.cn" target="_blank" rel="external">http://www.tuia.cn</a></li>
<li><a href="http://safe.miwifi.com" target="_blank" rel="external">http://safe.miwifi.com</a></li>
<li><a href="http://tjqonline.cn" target="_blank" rel="external">http://tjqonline.cn</a></li>
</ul>
<p>目前屏蔽的效果还是挺好的，希望可以保持。</p>
<h3 id="搭梯子"><a href="#搭梯子" class="headerlink" title="搭梯子"></a>搭梯子</h3><p>小米自带的插件有个 VPN 的功能，如果想用 VPN 解决问题，那可以忽略下面的内容了。</p>
<p>小米路由系统稳定版不能安装第三方插件，需要先刷开发版，再 Root，再安装所需插件。</p>
<ol>
<li>小米路由器<a href="http://www1.miwifi.com/miwifi_download.html" target="_blank" rel="external">官方 ROM</a>，下载好对应的 ROM 后，进入路由器管理页面 &gt; 常用设置 &gt; 系统状态 &gt; 手动升级 &gt; 选择下载好的固件，刷固件还是很方便的。</li>
<li>官方提供了<a href="https://d.miwifi.com/rom/ssh" target="_blank" rel="external">开启 SSH 的方法</a>，<strong>注意</strong>开启了该功能，就表示放弃了保修，霸王条款你懂的。</li>
<li>最后一步就是安装 <a href="http://www.miui.com/thread-4408033-1-1.html" target="_blank" rel="external">Misstar Tools</a>，该插件提供了一些实用插件的便捷安装和管理，点开链接自己看哈。<strong>注意</strong>这个是非官方插件，如果对安全有较高要求，建议还是自己搭相关环境，博主比较懒，选择相信世上好人比较多。</li>
</ol>
<h1 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h1><p>听说今年 7 月份开始将全面禁用个人 VPN，不知道是否包括 PAC、SS、SSR，估计乐观不了，部分地区使用梯子甚至可能追究刑事责任。对此，身为合法程序猿只能说，且行且珍惜。</p>
<blockquote>
<p>提醒自己：下次如果还折腾路由器，可以考虑华硕的路由器和 <a href="https://asuswrt.lostrealm.ca/about" target="_blank" rel="external">Asuswrt-Merlin</a> 固件。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;缘起&quot;&gt;&lt;a href=&quot;#缘起&quot; class=&quot;headerlink&quot; title=&quot;缘起&quot;&gt;&lt;/a&gt;缘起&lt;/h1&gt;&lt;p&gt;作为一名开发攻城狮，Google 是获取开发资源、解决日常问题的主要途径，日常工作学习中我们多少都会接触一些梯子，有免费的不稳定的但是能用梯子，也有收费的较可靠的梯子。但这些梯子通常都需要安装一个支持软件或进行一些配置才能使用，以前只在一两台电脑上使用感觉还好，最近多了几个设备有用梯子的需求，单独配置麻烦不说，通常收费帐号也有登录设备个数的限制，因此把主意打到了路由器上。&lt;/p&gt;
    
    </summary>
    
      <category term="其他" scheme="http://codingpub.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="路由器" scheme="http://codingpub.github.io/tags/%E8%B7%AF%E7%94%B1%E5%99%A8/"/>
    
      <category term="梯子" scheme="http://codingpub.github.io/tags/%E6%A2%AF%E5%AD%90/"/>
    
  </entry>
  
  <entry>
    <title>VS Code for markdown</title>
    <link href="http://codingpub.github.io/2017/07/16/VS-Code-for-markdown/"/>
    <id>http://codingpub.github.io/2017/07/16/VS-Code-for-markdown/</id>
    <published>2017-07-16T13:05:58.000Z</published>
    <updated>2017-07-16T13:12:40.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Working with Markdown files in Visual Studio Code is simple, straightforward, and fun. Besides VS Code’s basic editing, there are a number of Markdown specific features that will help you be more productive.</p>
</blockquote>
<a id="more"></a>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>VS Code 原生支持 Markdown 预览，打开一个<code>md</code>文件后，通过快捷键<code>⌘⇧V</code>打开新 tab 页预览，或<code>⌘KV</code> or 点击右上角<code>打开侧边预览</code>按钮来打开侧边预览。</p>
<p>VS Code 支持自定义预览样式和导出 html 文件的功能，因博主没有这方面的需求，这里就不多谈，有需要的读者请看<a href="https://code.visualstudio.com/docs/languages/markdown" target="_blank" rel="external">官方文档</a>。</p>
<h1 id="推荐插件"><a href="#推荐插件" class="headerlink" title="推荐插件"></a>推荐插件</h1><p>VS Code 插件商城有不少 Markdown 的插件，下面推荐几个博主在用的插件，基本上能满足写作需求。</p>
<h2 id="Markdown-Preview"><a href="#Markdown-Preview" class="headerlink" title="Markdown Preview"></a>Markdown Preview</h2><ul>
<li><p><a href="https://marketplace.visualstudio.com/items?itemName=hnw.vscode-auto-open-markdown-preview" target="_blank" rel="external">Auto-Open Markdown Preview</a></p>
<blockquote>
<p>Open Markdown preview automatically when opening a Markdown file.</p>
</blockquote>
<p>  打开 markdown 文档的时候自动开启侧边预览，如果你经常写 MD 文档，又觉得手动开启预览页面很麻烦，那这个插件一定能帮到你。博主用了一段时间，因为一打开 MD 文档，编辑窗口就被拆分成两栏，感觉有点烦，就卸载掉了。这个插件是不是有用，关键还是看个人，博主不用，不代表它就不好或者没用，该推荐的还是要推荐。</p>
</li>
<li><p><a href="https://marketplace.visualstudio.com/items?itemName=dbankier.vscode-instant-markdown" target="_blank" rel="external">Instant Markdown</a></p>
<blockquote>
<p>Instant previews of your markdown files as you type.</p>
</blockquote>
<p>  功能跟上面的 Auto-Open Markdown Preview 有点像，不过是实时在浏览器上预览 MD 文档。博主偶尔需要把 MD 文档转成 pdf 文档，这个插件就派上用场了<em>(网页预览的时候使用 <code>⌘+P</code> or <code>⌃+P</code> 打印功能可以导出 pdf 文档)</em>。自动打开网页预览还是有点烦人，因此平时这个插件都是处于禁用状态，有需要的时候才开启。</p>
</li>
</ul>
<h2 id="Shortcurt"><a href="#Shortcurt" class="headerlink" title="Shortcurt"></a>Shortcurt</h2><p><a href="https://marketplace.visualstudio.com/items?itemName=mdickin.markdown-shortcuts" target="_blank" rel="external">Markdown Shortcuts</a> 提供了写 MD 文档的一些快捷键和指令，具体的功能和快捷键这里就不 copy 了，读者请转<a href="https://marketplace.visualstudio.com/items?itemName=mdickin.markdown-shortcuts" target="_blank" rel="external">官方介绍</a>。</p>
<p>使用方法包括快捷键和右击选中文本在弹出的菜单中选择需要的功能文档中都已经讲了，这里不赘述，主要提一下，VS Code 可以通过快捷键 <code>F1</code> 调出命令面板，输入 <code>markdown</code> 过滤 markdown 相关的指令，然后按回车键执行指令。<em>(注：其他功能都可以这样使用，包括git)</em></p>
<p><img src="1.png" alt=""></p>
<p>从图中可以看到，指令对应的快捷键，不过在 Mac 上使用，有部分快捷键无效，应该是跟博主安装的软件有冲突。</p>
<h2 id="Lint"><a href="#Lint" class="headerlink" title="Lint"></a>Lint</h2><p><a href="https://marketplace.visualstudio.com/items?itemName=DavidAnson.vscode-markdownlint" target="_blank" rel="external">markdownlint</a></p>
<blockquote>
<p>Markdown linting and style checking for Visual Studio Code</p>
</blockquote>
<p>markdownlint 可以帮助检查 MD 文档的语法问题。</p>
<table>
<thead>
<tr>
<th>快捷键</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>⌘⇧M</td>
<td>打开问题面板</td>
</tr>
<tr>
<td>⌘.</td>
<td>光标定位到问题行后使用，弹出提示，点击以打开帮助页面</td>
</tr>
<tr>
<td>F8</td>
<td>定位下一个问题</td>
</tr>
<tr>
<td>⇧F8</td>
<td>定位上一个问题</td>
</tr>
</tbody>
</table>
<p>相信有不少人跟博主一样，稍微了解了一些 MD 语法就开始写文档，之后也是没有问题就不再翻看 MD 的语法，在安装这个插件之前，博主也没想到自己的 MD 文档各种不规范，虽然平时用起来没有什么大问题，但是博主认为写规范的文档是个好习惯，也有利于将来尝试新的 MD 工具。</p>
<p>语法规范是必要的，但是有时候我们希望忽略某些规则，这时候可以通过修改配置文件的 <code>markdownlint.config</code> 实现：</p>
<p><img src="2.png" alt=""></p>
<h2 id="More"><a href="#More" class="headerlink" title="More"></a>More</h2><ul>
<li><p><a href="https://marketplace.visualstudio.com/items?itemName=josa.markdown-table-formatter" target="_blank" rel="external">Markdown Table Formatter</a></p>
<p>  格式化 MD 表格，建议开启自动格式化文档<code>&quot;editor.formatOnSave&quot;: true</code></p>
</li>
<li><p><a href="https://marketplace.visualstudio.com/items?itemName=AlanWalk.markdown-toc" target="_blank" rel="external">Markdown TOC</a></p>
</li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=codeyu.vscode-hexo" target="_blank" rel="external">vscode-hexo</a></li>
</ul>
<p>Code 上还有换 MD 预览主题的插件，博主没有这个需求，就提一下，有需要的读者自行搜索~</p>
<h1 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h1><p>感觉自己需要再去学习一下 MD 的语法~</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Working with Markdown files in Visual Studio Code is simple, straightforward, and fun. Besides VS Code’s basic editing, there are a number of Markdown specific features that will help you be more productive.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="其他" scheme="http://codingpub.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="VS Code" scheme="http://codingpub.github.io/tags/VS-Code/"/>
    
      <category term="博客" scheme="http://codingpub.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="Markdown" scheme="http://codingpub.github.io/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>VS Code for Python</title>
    <link href="http://codingpub.github.io/2017/07/16/VS-Code-for-Python/"/>
    <id>http://codingpub.github.io/2017/07/16/VS-Code-for-Python/</id>
    <published>2017-07-16T06:38:34.000Z</published>
    <updated>2017-07-16T07:29:35.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python-on-Visual-Studio-Code"><a href="#Python-on-Visual-Studio-Code" class="headerlink" title="Python on Visual Studio Code"></a>Python on Visual Studio Code</h1><blockquote>
<p>Python is fully supported in Visual Studio Code through extensions. Popular extensions in the Marketplace provide code completion, linting, debugging, code formatting, snippets, and more.</p>
</blockquote>
<a id="more"></a>
<p>vscode 的插件市场里有不少 Python 的插件，这里主要推荐 <a href="https://marketplace.visualstudio.com/items?itemName=donjayamanne.python" target="_blank" rel="external">Python</a>，博主写这篇文章时，该插件的安装量已经达到了 2.8M，秒杀同类插件，也是 vs code <a href="https://code.visualstudio.com/docs/languages/python" target="_blank" rel="external">官方推荐</a>的 Python 开发插件。安装插件的方法这里就不赘述了，上面两个链接里都有介绍，也可以看<a href="http://codingpub.github.io/2017/07/10/VS-Code/#安装插件">这里</a>。本来还想简单介绍一下插件的使用方法，想了想还是觉得简单的翻译几句话再盗个图实在没什么意义，简单入门请看 <a href="https://code.visualstudio.com/docs/languages/python" target="_blank" rel="external">vs code 教程</a>，更多功能介绍请转到<a href="https://github.com/DonJayamanne/pythonVSCode/wiki" target="_blank" rel="external">官方文档</a>。</p>
<p>Python 插件提供许多 Python 开发的支持，包括不局限于：</p>
<ul>
<li>代码检查</li>
<li>代码提示</li>
<li>自动缩进</li>
<li>代码格式化</li>
<li>代码重构</li>
<li>查看引用，代码导航，查看符号</li>
<li>断点调试</li>
<li>执行和调试单元测试</li>
<li>离线文档</li>
<li>代码片段</li>
</ul>
<h1 id="更多插件"><a href="#更多插件" class="headerlink" title="更多插件"></a>更多插件</h1><table>
<thead>
<tr>
<th>插件</th>
<th>简介</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://marketplace.visualstudio.com/items?itemName=wayou.vscode-todo-highlight" target="_blank" rel="external">TODO Highlight</a></td>
<td>Highlight TODO,FIXME or any annotations within your code.</td>
</tr>
<tr>
<td><a href="https://marketplace.visualstudio.com/items?itemName=mohsen1.prettify-json" target="_blank" rel="external">Prettify JSON</a></td>
<td>格式化 Json 文件</td>
</tr>
</tbody>
</table>
<p>本来还装了 <a href="https://marketplace.visualstudio.com/items?itemName=freakypie.code-python-isort" target="_blank" rel="external">code-python-isort</a>  和 <a href="https://marketplace.visualstudio.com/items?itemName=freakypie.code-python-isort" target="_blank" rel="external">code-python-isort</a>，后来发现上面的 Python 插件都集成了，也就卸载了，感觉就是个 Python all in one。</p>
<h1 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h1><p>好的工具能提高我们的工作效率，但作为凡人，我们还是不要太执着于追求最好的工具，那只会本末倒置。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Python-on-Visual-Studio-Code&quot;&gt;&lt;a href=&quot;#Python-on-Visual-Studio-Code&quot; class=&quot;headerlink&quot; title=&quot;Python on Visual Studio Code&quot;&gt;&lt;/a&gt;Python on Visual Studio Code&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Python is fully supported in Visual Studio Code through extensions. Popular extensions in the Marketplace provide code completion, linting, debugging, code formatting, snippets, and more.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python" scheme="http://codingpub.github.io/categories/Python/"/>
    
    
      <category term="VS Code" scheme="http://codingpub.github.io/tags/VS-Code/"/>
    
  </entry>
  
  <entry>
    <title>VS Code</title>
    <link href="http://codingpub.github.io/2017/07/10/VS-Code/"/>
    <id>http://codingpub.github.io/2017/07/10/VS-Code/</id>
    <published>2017-07-09T16:41:08.000Z</published>
    <updated>2017-07-16T07:29:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>VS Code 全称 <a href="https://code.visualstudio.com/" target="_blank" rel="external">Visual Studio Code</a>，为方便码字，下文统一简称 Code。Code 是微软出品的跨平台代码编辑器，不管从界面风格，还是从使用体验来说，跟 Sublime Text 3 / Atom 之类的编辑器都挺像的。据说 Code 比 ST 好用，比 Atom 更快，至于事实如何，还是要自己上手，才知道是不是适合自己~</p>
<a id="more"></a>
<p>试用感想：Code 比 ST 方便使用，比 Atom 更快一些。现在 Code 插件也不少了，感觉比 ST 更容易找到需要的插件，代码分析（包括 Markdown 语法解析）比 ST 好用些，虽然响应速度上比 ST 慢，还是可以尝试从 ST 转向 Code。</p>
<h1 id="Code-的功能和优点"><a href="#Code-的功能和优点" class="headerlink" title="Code 的功能和优点"></a>Code 的功能和优点</h1><ul>
<li>支持插件扩展</li>
<li>支持语法高亮</li>
<li>更智能的代码提醒(C/C++/node/Python …)</li>
<li>支持语法检查</li>
<li>支持代码调试</li>
<li>支持代码格式化</li>
<li>内嵌控制台</li>
<li>内嵌 Git 版本控制</li>
<li>自带 Markdown 预览功能</li>
<li>秒开大文件</li>
<li>跨平台</li>
<li>免费</li>
<li>官方汉化，翻译还是挺友好的</li>
</ul>
<h1 id="使用介绍"><a href="#使用介绍" class="headerlink" title="使用介绍"></a>使用介绍</h1><h2 id="支持命令行打开文件"><a href="#支持命令行打开文件" class="headerlink" title="支持命令行打开文件"></a>支持命令行打开文件</h2><p>Mac 支持命令行使用 Code 打开指定文件/目录，可以设置 alias 实现，修改 <code>~/.bash_profile</code> 文件，添加：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> vs code</span></div><div class="line">alias code='/Applications/Visual\ Studio\ Code.app/Contents/Resources/app/bin/code'</div></pre></td></tr></table></figure>
<p>重启一个命令行页面就可以用 <code>code</code> 命令打开文件了。</p>
<h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>可以点击左侧活动栏上的扩展按钮，或者实用快捷键 <code>⇧⌘X</code></p>
<p><img src="extension-gallery_extensions-view-icon.png" alt=""></p>
<p>在搜索栏输入需要检索的插件名称，在搜索结果列表点击安装即可，安装完成后需要重启编辑器才能生效。</p>
<h2 id="配置和备份配置"><a href="#配置和备份配置" class="headerlink" title="配置和备份配置"></a>配置和备份配置</h2><p>VS 配置页面可以通过菜单栏打开，也可以使用快捷键打开<code>⌘,</code> (windows<code>⌃,</code>)</p>
<p><img src="setting.png" alt=""></p>
<p>如图，左边是 Code 的默认配置，右边是用户自定义配置，可以看到配置项上方有详细的中文备注，支持中文搜索相关设置。点击配置项前面的图标，会弹出可选配置，选中需要的配置后，新配置会拷贝到右侧的用户配置栏，保存后就可以实时生效了。</p>
<p>Code 有很多实用插件，这里就先安利一个 <a href="https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync" target="_blank" rel="external">Setting Sync</a>。 Setting Sync 可以把本地的 Code 配置和插件列表备份到 Gist，这样就可以在不同设备同步个人设置，就算没有这类需求，备份配置也可以防止重装系统或 Code 的时候丢失配置不是。<strong>目前 Mac 和 Windows 的配置共用还没有发现大问题</strong>，就是部分插件不支持跨平台，但只在支持的平台使用就好了。（补充：考虑到部分插件需要配置路径，建议 Mac 和 Windows 的备份还是分开比较好。）</p>
<h2 id="常用快捷"><a href="#常用快捷" class="headerlink" title="常用快捷"></a>常用快捷</h2><h3 id="编辑"><a href="#编辑" class="headerlink" title="编辑"></a>编辑</h3><table>
<thead>
<tr>
<th>快捷键</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>⌘X</td>
<td>剪切行（空选）</td>
</tr>
<tr>
<td>⌘C</td>
<td>拷贝行（空选）</td>
</tr>
<tr>
<td>⇧⌘K</td>
<td>删除行</td>
</tr>
<tr>
<td>⌘Enter</td>
<td>在下方插入行</td>
</tr>
<tr>
<td>⇧⌘Enter</td>
<td>在上方插入行</td>
</tr>
<tr>
<td>⌥↓</td>
<td>当前行下移</td>
</tr>
<tr>
<td>⌥↑</td>
<td>当前行上移</td>
</tr>
<tr>
<td>⇧⌥↓</td>
<td>拷贝当前行，插入到下一行</td>
</tr>
<tr>
<td>⇧⌥↑</td>
<td>拷贝当前行，插入到上一行</td>
</tr>
<tr>
<td>⌘D</td>
<td>选中下一个匹配文本</td>
</tr>
<tr>
<td>⇧⌘L</td>
<td>选中所有匹配文本</td>
</tr>
<tr>
<td>⌘F2</td>
<td>选中所有匹配文本</td>
</tr>
<tr>
<td>⇧⌥I</td>
<td>在选中行的每一行后面插入光标</td>
</tr>
<tr>
<td>⌘I</td>
<td>选中当前行</td>
</tr>
<tr>
<td>⌥⌘↓</td>
<td>在下一行插入光标</td>
</tr>
<tr>
<td>⌥⌘↑</td>
<td>在上一行插入光标</td>
</tr>
<tr>
<td>⇧⌘\</td>
<td>跳转到匹配的闭括号</td>
</tr>
<tr>
<td>⌘]</td>
<td>缩进行</td>
</tr>
<tr>
<td>⌘[</td>
<td>伸出行</td>
</tr>
<tr>
<td>Home</td>
<td>跳转到行首</td>
</tr>
<tr>
<td>End</td>
<td>跳转到行尾</td>
</tr>
<tr>
<td>⌘↓</td>
<td>跳转到文件尾部</td>
</tr>
<tr>
<td>⌘↑</td>
<td>跳转到文件开头</td>
</tr>
<tr>
<td>⌃PageDown</td>
<td>向下滚动一行</td>
</tr>
<tr>
<td>⌃PageUp</td>
<td>向上滚动一行</td>
</tr>
<tr>
<td>⌘PageDown</td>
<td>向下滚动一页</td>
</tr>
<tr>
<td>⌘PageUp</td>
<td>向上滚动一页</td>
</tr>
<tr>
<td>⌥⌘[</td>
<td>折叠代码</td>
</tr>
<tr>
<td>⌥⌘]</td>
<td>展开代码</td>
</tr>
<tr>
<td>⌘/</td>
<td>行注释</td>
</tr>
<tr>
<td>⇧⌥A</td>
<td>块注释</td>
</tr>
<tr>
<td>⌘F</td>
<td>查找</td>
</tr>
<tr>
<td>⌥⌘F</td>
<td>替换</td>
</tr>
<tr>
<td>⌘G</td>
<td>查找下一个</td>
</tr>
<tr>
<td>⇧⌘G</td>
<td>查找前一个</td>
</tr>
<tr>
<td>⇧⌘F</td>
<td>全局搜索</td>
</tr>
<tr>
<td>⇧⌘H</td>
<td>全局替换</td>
</tr>
<tr>
<td>⇧⌘J</td>
<td>全局条件搜索</td>
</tr>
<tr>
<td>⌥Enter</td>
<td>在所有查找匹配项后面插入光标</td>
</tr>
</tbody>
</table>
<h3 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h3><table>
<thead>
<tr>
<th>快捷键</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>⌃Space</td>
<td>智能提醒</td>
</tr>
<tr>
<td>⇧⌥F</td>
<td>格式化文档</td>
</tr>
<tr>
<td>⌘K ⌘F</td>
<td>格式化选中代码</td>
</tr>
<tr>
<td>F12</td>
<td>跳转到定义</td>
</tr>
<tr>
<td>⌘K ⌘I</td>
<td>显示帮助</td>
</tr>
<tr>
<td>⌥F12</td>
<td>浏览定义</td>
</tr>
<tr>
<td>⇧F12</td>
<td>查看引用</td>
</tr>
<tr>
<td>F2</td>
<td>重命名变量</td>
</tr>
</tbody>
</table>
<h3 id="导航"><a href="#导航" class="headerlink" title="导航"></a>导航</h3><table>
<thead>
<tr>
<th>快捷键</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>⌘T</td>
<td>显示所有符号</td>
</tr>
<tr>
<td>⌃G</td>
<td>跳转到指定行</td>
</tr>
<tr>
<td>⌘P</td>
<td>打开文件</td>
</tr>
<tr>
<td>⇧⌘O</td>
<td>跳转到符号（输入<code>:</code>可将符号按类别分组）</td>
</tr>
<tr>
<td>⇧⌘M</td>
<td>显示问题</td>
</tr>
<tr>
<td>F8</td>
<td>跳转到下一个错误或警告</td>
</tr>
<tr>
<td>⇧F8</td>
<td>跳转到上一个错误或警告</td>
</tr>
<tr>
<td>⇧⌘P</td>
<td>显示所有命令（其实 F1 也行~）</td>
</tr>
<tr>
<td>⌃-</td>
<td>Go Back</td>
</tr>
<tr>
<td>⌃⇧-</td>
<td>Go Forward</td>
</tr>
</tbody>
</table>
<h3 id="窗口"><a href="#窗口" class="headerlink" title="窗口"></a>窗口</h3><table>
<thead>
<tr>
<th>快捷键</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>⇧⌘N</td>
<td>新窗口</td>
</tr>
<tr>
<td>⇧⌘W</td>
<td>关闭窗口</td>
</tr>
<tr>
<td>⌘W</td>
<td>关闭编辑器</td>
</tr>
<tr>
<td>⌘\</td>
<td>拆分编辑器</td>
</tr>
<tr>
<td>⌘1</td>
<td>聚焦第1个编辑器</td>
</tr>
<tr>
<td>⌘2</td>
<td>聚焦第2个编辑器</td>
</tr>
<tr>
<td>⌘3</td>
<td>聚焦第3个编辑器</td>
</tr>
<tr>
<td>⌥⌘T</td>
<td>关闭其他</td>
</tr>
<tr>
<td>⌃Tab</td>
<td>打开下一个编辑器</td>
</tr>
<tr>
<td>⌃⇧Tab</td>
<td>打开前一个编辑器</td>
</tr>
</tbody>
</table>
<h3 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h3><table>
<thead>
<tr>
<th>快捷键</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>⌥⌘S</td>
<td>保存所有文件</td>
</tr>
<tr>
<td>⇧⌘S</td>
<td>另存为</td>
</tr>
</tbody>
</table>
<h3 id="显示"><a href="#显示" class="headerlink" title="显示"></a>显示</h3><table>
<thead>
<tr>
<th>快捷键</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>⌃⌘F</td>
<td>全屏切换</td>
</tr>
<tr>
<td>⌘B</td>
<td>变蓝切换</td>
</tr>
<tr>
<td>⇧⌘E</td>
<td>焦点在文件导航和文本编辑之间切换</td>
</tr>
<tr>
<td>⇧⌘D</td>
<td>调试面板</td>
</tr>
<tr>
<td>⌃⇧G</td>
<td>Git 管理</td>
</tr>
<tr>
<td>⇧⌘X</td>
<td>插件管理</td>
</tr>
<tr>
<td>⇧⌘U</td>
<td>显示输出</td>
</tr>
<tr>
<td>⇧⌘V</td>
<td>Markdown 预览</td>
</tr>
<tr>
<td>⌃`</td>
<td>切换控制台</td>
</tr>
</tbody>
</table>
<h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><table>
<thead>
<tr>
<th>快捷键</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>⌘,</td>
<td>打开设置页面</td>
</tr>
<tr>
<td>⌘K ⌘S</td>
<td>查看快捷键</td>
</tr>
</tbody>
</table>
<h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><table>
<thead>
<tr>
<th>快捷键</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>F9</td>
<td>设置断点</td>
</tr>
<tr>
<td>F5</td>
<td>开始调试</td>
</tr>
<tr>
<td>F5</td>
<td>继续执行</td>
</tr>
<tr>
<td>⌘F5</td>
<td>执行不调试</td>
</tr>
<tr>
<td>F6</td>
<td>暂停</td>
</tr>
<tr>
<td>F10</td>
<td>Step Over</td>
</tr>
<tr>
<td>F11</td>
<td>Step Into</td>
</tr>
<tr>
<td>⇧F11</td>
<td>Step Out</td>
</tr>
<tr>
<td>⇧F5</td>
<td>停止调试</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;VS Code 全称 &lt;a href=&quot;https://code.visualstudio.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Visual Studio Code&lt;/a&gt;，为方便码字，下文统一简称 Code。Code 是微软出品的跨平台代码编辑器，不管从界面风格，还是从使用体验来说，跟 Sublime Text 3 / Atom 之类的编辑器都挺像的。据说 Code 比 ST 好用，比 Atom 更快，至于事实如何，还是要自己上手，才知道是不是适合自己~&lt;/p&gt;
    
    </summary>
    
      <category term="开发工具" scheme="http://codingpub.github.io/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="VS Code" scheme="http://codingpub.github.io/tags/VS-Code/"/>
    
  </entry>
  
  <entry>
    <title>RN初体验之环境篇</title>
    <link href="http://codingpub.github.io/2017/07/09/RN%E5%88%9D%E4%BD%93%E9%AA%8C%E4%B9%8B%E7%8E%AF%E5%A2%83%E7%AF%87/"/>
    <id>http://codingpub.github.io/2017/07/09/RN初体验之环境篇/</id>
    <published>2017-07-09T12:54:19.000Z</published>
    <updated>2017-07-16T07:29:35.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>随便说说：最近因为工作需要，接触了不少新技术，但 RN 还是没有坚持下来，主要是因为没有机会运用到日常工作吧。有一段时间没再写博客了，一部分原因是工作比较忙，但主要原因还是自己不够坚持，自己也说不上来为什么重新开始写博客，但是能写点什么还是挺开心的。发现草稿里面还躺着这么一篇半成品，想想还是发出来，不然过段时间会被自己删掉~ 不管写的好与不好，还是要尊重自己曾经的劳动成果 ^_^</p>
</blockquote>
<p>笔者目前从事 iOS 开发，会使用 Python 开发一些爬虫和小工具，希望能通过学习 RN 实现以下目标：</p>
<ul>
<li>转向跨平台开发</li>
<li>掌握 ES6 语法</li>
<li>熟悉 React 框架</li>
</ul>
<a id="more"></a>
<p>作为一名 iOS 攻城狮，深受 iOS 开发简单入门的荼毒，深切感受到 RN 的入门的不友好，谨以此文纪念填坑之旅。</p>
<p>为了能快速入门，少走弯路，笔者买了本 RN 的入门书籍 —— 《React Native 跨平台移动应用开发》，读者肯定懂得 IT 书籍一般都比较贵，买书之前的调研是少不了的，作为对比的还有另外一本国产书籍《React Native 入门与实战》，相对来说《React Native 跨平台移动应用开发》在网上的好评和推荐多一些，所以笔者入手了。目前翻了 1/3，内容好不好作为初学者就不评价了，需要吐槽的是并没有达到笔者入手的初衷，问题出在开发环境的搭建、Android 设备的真机联调部分，笔者为了在小米手机上运行第一个 Demo 花了3天多。有一部分原因是业余时间不多，但开发环境篇和 Android 真机联调部分，真的写的不够清楚，最终还是靠 Google 大法。</p>
<h1 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h1><p>RN 开发可以在 Mac 或者 Window 环境下进行，因笔者使用 Mac，本文不介绍 Window 开发环境。</p>
<p>RN 开发需要使用到下面的工具，本文不介绍安装 Homebrew 和切换国内镜像源的方法，读者有需要自行 Google。其中 Xcode 用于编译 iOS 版本，jdk 和 android-sdk 用于编译 Android 版本。</p>
<ul>
<li>Homebrew</li>
<li>nodejs</li>
<li>react-native</li>
<li>Xcode</li>
<li>jdk</li>
<li>android-sdk</li>
<li>推荐工具</li>
</ul>
<h2 id="nodejs"><a href="#nodejs" class="headerlink" title="nodejs"></a>nodejs</h2><p>在官网 <a href="https://nodejs.org/en/" target="_blank" rel="external">https://nodejs.org/en/</a> 下载最新的稳定版本，也可以通过 brew 安装 nodejs</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><div class="line">brew install node</div></pre></td></tr></table></figure>
<p>安装完node后建议设置npm镜像以加速后面的过程（或使用科学上网工具）。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><div class="line">npm config set registry https://registry.npm.taobao.org --global</div><div class="line">npm config set disturl https://npm.taobao.org/dist --global</div></pre></td></tr></table></figure>
<p>安装完 nodejs，可以使用 n 模块管理 nodejs 的版本，操作简单，不过下载版本的速度比较慢，还不知道怎么安装下载好的 nodejs，除了这个问题，个人认为 n 命令还是很好用的。nodejs 还有另外一个版本管理工具 NVM，有兴趣的读者可以自行了解。</p>
<p>安装 n</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><div class="line">npm install -g n</div></pre></td></tr></table></figure>
<p>n 命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><div class="line">n latest                       Install or activate the latest node release</div><div class="line">n stable                       Install or activate the latest stable node release</div><div class="line">n &lt;version&gt;                    Install node &lt;version&gt;</div><div class="line">n use &lt;version&gt; [args ...]     Execute node &lt;version&gt; with [args ...]</div><div class="line">n bin &lt;version&gt;                Output bin path for &lt;version&gt;</div><div class="line">n rm &lt;version ...&gt;             Remove the given version(s)</div><div class="line">n --latest                     Output the latest node version available</div><div class="line">n --stable                     Output the latest stable node version available</div><div class="line">n ls                           Output the versions of node available</div></pre></td></tr></table></figure>
<h2 id="react-native"><a href="#react-native" class="headerlink" title="react-native"></a>react-native</h2><p><a href="https://yarnpkg.com/" target="_blank" rel="external">Yarn</a> 是 Facebook 提供的替代 npm 的工具，可以加速 node 模块的下载。React Native 的命令行工具用于执行创建、初始化、更新项目、运行打包服务（packager）等任务。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><div class="line">npm install -g yarn react-native-cli</div></pre></td></tr></table></figure>
<p>如果你看到EACCES: permission denied这样的权限报错，需要修复/usr/local目录的所有权：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><div class="line">sudo chown -R `whoami` /usr/local</div></pre></td></tr></table></figure>
<h2 id="Xcode"><a href="#Xcode" class="headerlink" title="Xcode"></a>Xcode</h2><p>从 AppStore 下载最新版本 Xcode，下载完成后运行 Xcode，同意协议，等待模块安装完成即可。</p>
<blockquote>
<p>虽然一般来说命令行工具都是默认安装了，但你最好还是启动Xcode，并在 Xcode | Preferences | Locations 菜单中检查一下是否装有某个版本的Command Line Tools。Xcode的命令行工具中也包含一些必须的工具，比如git等。</p>
</blockquote>
<h2 id="jdk"><a href="#jdk" class="headerlink" title="jdk"></a>jdk</h2><p>安装 1.8 或更高版本的 <a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="external">jdk</a>，如果已经安装了 jdk，可以通过 <code>javac -version</code> 命令查看当前安装的版本。</p>
<h2 id="android-sdk"><a href="#android-sdk" class="headerlink" title="android-sdk"></a>android-sdk</h2><p>可以使用 <a href="https://developer.android.com/studio/index.html" target="_blank" rel="external">Android Studio</a> 来管理 android-sdk 和 Android 工程，也可以使用 <code>brew install android-sdk</code> 安装 android-sdk，笔者目前选择后者，以后有需要再使用 Android Studio。</p>
<p>android-sdk 安装完成之后，需要确保<code>ANDROID_HOME</code>环境变量正确地指向了 android-sdk 安装路径，也就是把下面的命令添加到 <code>~/.bash_profile</code> 文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><div class="line">export ANDROID_HOME=/usr/local/opt/android-sdk</div></pre></td></tr></table></figure>
<p>然后使用下列命令使其立即生效（否则重启后才生效）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><div class="line">source ~/.bash_profile</div></pre></td></tr></table></figure>
<p>启动一个新的 shell 并且运行 android，在出现窗口中勾选：</p>
<ul>
<li>Tools &gt; Android SDK Build-tools 23.0.1</li>
<li>Android 6.0(API 23) &gt; SDK Platform 23</li>
<li>Android 6.0(API 23) &gt; Google APIs</li>
<li>Extras &gt; Android Support Repository</li>
</ul>
<p>如果需要运行模拟器，还要勾选<code>xxx System Image</code>，视开发设备的性能而定吧，笔者运行过 Android 的模拟器，实在卡的不行，果断放弃，后文也只介绍 Android 的真机联调方法。</p>
<p>选完之后点击 Install Packages，等待安装完成。</p>
<h2 id="推荐工具"><a href="#推荐工具" class="headerlink" title="推荐工具"></a>推荐工具</h2><ul>
<li>Watchman</li>
</ul>
<p><a href="https://facebook.github.io/watchman/docs/install.html" target="_blank" rel="external">Watchman</a> 是由 Facebook 提供的监视文件系统变更的工具。安装此工具可以提高开发时的性能（packager 可以快速捕捉文件的变化从而实现实时刷新）。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><div class="line">brew install watchman</div></pre></td></tr></table></figure>
<ul>
<li>Flow</li>
</ul>
<p><a href="https://www.flowtype.org/" target="_blank" rel="external">Flow</a> 是一个静态的JS类型检查工具。译注：你在很多示例中看到的奇奇怪怪的冒号问号，以及方法参数中像类型一样的写法，都是属于这个 flow 工具的语法。这一语法并不属于 ES 标准，只是 Facebook 自家的代码规范。所以新手可以直接跳过（即不需要安装这一工具，也不建议去费力学习 flow 相关语法）。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><div class="line">brew install flow</div></pre></td></tr></table></figure>
<h1 id="IDE"><a href="#IDE" class="headerlink" title="IDE"></a>IDE</h1><p>编码工具可以选择 Sublime Text 3、Nuclide 或 WebStorm。</p>
<p>其中 <a href="https://nuclide.io/" target="_blank" rel="external">Nuclide</a>是由 Facebook 提供的基于 atom 的集成开发环境，可用于编写、运行和调试 React Native 应用，点击这里阅读 <a href="https://nuclide.io/docs/quick-start/getting-started/" target="_blank" rel="external">Nuclide 的入门文档</a>。</p>
<p>网上很多人说 Nuclide 性能不好，笔者也比较习惯使用 ST3，就先上手试试，ST3 配置环境比 atom 麻烦不少，还没有达到满意的程度，此处先略过，后续再补上。</p>
<h1 id="创建和运行项目"><a href="#创建和运行项目" class="headerlink" title="创建和运行项目"></a>创建和运行项目</h1><h2 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h2><p>打开命令行窗口，进入项目父目录，执行命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><div class="line">react-native init &lt;YourProjectName&gt;</div></pre></td></tr></table></figure>
<p>第一次创建项目比较耗时，因为要下载一些依赖项目，之后就会好很多。</p>
<h2 id="运行在-iOS-模拟器"><a href="#运行在-iOS-模拟器" class="headerlink" title="运行在 iOS 模拟器"></a>运行在 iOS 模拟器</h2><p>打开 <code>ProjectDir/ios</code> 目录下的 iOS 工程文件，在 Xcode 左上角选择运行的模拟器，之后点击运行，编译完成后会自动运行 iOS 模拟器并运行项目。</p>
<p><strong>iOS 模拟器可以通过 <code>Command+D</code> 打开 RN 调试菜单。</strong></p>
<p>So easy.</p>
<p>如果不想运行 Xcode，还可以使用命令行运行项目：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><div class="line">react-native run-ios</div></pre></td></tr></table></figure>
<p>默认运行在模拟器，命令帮助：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> react-native run-ios --<span class="built_in">help</span></span></div><div class="line"></div><div class="line">  react-native run-ios [options]</div><div class="line">  builds your app and starts it on iOS simulator</div><div class="line"></div><div class="line">  Options:</div><div class="line"></div><div class="line">    -h, --help                output usage information</div><div class="line">    --simulator [string]      Explicitly set simulator to use</div><div class="line">    --configuration [string]  Explicitly set the scheme configuration to use</div><div class="line">    --scheme [string]         Explicitly set Xcode scheme to use</div><div class="line">    --project-path [string]   Path relative to project root where the Xcode project (.xcodeproj) lives. The default is 'ios'.</div><div class="line">    --device [string]         Explicitly set device to use by name.  The value is not required if you have a single device connected.</div><div class="line">    --udid [string]           Explicitly set device to use by udid</div><div class="line">    --config [string]         Path to the CLI configuration file</div><div class="line"></div><div class="line">  Example usage:</div><div class="line"></div><div class="line">    Run on a different simulator, e.g. iPhone 5:</div><div class="line">    react-native run-ios --simulator "iPhone 5"</div><div class="line"></div><div class="line">    Pass a non-standard location of iOS directory:</div><div class="line">    react-native run-ios --project-path "./app/ios"</div><div class="line"></div><div class="line">    Run on a connected device, e.g. Max's iPhone:</div><div class="line">    react-native run-ios --device 'Max's iPhone'</div></pre></td></tr></table></figure>
<h2 id="运行在-iOS-真机"><a href="#运行在-iOS-真机" class="headerlink" title="运行在 iOS 真机"></a>运行在 iOS 真机</h2><p>打开方式同上，不同的 RN 版本支持 iOS 真机联调的方式并不一样，运行在真机上以后根据界面提示做调整就好，一般问题不大，需要注意的是 Mac 和 iPhone 需要连接在同一局域网内，<strong>iPhone/iPad可以通过摇晃设备打开 RN 调试菜单。</strong></p>
<h2 id="运行在-Android-真机"><a href="#运行在-Android-真机" class="headerlink" title="运行在 Android 真机"></a>运行在 Android 真机</h2><p>如果是第一次运行 Android 版本，需要升级 Android SDK 的编译文件，以后初始化其他项目时不需要重复该操作。在命令行窗口，进入项目目录，执行命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><div class="line">npm install -g react-native-git-upgrade</div><div class="line">react-native-git-upgrade</div></pre></td></tr></table></figure>
<p>Android 手机虽然都使用 Android OS，但各大手机厂商都对操作系统进行了深度定制，不同机型的调试方式会略有不同，笔者使用红米 Note3 | Miui 8.1 | Android 5.0.2 测试，如果下面的联调方案不满足读者的需求，就需要读者自行攻克了。</p>
<p>首先打开手机的开发者模式，小米手机的做法是进入设置-关于手机，连续点击 MIUI 版本号 7 次，会出现开启开发者模式的提示，之后进入设置-更多设置-开发者选项，开启开发者选项，开启 USB 调试。</p>
<blockquote>
<p>参考</p>
<ul>
<li><a href="http://reactnative.cn/docs/0.40/getting-started.html" target="_blank" rel="external">搭建开发环境</a></li>
</ul>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;随便说说：最近因为工作需要，接触了不少新技术，但 RN 还是没有坚持下来，主要是因为没有机会运用到日常工作吧。有一段时间没再写博客了，一部分原因是工作比较忙，但主要原因还是自己不够坚持，自己也说不上来为什么重新开始写博客，但是能写点什么还是挺开心的。发现草稿里面还躺着这么一篇半成品，想想还是发出来，不然过段时间会被自己删掉~ 不管写的好与不好，还是要尊重自己曾经的劳动成果 ^_^&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;笔者目前从事 iOS 开发，会使用 Python 开发一些爬虫和小工具，希望能通过学习 RN 实现以下目标：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;转向跨平台开发&lt;/li&gt;
&lt;li&gt;掌握 ES6 语法&lt;/li&gt;
&lt;li&gt;熟悉 React 框架&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="跨平台开发" scheme="http://codingpub.github.io/categories/%E8%B7%A8%E5%B9%B3%E5%8F%B0%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="React Native" scheme="http://codingpub.github.io/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序瀑布流的实现和内存优化</title>
    <link href="http://codingpub.github.io/2017/01/22/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%80%91%E5%B8%83%E6%B5%81%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%92%8C%E5%86%85%E5%AD%98%E4%BC%98%E5%8C%96/"/>
    <id>http://codingpub.github.io/2017/01/22/微信小程序瀑布流的实现和内存优化/</id>
    <published>2017-01-22T08:36:55.000Z</published>
    <updated>2017-07-16T07:29:35.000Z</updated>
    
    <content type="html"><![CDATA[<p><em>吐槽：</em>作为用户，个人还是很欣赏瀑布流的展示效果的，可是作为一名开发，从网页实现到 iOS 实现再到微信小程序实现，怎么都这么的不友好~</p>
<p>吐槽有用的话，要警察干嘛，屌丝程序猿还是老老实实撸代码吧。</p>
<a id="more"></a>
<p>提纲：</p>
<ol>
<li>将列表数据拆成 N 个列表</li>
<li>解决加载长列表导致内存溢出/程序卡顿问题</li>
</ol>
<p><a href="https://github.com/CodingPub/wx-waterfall" target="_blank" rel="external">代码</a> 什么的还是放在前面比较实在。</p>
<p><img src="1.jpg" alt=""></p>
<h2 id="拆列表"><a href="#拆列表" class="headerlink" title="拆列表"></a>拆列表</h2><p>这部分没有什么技术含量，就是将列表数据根据图片的宽高分成 N 组（Demo分成了2组）。</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><div class="line">    ...</div><div class="line">    <span class="built_in">let</span> col1 = this.cols[<span class="number">0</span>];</div><div class="line">    <span class="built_in">let</span> col2 = this.cols[<span class="number">1</span>];</div><div class="line">    <span class="keyword">if</span> (col1.<span class="built_in">height</span> &lt;= col2.<span class="built_in">height</span>) &#123;</div><div class="line">      this.addModelToCol(model, col1);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      this.addModelToCol(model, col2);</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line"></div><div class="line">addModelToCol: function(model, <span class="built_in">col</span>) &#123;</div><div class="line">  model.top = <span class="built_in">col</span>.<span class="built_in">height</span>;</div><div class="line">  <span class="built_in">col</span>.<span class="built_in">height</span> = model.top + model.iconHeight;</div><div class="line">  <span class="built_in">col</span>.data.<span class="built_in">push</span>(model);</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<p><em>模型列表里最好能有图片的 size 信息，否则就要预加载图片获取图片的真实尺寸，实现起来吃力不讨好。</em></p>
<p>将 N 列模型列表绑定到模板上，渲染视图：</p>
<figure class="highlight django"><table><tr><td class="code"><pre><div class="line"><span class="xml"><span class="comment">&lt;!--index.wxml--&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">scroll-view</span> <span class="attr">scroll-y</span>=<span class="string">"true"</span> <span class="attr">class</span>=<span class="string">"waterfall_container"</span> <span class="attr">style</span>=<span class="string">"height:</span></span><span class="template-variable">&#123;&#123;scrollH&#125;&#125;</span><span class="xml"><span class="tag"><span class="string">px"</span> <span class="attr">bindscrolltolower</span>=<span class="string">"loadData"</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">wx:for</span>=<span class="string">"</span></span><span class="template-variable">&#123;&#123;cols&#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">wx:key</span>=<span class="string">"col_</span></span></span><span class="template-variable">&#123;&#123;index&#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">is</span>=<span class="string">"column"</span> <span class="attr">data</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123;col_list: item, col_index: index&#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> /&gt;</span></span></div><div class="line"><span class="tag">&lt;/<span class="name">scroll-view</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">name</span>=<span class="string">"column"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"img_column"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">image</span> <span class="attr">wx:for</span>=<span class="string">"</span></span><span class="template-variable">&#123;&#123;col_list.data&#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">wx:for-index</span>=<span class="string">"row_index"</span> <span class="attr">wx:key</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123;item.id&#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">id</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123;item.id&#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span></span></span></div><div class="line">          <span class="attr">src</span>=<span class="string">"item.Icon"</span> <span class="attr">class</span>=<span class="string">"img_cell"</span></div><div class="line">          <span class="attr">style</span>=<span class="string">"width:</span><span class="template-variable">&#123;&#123;item.iconWidth&#125;&#125;</span><span class="xml"><span class="tag"><span class="string">px; height:</span></span></span><span class="template-variable">&#123;&#123;item.iconHeight&#125;&#125;</span><span class="xml"><span class="tag"><span class="string">px"</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div></pre></td></tr></table></figure>
<p>其中 scroll-view 需要指定高度，才能触发加载更多的方法 loadData。</p>
<p>样式文件：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="comment">/**index.wxss**/</span></div><div class="line"></div><div class="line"><span class="selector-class">.waterfall_container</span> &#123;</div><div class="line">    <span class="attribute">float</span>: left;</div><div class="line">    <span class="attribute">padding</span>: <span class="number">4px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.img_column</span> &#123;</div><div class="line">    <span class="attribute">float</span>: left;</div><div class="line">    <span class="attribute">padding-right</span>: <span class="number">4px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.img_column</span>: <span class="selector-tag">last</span> &#123;</div><div class="line">    <span class="attribute">padding-right</span>: <span class="number">0px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.img_cell</span> &#123;</div><div class="line">    <span class="attribute">display</span>: block;</div><div class="line">    <span class="attribute">margin-bottom</span>: <span class="number">4px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="长列表优化"><a href="#长列表优化" class="headerlink" title="长列表优化"></a>长列表优化</h2><p>上面的代码可以实现基本的瀑布流效果，但是如果列表很长，需要加载很多图片（特别是动图），就会导致滑动 scroll-view 卡顿，动图的动画播放也会很卡。</p>
<p>针对于这个问题的几种解决方案：</p>
<ul>
<li>视图懒渲染</li>
<li>图片懒加载</li>
<li>视图复用</li>
</ul>
<h3 id="视图懒渲染"><a href="#视图懒渲染" class="headerlink" title="视图懒渲染"></a>视图懒渲染</h3><figure class="highlight routeros"><table><tr><td class="code"><pre><div class="line">&lt;image wx:<span class="attribute">for</span>=<span class="string">"&#123;&#123;col_list.data&#125;&#125;"</span> wx:<span class="attribute">for-index</span>=<span class="string">"row_index"</span> wx:<span class="attribute">if</span>=<span class="string">"&#123;&#123;item.show&#125;&#125;"</span></div><div class="line">  wx:<span class="attribute">key</span>=<span class="string">"&#123;&#123;item.id&#125;&#125;"</span> <span class="attribute">id</span>=<span class="string">"&#123;&#123;item.id&#125;&#125;"</span></div><div class="line">  <span class="attribute">src</span>=<span class="string">"item.Icon"</span> <span class="attribute">class</span>=<span class="string">"img_cell"</span></div><div class="line">  <span class="attribute">style</span>=<span class="string">"width:&#123;&#123;item.iconWidth&#125;&#125;px; height:&#123;&#123;item.iconHeight&#125;&#125;px"</span>&gt;&lt;/image&gt;</div></pre></td></tr></table></figure>
<p>视图懒渲染就是不渲染不可见区域的视图，其中 item.show 是脚本部分在 scroll-view 滑动时动态计算的：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">onScroll: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> minTop = e.detail.scrollTop - <span class="keyword">this</span>.data.scrollH;</div><div class="line">  <span class="keyword">let</span> maxTop = e.detail.scrollTop + <span class="keyword">this</span>.data.scrollH * <span class="number">2</span>;</div><div class="line">  <span class="keyword">this</span>.cols.forEach(<span class="function">(<span class="params">col</span>) =&gt;</span> &#123;</div><div class="line">    col.data.forEach(<span class="function">(<span class="params">model</span>) =&gt;</span> &#123;</div><div class="line">      model.show = (model.top &gt;= minTop &amp;&amp; model.top &lt;= maxTop);</div><div class="line">    &#125;);</div><div class="line">  &#125;);</div><div class="line">  <span class="keyword">this</span>.reloadList();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个方案可以在一定程度上解决内存的问题，但是它会带来一些新的问题：</p>
<ol>
<li>scroll-view 的滑块区域不准</li>
<li>快速滑动 scroll-view 时会有大量空白区域，如果 cell 的背景和 scroll-view 的背景色一致，cell 又没有边框的话，看起来问题不会很明显，但一般只有 Demo 是这样的 ~</li>
</ol>
<h3 id="图片懒加载"><a href="#图片懒加载" class="headerlink" title="图片懒加载"></a>图片懒加载</h3><p>图片懒加载类似于视图懒渲染，区别在于视图是有渲染的，不过图片在有需要的时候才加载：</p>
<figure class="highlight django"><table><tr><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">image</span> <span class="attr">wx:for</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123;col_list.data&#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">wx:for-index</span>=<span class="string">"row_index"</span></span></span></div><div class="line">  <span class="attr">wx:key</span>=<span class="string">"</span><span class="template-variable">&#123;&#123;item.id&#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">id</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123;item.id&#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span></span></span></div><div class="line">  <span class="attr">src</span>=<span class="string">"</span><span class="template-variable">&#123;&#123;item.show ? item.Icon : ''&#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">class</span>=<span class="string">"img_cell"</span></span></span></div><div class="line">  <span class="attr">style</span>=<span class="string">"width:</span><span class="template-variable">&#123;&#123;item.iconWidth&#125;&#125;</span><span class="xml"><span class="tag"><span class="string">px; height:</span></span></span><span class="template-variable">&#123;&#123;item.iconHeight&#125;&#125;</span><span class="xml"><span class="tag"><span class="string">px"</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span></div></pre></td></tr></table></figure>
<p>方案优点：</p>
<ol>
<li>scroll-view 的 content height 是准确的，表现到 UI 就是滑块区域准确</li>
<li>快速滑动 scroll-view 时可以看到占位视图，滑动停止时逐个加载图片资源</li>
<li>不在显示/待显示区域的视图不保留图片信息，微信有机会释放这部分内存</li>
</ol>
<p>缺点：</p>
<ol>
<li>如果用户大量浏览图片，因为创建了大量的视图，程序还是会导致卡顿</li>
</ol>
<h3 id="视图复用"><a href="#视图复用" class="headerlink" title="视图复用"></a>视图复用</h3><p>此方案仅表述思路，不提供实现，因为麻烦。</p>
<p>以 1 列数据为例，N 列数据类似。</p>
<p>利用<code>wx:key=NaN</code>实现 image 视图的复用，利用<code>wx:if=</code>控制 image 是否渲染。</p>
<p>方案优点：</p>
<ol>
<li>视图复用</li>
</ol>
<p>缺点（二选一）：</p>
<ol>
<li>scroll-view 滑块区域不准，但是不会有空白区域的问题</li>
<li>可以在 image 列表的上方很下方创建足够大的填充视图，但是用户快速滑动时会出现空白区域，而且不方便计算</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总的来说，解决内存问题的方案有很多，各有利弊，目前还没有想到完美的方案，如果你有，希望能给个留言。</p>
<p>相对来说图片懒加载的方案足够用，也很容易实现，一般情况下用户也不会一次性浏览上千张图片，不求完美，够用就好。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;吐槽：&lt;/em&gt;作为用户，个人还是很欣赏瀑布流的展示效果的，可是作为一名开发，从网页实现到 iOS 实现再到微信小程序实现，怎么都这么的不友好~&lt;/p&gt;
&lt;p&gt;吐槽有用的话，要警察干嘛，屌丝程序猿还是老老实实撸代码吧。&lt;/p&gt;
    
    </summary>
    
      <category term="跨平台开发" scheme="http://codingpub.github.io/categories/%E8%B7%A8%E5%B9%B3%E5%8F%B0%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="微信小程序" scheme="http://codingpub.github.io/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>OS X 添加定时任务</title>
    <link href="http://codingpub.github.io/2016/10/27/OS-X-%E6%B7%BB%E5%8A%A0%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
    <id>http://codingpub.github.io/2016/10/27/OS-X-添加定时任务/</id>
    <published>2016-10-27T08:28:00.000Z</published>
    <updated>2017-07-16T07:29:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>因业务需求，对 Mac 和 Windows 的计划任务做了了解，Windows 的计划任务表示很简单，这里主要介绍 Mac 上的定时任务。</p>
<p>就笔者的了解而言，Mac 有两种方式可以添加定时任务：</p>
<ul>
<li>crontab 命令</li>
<li>launchctl 定时任务</li>
</ul>
<a id="more"></a>
<h1 id="crontab-命令"><a href="#crontab-命令" class="headerlink" title="crontab 命令"></a>crontab 命令</h1><p>通过crontab 命令，我们可以在固定的间隔时间执行指定的系统指令或 shell script脚本。时间间隔的单位可以是分钟、小时、日、月、周及以上的任意组合。这个命令非常适合周期性的日志分析或数据备份等工作。</p>
<h2 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h2><figure class="highlight accesslog"><table><tr><td class="code"><pre><div class="line">crontab <span class="string">[-u user]</span> file</div><div class="line">crontab <span class="string">[-u user]</span> <span class="string">[ -e | -l | -r ]</span></div></pre></td></tr></table></figure>
<ul>
<li>-u user：用来设定某个用户的crontab服务；</li>
<li>file：file是命令文件的名字,表示将file做为crontab的任务列表文件并载入crontab。如果在命令行中没有指定这个文件，crontab命令将接受标准输入（键盘）上键入的命令，并将它们载入crontab。</li>
<li>-e：编辑某个用户的crontab文件内容。如果不指定用户，则表示编辑当前用户的crontab文件。</li>
<li>-l：显示某个用户的crontab文件内容，如果不指定用户，则表示显示当前用户的crontab文件内容。</li>
<li>-r：从/var/spool/cron目录中删除某个用户的crontab文件，如果不指定用户，则默认删除当前用户的crontab文件。</li>
<li>-i：在删除用户的crontab文件时给确认提示。</li>
</ul>
<h2 id="crontab-文件格式"><a href="#crontab-文件格式" class="headerlink" title="crontab 文件格式"></a>crontab 文件格式</h2><figure class="highlight"><table><tr><td class="code"><pre><div class="line">分 时 日 月 星期 要运行的命令</div></pre></td></tr></table></figure>
<ul>
<li>第1列分钟1～59</li>
<li>第2列小时1～23（0表示子夜）</li>
<li>第3列日1～31</li>
<li>第4列月1～12</li>
<li>第5列星期0～7（0和7表示星期天）</li>
<li>第6列要运行的命令</li>
</ul>
<h2 id="备份-恢复-crontab"><a href="#备份-恢复-crontab" class="headerlink" title="备份/恢复 crontab"></a>备份/恢复 crontab</h2><p>可以定时备份 crontab 以防误删操作</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><div class="line"><span class="comment"># 备份</span></div><div class="line"><span class="attribute">crontab</span> -l &gt; <span class="variable">$HOME</span>/.mycron</div><div class="line"><span class="comment"># 恢复</span></div><div class="line">crontab <span class="variable">$HOME</span>/.mycron</div></pre></td></tr></table></figure>
<h2 id="定时实例"><a href="#定时实例" class="headerlink" title="定时实例"></a>定时实例</h2><figure class="highlight lsl"><table><tr><td class="code"><pre><div class="line"># 每<span class="number">1</span>分钟执行一次myCommand</div><div class="line">* * * * * myCommand</div><div class="line"></div><div class="line"># 每小时的第<span class="number">3</span>和第<span class="number">15</span>分钟执行</div><div class="line"><span class="number">3</span>,<span class="number">15</span> * * * * myCommand</div><div class="line"></div><div class="line"># 在上午<span class="number">8</span>点到<span class="number">11</span>点的第<span class="number">3</span>和第<span class="number">15</span>分钟执行</div><div class="line"><span class="number">3</span>,<span class="number">15</span> <span class="number">8</span><span class="number">-11</span> * * * myCommand</div><div class="line"></div><div class="line"># 每隔两天的上午<span class="number">8</span>点到<span class="number">11</span>点的第<span class="number">3</span>和第<span class="number">15</span>分钟执行</div><div class="line"><span class="number">3</span>,<span class="number">15</span> <span class="number">8</span><span class="number">-11</span> */<span class="number">2</span>  *  * myCommand</div><div class="line"></div><div class="line"># 每周一上午<span class="number">8</span>点到<span class="number">11</span>点的第<span class="number">3</span>和第<span class="number">15</span>分钟执行</div><div class="line"><span class="number">3</span>,<span class="number">15</span> <span class="number">8</span><span class="number">-11</span> * * <span class="number">1</span> myCommand</div><div class="line"></div><div class="line"># 晚上<span class="number">11</span>点到早上<span class="number">7</span>点之间，每隔一小时重启smb</div><div class="line">* <span class="number">23</span><span class="number">-7</span>/<span class="number">1</span> * * * /etc/init.d/smb restart</div></pre></td></tr></table></figure>
<h2 id="注意清理系统用户的邮件日志"><a href="#注意清理系统用户的邮件日志" class="headerlink" title="注意清理系统用户的邮件日志"></a>注意清理系统用户的邮件日志</h2><p>每条任务调度执行完毕，系统都会将任务输出信息通过电子邮件的形式发送给当前系统用户，这样日积月累，日志信息会非常大，可能会影响系统的正常运行，因此，将每条任务进行重定向处理非常重要。 例如，可以在crontab文件中设置如下形式，忽略日志输出:</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><div class="line"><span class="symbol">0 </span>*/<span class="number">3</span> * * * /<span class="keyword">usr</span>/local/apache2/apachectl restart &gt;/dev/null <span class="number">2</span>&gt;&amp;<span class="number">1</span></div></pre></td></tr></table></figure>
<h1 id="launchctl-定时任务"><a href="#launchctl-定时任务" class="headerlink" title="launchctl 定时任务"></a>launchctl 定时任务</h1><p>launchctl 通过配置文件指定执行周期和任务，不同于 crontab，launchctl 的最小时间间隔是 1s。</p>
<p>plist 文件存放路径为<code>/Library/LaunchAgents</code>或<code>/Library/LaunchDaemons</code>，前者仅当用户登陆后才被执行，后者只要系统启动就会被执行。</p>
<p>支持两种方式配置执行时间：</p>
<ul>
<li>StartInterval: 指定脚本每间隔多长时间（单位：秒）执行一次；</li>
<li><p>StartCalendarInterval: 可以指定脚本在多少分钟、小时、天、星期几、月时间上执行，类似如crontab的中的设置，包含下面的 key:</p>
  <figure class="highlight applescript"><table><tr><td class="code"><pre><div class="line">Minute &lt;<span class="built_in">integer</span>&gt;</div><div class="line">The minute <span class="keyword">on</span> which this job will be <span class="built_in">run</span>.</div><div class="line"></div><div class="line">Hour &lt;<span class="built_in">integer</span>&gt;</div><div class="line">The hour <span class="keyword">on</span> which this job will be <span class="built_in">run</span>.</div><div class="line"></div><div class="line">Day &lt;<span class="built_in">integer</span>&gt;</div><div class="line">The <span class="built_in">day</span> <span class="keyword">on</span> which this job will be <span class="built_in">run</span>.</div><div class="line"></div><div class="line">Weekday &lt;<span class="built_in">integer</span>&gt;</div><div class="line">The <span class="built_in">weekday</span> <span class="keyword">on</span> which this job will be <span class="built_in">run</span> (<span class="number">0</span> <span class="keyword">and</span> <span class="number">7</span> are Sunday).</div><div class="line"></div><div class="line">Month &lt;<span class="built_in">integer</span>&gt;</div><div class="line">The <span class="built_in">month</span> <span class="keyword">on</span> which this job will be <span class="built_in">run</span>.</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>进入到<code>~/Library/LaunchAgents</code>下建一个plist文件<code>com.test.launchctl.plist</code>，内容如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="meta">&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">plist</span> <span class="attr">version</span>=<span class="string">"1.0"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dict</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>Label<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.test.launchctl.plist<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>ProgramArguments<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>/usr/bin/python<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>/Workspace/test.py<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>StartCalendarInterval<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dict</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>Minute<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">integer</span>&gt;</span>4<span class="tag">&lt;/<span class="name">integer</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>Hour<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">integer</span>&gt;</span>13<span class="tag">&lt;/<span class="name">integer</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>KeepAlive<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">false</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>RunAtLoad<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>StandardOutPath<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>/tmp/AutoMakeLog.log<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>StandardErrorPath<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>/tmp/AutoMakeLog.err<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dict</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">plist</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>StartCalendarInterval: 执行周期</li>
<li>RunAtLoad: 加载时执行一次</li>
<li>StandardOutPath: 标准输出路径</li>
<li>StandardErrorPath: 错误输出路径</li>
</ul>
<h2 id="管理定时任务"><a href="#管理定时任务" class="headerlink" title="管理定时任务"></a>管理定时任务</h2><ul>
<li>加载任务</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="code"><pre><div class="line">cd ~/Library/LaunchAgents</div><div class="line">launchctl load com<span class="selector-class">.test</span><span class="selector-class">.launchctl</span><span class="selector-class">.plist</span></div></pre></td></tr></table></figure>
<ul>
<li>卸载任务</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="code"><pre><div class="line">launchctl unload com<span class="selector-class">.felink</span><span class="selector-class">.gitmirror</span><span class="selector-class">.plist</span></div></pre></td></tr></table></figure>
<ul>
<li>立即执行一次任务</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="code"><pre><div class="line">launchctl start ccom<span class="selector-class">.test</span><span class="selector-class">.launchctl</span><span class="selector-class">.plist</span></div></pre></td></tr></table></figure>
<ul>
<li>停止任务</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="code"><pre><div class="line">launchctl stop ccom<span class="selector-class">.test</span><span class="selector-class">.launchctl</span><span class="selector-class">.plist</span></div></pre></td></tr></table></figure>
<blockquote>
<p>参考</p>
<ul>
<li><a href="http://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/crontab.html" target="_blank" rel="external">crontab 定时任务</a></li>
</ul>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因业务需求，对 Mac 和 Windows 的计划任务做了了解，Windows 的计划任务表示很简单，这里主要介绍 Mac 上的定时任务。&lt;/p&gt;
&lt;p&gt;就笔者的了解而言，Mac 有两种方式可以添加定时任务：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;crontab 命令&lt;/li&gt;
&lt;li&gt;launchctl 定时任务&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="其他" scheme="http://codingpub.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="OS X" scheme="http://codingpub.github.io/tags/OS-X/"/>
    
  </entry>
  
  <entry>
    <title>更新Hexo 3.x 报错</title>
    <link href="http://codingpub.github.io/2016/09/07/%E6%9B%B4%E6%96%B0Hexo3-x%E6%8A%A5%E9%94%99/"/>
    <id>http://codingpub.github.io/2016/09/07/更新Hexo3-x报错/</id>
    <published>2016-09-07T08:50:12.000Z</published>
    <updated>2017-07-16T07:29:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近手贱把 hexo 从 3.2.0 更新到了 3.2.2，然后就出现了下面这个让人无语的错误提示：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><div class="line">&#123; [Error: Cannot <span class="built_in">find</span> <span class="keyword">module</span> <span class="string">'./build/Release/DTraceProviderBindings'</span>] code: <span class="string">'MODULE_NOT_FOUND'</span> &#125;</div><div class="line">&#123; [Error: Cannot <span class="built_in">find</span> <span class="keyword">module</span> <span class="string">'./build/default/DTraceProviderBindings'</span>] code: <span class="string">'MODULE_NOT_FOUND'</span> &#125;</div><div class="line">&#123; [Error: Cannot <span class="built_in">find</span> <span class="keyword">module</span> <span class="string">'./build/Debug/DTraceProviderBindings'</span>] code: <span class="string">'MODULE_NOT_FOUND'</span> &#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>虽然并不影响写博客，但是作为深度强迫症患者，实在不能忍啊，陆续折腾了两天，期间一度有过要放弃的想法，今天终于解决了，还是写篇短文纪念一下吧，谨献给有需要的强迫症同胞。</p>
<p>官方的解决方案是这样的：</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><div class="line"><span class="built_in">npm</span> install hexo --<span class="literal">no</span>-optional</div></pre></td></tr></table></figure>
<p>但是通过 Google 搜索出来的解决方案五花八门，为什么会这样呢？</p>
<p>事实上官方的解决方案是没有错的，不过它少了卸载的说明，大量 Google 答案也是没有错的，只是卸载步骤不够全面。</p>
<p>查看 node_modules 全局安装目录<code>/usr/local/lib/node_modules</code>，该目录下是否有<code>hexo</code>和<code>hexo-cli</code>中的一个或两个，在重新安装hexo之前要把这两个模块都卸载掉：</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><div class="line"><span class="built_in">npm</span> uninstall hexo -g</div><div class="line"><span class="built_in">npm</span> uninstall hexo-cli -g</div></pre></td></tr></table></figure>
<p>然后重新安装hexo模块：</p>
<figure class="highlight brainfuck"><table><tr><td class="code"><pre><div class="line"><span class="comment">npm</span> <span class="comment">install</span> <span class="comment">hexo</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">no</span><span class="literal">-</span><span class="comment">optional</span> <span class="literal">-</span><span class="comment">g</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">save</span></div></pre></td></tr></table></figure>
<ul>
<li>–no-optional 不安装可选模块</li>
<li>-g 全局安装</li>
<li>–save 更新 package.json 文件</li>
</ul>
<hr>
<p>追加：</p>
<p>用了没两天，又出现上面的问题，不知道是不是换主题导致的，排查之后发现是<code>dtrace-provider</code>插件引起的，执行下面的命令就可以解决了：</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><div class="line"><span class="built_in">npm</span> uninstall dtrace-provider</div><div class="line"><span class="built_in">npm</span> uninstall dtrace-provider -g</div></pre></td></tr></table></figure>
<hr>
<p>希望这篇博文能帮你解决问题，不然恭喜你有的折腾了 ~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近手贱把 hexo 从 3.2.0 更新到了 3.2.2，然后就出现了下面这个让人无语的错误提示：&lt;/p&gt;
&lt;figure class=&quot;highlight arduino&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123; [Error: Cannot &lt;span class=&quot;built_in&quot;&gt;find&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;./build/Release/DTraceProviderBindings&#39;&lt;/span&gt;] code: &lt;span class=&quot;string&quot;&gt;&#39;MODULE_NOT_FOUND&#39;&lt;/span&gt; &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123; [Error: Cannot &lt;span class=&quot;built_in&quot;&gt;find&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;./build/default/DTraceProviderBindings&#39;&lt;/span&gt;] code: &lt;span class=&quot;string&quot;&gt;&#39;MODULE_NOT_FOUND&#39;&lt;/span&gt; &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123; [Error: Cannot &lt;span class=&quot;built_in&quot;&gt;find&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;./build/Debug/DTraceProviderBindings&#39;&lt;/span&gt;] code: &lt;span class=&quot;string&quot;&gt;&#39;MODULE_NOT_FOUND&#39;&lt;/span&gt; &amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="其他" scheme="http://codingpub.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="博客" scheme="http://codingpub.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>PrettyTable</title>
    <link href="http://codingpub.github.io/2016/09/05/PrettyTable/"/>
    <id>http://codingpub.github.io/2016/09/05/PrettyTable/</id>
    <published>2016-09-05T07:33:29.000Z</published>
    <updated>2017-07-16T07:29:35.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>PrettyTable is a simple Python library designed to make it quick and easy to represent tabular data in visually appealing ASCII tables. It was inspired by the ASCII tables used in the PostgreSQL shell psql. PrettyTable allows for selection of which columns are to be printed, independent alignment of columns (left or right justified or centred) and printing of “sub-tables” by specifying a row range.</p>
</blockquote>
<a id="more"></a>
<p> <a href="https://pypi.python.org/pypi/PrettyTable" target="_blank" rel="external">PrettyTable</a> 是用于格式化表单输出的第三方库，官方有提供<a href="https://code.google.com/archive/p/prettytable/wikis/Installation.wiki" target="_blank" rel="external">安装方法</a>，也可以<a href="https://pypi.python.org/pypi/PrettyTable" target="_blank" rel="external">下载</a>指定版本后执行安装命令：</p>
 <figure class="highlight stylus"><table><tr><td class="code"><pre><div class="line">cd <span class="string">"local PrettyTable dir"</span></div><div class="line"><span class="string">"your python path"</span> setup<span class="selector-class">.py</span> install</div></pre></td></tr></table></figure>
<p>简单用法：</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><div class="line">from prettytable import PrettyTable</div><div class="line"></div><div class="line">x = PrettyTable()</div><div class="line">x.field_names = [<span class="string">"City name"</span>, <span class="string">"Area"</span>, <span class="string">"Population"</span>, <span class="string">"Annual Rainfall"</span>]</div><div class="line">x.add_row([<span class="string">"Adelaide"</span>,<span class="number">1295</span>, <span class="number">1158259</span>, <span class="number">600.5</span>])</div><div class="line">x.add_row([<span class="string">"Brisbane"</span>,<span class="number">5905</span>, <span class="number">1857594</span>, <span class="number">1146.4</span>])</div><div class="line">x.add_row([<span class="string">"Darwin"</span>, <span class="number">112</span>, <span class="number">120900</span>, <span class="number">1714.7</span>])</div><div class="line">x.add_row([<span class="string">"Hobart"</span>, <span class="number">1357</span>, <span class="number">205556</span>, <span class="number">619.5</span>])</div><div class="line">x.add_row([<span class="string">"Sydney"</span>, <span class="number">2058</span>, <span class="number">4336374</span>, <span class="number">1214.8</span>])</div><div class="line">x.add_row([<span class="string">"Melbourne"</span>, <span class="number">1566</span>, <span class="number">3806092</span>, <span class="number">646.9</span>])</div><div class="line">x.add_row([<span class="string">"Perth"</span>, <span class="number">5386</span>, <span class="number">1554769</span>, <span class="number">869.4</span>])</div><div class="line"></div><div class="line">print(x)</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><div class="line">+-----------+------+------------+-----------------+</div><div class="line">|<span class="string"> City name </span>|<span class="string"> Area </span>|<span class="string"> Population </span>|<span class="string"> Annual Rainfall </span>|</div><div class="line">+-----------+------+------------+-----------------+</div><div class="line">|<span class="string">  Adelaide </span>|<span class="string"> 1295 </span>|<span class="string">  1158259   </span>|<span class="string">      600.5      </span>|</div><div class="line">|<span class="string">  Brisbane </span>|<span class="string"> 5905 </span>|<span class="string">  1857594   </span>|<span class="string">      1146.4     </span>|</div><div class="line">|<span class="string">   Darwin  </span>|<span class="string"> 112  </span>|<span class="string">   120900   </span>|<span class="string">      1714.7     </span>|</div><div class="line">|<span class="string">   Hobart  </span>|<span class="string"> 1357 </span>|<span class="string">   205556   </span>|<span class="string">      619.5      </span>|</div><div class="line">|<span class="string">   Sydney  </span>|<span class="string"> 2058 </span>|<span class="string">  4336374   </span>|<span class="string">      1214.8     </span>|</div><div class="line">|<span class="string"> Melbourne </span>|<span class="string"> 1566 </span>|<span class="string">  3806092   </span>|<span class="string">      646.9      </span>|</div><div class="line">|<span class="string">   Perth   </span>|<span class="string"> 5386 </span>|<span class="string">  1554769   </span>|<span class="string">      869.4      </span>|</div><div class="line">+-----------+------+------------+-----------------+</div></pre></td></tr></table></figure>
<p>不用自己对齐文本的体验简直爽歪歪，更多API参见<a href="https://code.google.com/archive/p/prettytable/wikis/Tutorial.wiki" target="_blank" rel="external">官方文档</a>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;PrettyTable is a simple Python library designed to make it quick and easy to represent tabular data in visually appealing ASCII tables. It was inspired by the ASCII tables used in the PostgreSQL shell psql. PrettyTable allows for selection of which columns are to be printed, independent alignment of columns (left or right justified or centred) and printing of “sub-tables” by specifying a row range.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python" scheme="http://codingpub.github.io/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Python爬虫入门-打包程序</title>
    <link href="http://codingpub.github.io/2016/09/05/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8-%E6%89%93%E5%8C%85%E7%A8%8B%E5%BA%8F/"/>
    <id>http://codingpub.github.io/2016/09/05/Python爬虫入门-打包程序/</id>
    <published>2016-09-05T07:30:41.000Z</published>
    <updated>2017-07-16T07:29:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>如果只是开发给自己用，直接执行源码倒也没有什么问题，不过很多时候我们需要给非开发人员提供一个可执行的程序，显然让他们通过命令行运行程序是不太合理、不够友好，即使能够将就，部署环境也是够呛，特别是使用了较多的第三方库的情况下，不同的环境会遇到各种揪心的问题。这时我们需要把Python程序打包成一个独立的程序，发送给有目标用户，目标用户只需要双击文件即可执行程序，即使这个程序只是个命令行程序，这也比让用户自行部署环境、安装第三方库、在命令行运行入口程序来的友好得多。</p>
<a id="more"></a>
<p>将 Python 程序打包成 exe，有三种方案：cx_freeze，py2exe，pyinstaller。最初使用过<a href="http://keliang.blog.51cto.com/3359430/661884" target="_blank" rel="external">cx_freeze</a>，老实说，体验并不好。py2exe没有使用过，这次打包程序使用的是pyinstaller。</p>
<p><a href="https://github.com/pyinstaller/pyinstaller" target="_blank" rel="external">pyinstaller</a> 支持跨平台，不过只支持在打包的平台上运行，也就是它不支持在mac上打包exe，只能在Windows上打包exe。pyinstaller 会将第三方库一起打包，因此只需要在打包的设备上配置好相关环境，生成的exe文件可以运行在未安装Python的设备上。</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>官方有<a href="https://github.com/pyinstaller/pyinstaller#installation" target="_blank" rel="external">安装方法</a>，Windows平台需要先安装<a href="https://sourceforge.net/projects/pywin32/files/pywin32/" target="_blank" rel="external">pywin32</a>，进入最新的编译版本，选择相应的版本下载安装即可。</p>
<p>然后从<a href="https://github.com/pyinstaller/pyinstaller/releases" target="_blank" rel="external">这里</a>下载 pyinstaller 的最新 release 版本，下载完成后进入子目录执行安装命令：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><div class="line">python setup<span class="selector-class">.py</span> install</div></pre></td></tr></table></figure>
<h1 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h1><figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">pyinstaller</span> <span class="selector-tag">-F</span> <span class="selector-tag">your_application_entry</span><span class="selector-class">.py</span></div></pre></td></tr></table></figure>
<p>该命令会在当前目录生成一个 build 目录和 dist 目录，生成的程序就在 dist 目录下。</p>
<p>pyinstaller 的常用参数说明：</p>
<p>-F,–onefile: 打包成一个可执行文件，不加该参数会生成一个目录，除可执行程序外还包含编译好的Python文件和运行时需要的dll文件。<br>-w, –windowed, –noconsole 不生成控制台，如果有图形界面的话，可以加上，这里我们需要控制显示日志，因此不加。</p>
<p>更多参数见<a href="http://pyinstaller.readthedocs.io/en/latest/usage.html" target="_blank" rel="external">手册</a>。</p>
<p>补充：</p>
<p>Mac 下的 Python3 打包如果出现下面的问题：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">Python</span> <span class="selector-tag">library</span> <span class="selector-tag">not</span> <span class="selector-tag">found</span>: <span class="selector-tag">libpython3</span><span class="selector-class">.5</span><span class="selector-class">.dylib</span></div><div class="line"></div><div class="line"><span class="selector-tag">Python</span> <span class="selector-tag">library</span> <span class="selector-tag">not</span> <span class="selector-tag">found</span>: <span class="selector-class">.Python</span>, <span class="selector-tag">Python</span>, <span class="selector-tag">libpython3</span><span class="selector-class">.5</span><span class="selector-class">.dylib</span></div></pre></td></tr></table></figure>
<p>就需要使用<code>--enable-framework</code>选项重新安装 Python3，这里用到了<code>pyenv</code>工具：</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><div class="line">env PYTHON_CONFIGURE_OPTS=<span class="string">"--enable-framework"</span> pyenv install <span class="number">3.5</span><span class="number">.2</span></div></pre></td></tr></table></figure>
<p>关于<code>pyenv</code>的使用，见前面的开发环境介绍篇。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>至此，我们已经具备了使用 Python 开发一个爬虫的工具和相关知识，最后再提一下，如果基础知识不清楚的可以查看廖雪峰大神的<a href="http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000" target="_blank" rel="external">Python 教程</a>，开发过程中需要深入了解系统API可以查看<a href="https://docs.python.org/3.5/c-api/" target="_blank" rel="external">官方文档</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果只是开发给自己用，直接执行源码倒也没有什么问题，不过很多时候我们需要给非开发人员提供一个可执行的程序，显然让他们通过命令行运行程序是不太合理、不够友好，即使能够将就，部署环境也是够呛，特别是使用了较多的第三方库的情况下，不同的环境会遇到各种揪心的问题。这时我们需要把Python程序打包成一个独立的程序，发送给有目标用户，目标用户只需要双击文件即可执行程序，即使这个程序只是个命令行程序，这也比让用户自行部署环境、安装第三方库、在命令行运行入口程序来的友好得多。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://codingpub.github.io/categories/Python/"/>
    
    
      <category term="爬虫" scheme="http://codingpub.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Python爬虫入门-多线程</title>
    <link href="http://codingpub.github.io/2016/09/05/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8-%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>http://codingpub.github.io/2016/09/05/Python爬虫入门-多线程/</id>
    <published>2016-09-05T07:26:32.000Z</published>
    <updated>2017-07-16T07:29:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>Python的标准库提供了两个线程模块：<code>_thread</code>和<code>threading</code>，<code>_thread</code>是低级模块，<code>threading</code>是高级模块，对<code>_thread</code>进行了封装。绝大多数情况下，我们只需要使用threading这个高级模块。</p>
<a id="more"></a>
<h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><p>启动一个线程就是把一个函数传入并创建Thread实例，然后调用<code>start()</code>开始执行，<code>join()</code>等待线程执行结束：</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><div class="line">import <span class="built_in">time</span></div><div class="line">import threading</div><div class="line"></div><div class="line">def loop(<span class="built_in">num</span>):</div><div class="line">    <span class="built_in">print</span>('thread <span class="built_in">%s</span> <span class="built_in">is</span> running...' <span class="symbol">%</span> threading.current_thread().name)</div><div class="line">    n = <span class="number">0</span></div><div class="line">    <span class="keyword">while</span> n &lt; <span class="built_in">num</span>:</div><div class="line">        n = n + <span class="number">1</span></div><div class="line">        <span class="built_in">print</span>('thread <span class="built_in">%s</span> &gt;&gt;&gt; <span class="built_in">%s</span>' <span class="symbol">%</span> (threading.current_thread().name, n))</div><div class="line">        <span class="built_in">time</span>.sleep(<span class="number">1</span>)</div><div class="line">    <span class="built_in">print</span>('thread <span class="built_in">%s</span> ended.' <span class="symbol">%</span> threading.current_thread().name)</div><div class="line"></div><div class="line">def multiLoop(count, <span class="built_in">num</span>):</div><div class="line">    ts = []</div><div class="line">    <span class="keyword">for</span> idx <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, count):</div><div class="line">        name = 'LoopThread: %d' <span class="symbol">%</span> idx</div><div class="line">        t = threading.Thread(target=loop, name=name, <span class="built_in">args</span>=[<span class="built_in">num</span>])</div><div class="line">        t.start()</div><div class="line">        ts.<span class="built_in">append</span>(t)</div><div class="line"></div><div class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> ts:</div><div class="line">        t.<span class="built_in">join</span>()</div><div class="line"></div><div class="line"><span class="built_in">print</span>('thread <span class="built_in">%s</span> <span class="built_in">is</span> running...' <span class="symbol">%</span> threading.current_thread().name)</div><div class="line">multiLoop(<span class="number">5</span>, <span class="number">5</span>)</div><div class="line"><span class="built_in">print</span>('thread <span class="built_in">%s</span> ended.' <span class="symbol">%</span> threading.current_thread().name)</div></pre></td></tr></table></figure>
<p>上面的例子启动了5个线程，各自打印了5条log。</p>
<h1 id="传参"><a href="#传参" class="headerlink" title="传参"></a>传参</h1><p>多线程的调用比较简单，需要注意的是多线程执行时，需要考虑资源的分配问题，也就是需要适当的使用锁来避免程序因抢占资源而导致各种异常。</p>
<p>另外还有一个需要提的就是启动线程时的传参问题，上面已经给出了一个方案，使用 args 传递参数列表，从初始化原型可以看到还有另一个关键字参数 kwargs，可用于传递参数，两个方法都是可以的。</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><div class="line">class threading.Thread(<span class="attribute">group</span>=None, <span class="attribute">target</span>=None, <span class="attribute">name</span>=None, args=(), kwargs=&#123;&#125;, *, <span class="attribute">daemon</span>=None)</div></pre></td></tr></table></figure>
<p>例如上面初始化线程的代码可以改成：</p>
<figure class="highlight nix"><table><tr><td class="code"><pre><div class="line"><span class="attr">t</span> = threading.Thread(<span class="attr">target=loop,</span> <span class="attr">name=name,</span> <span class="attr">kwargs=&#123;'num':</span> <span class="number">5</span>&#125;)</div></pre></td></tr></table></figure>
<h1 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h1><p>就笔者在 Mac mini 和 Windows 上运行 Python 脚本的体验而言，Mac 可以甩 Windows 几条街，同样的 sql 统计语句，同样的 db 文件，Mac 上能在 1s 内处理完，Windows 却需要执行 4~5s，甚至更长。在设定线程个数时也需要根据不同平台有所区分，笔者会在 Mac 上开20个以上的线程，相对的在 Windows 上只开10个线程，因为开多了反而更慢。当然如果读者的 Windows 性能出色，当然可以根据运行环境自行调整合适的线程个数。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Python的标准库提供了两个线程模块：&lt;code&gt;_thread&lt;/code&gt;和&lt;code&gt;threading&lt;/code&gt;，&lt;code&gt;_thread&lt;/code&gt;是低级模块，&lt;code&gt;threading&lt;/code&gt;是高级模块，对&lt;code&gt;_thread&lt;/code&gt;进行了封装。绝大多数情况下，我们只需要使用threading这个高级模块。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://codingpub.github.io/categories/Python/"/>
    
    
      <category term="爬虫" scheme="http://codingpub.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Python爬虫入门-数据存储</title>
    <link href="http://codingpub.github.io/2016/09/05/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8-%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/"/>
    <id>http://codingpub.github.io/2016/09/05/Python爬虫入门-数据存储/</id>
    <published>2016-09-05T07:26:22.000Z</published>
    <updated>2017-07-16T07:29:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>爬到的数据当然要固化下来了，一般是存储到本地就可以了，简单的直接用字符串、json存储即可，相对复杂、庞大的数据可以用sqlite存储，有条件的可以直接通过接口存储到服务器，调用接口前文已经讲了不少，这里就不赘述了，下面讲一些常用的数据存储方法。</p>
<a id="more"></a>
<h1 id="操作文件和目录"><a href="#操作文件和目录" class="headerlink" title="操作文件和目录"></a>操作文件和目录</h1><p>大部分文件和目录操作在<code>os</code>模块，还有部分在<code>shutil</code>模块。</p>
<h2 id="操作目录"><a href="#操作目录" class="headerlink" title="操作目录"></a>操作目录</h2><figure class="highlight shell"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; import os</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 查看当前目录的绝对路径:</span></div><div class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; path = os.path.abspath(<span class="string">'.'</span>)</span></div><div class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; <span class="built_in">print</span>(path)</span></div><div class="line">/Users/linxiaobin/Developer/python</div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 在某个目录下创建一个新目录，首先把新目录的完整路径表示出来:</span></div><div class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; path = os.path.join(path, <span class="string">'testdir'</span>)</span></div><div class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; <span class="built_in">print</span>(path)</span></div><div class="line">/Users/linxiaobin/Developer/python/testdir</div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 创建一级目录:</span></div><div class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; os.mkdir(path)</span></div><div class="line"><span class="meta">#</span><span class="bash"> 创建多级目录:</span></div><div class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; os.makedirs(<span class="string">'/tmp/a/b/c'</span>)</span></div><div class="line"><span class="meta">#</span><span class="bash"> 删掉一个目录:</span></div><div class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; os.rmdir(path)</span></div><div class="line"><span class="meta"></span></div><div class="line">&gt;<span class="bash">&gt;&gt; import shutil</span></div><div class="line"><span class="meta">#</span><span class="bash"> 删除目录</span></div><div class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; shutil.rmtree(<span class="string">'testdir'</span>)</span></div><div class="line"><span class="meta">#</span><span class="bash"> 拷贝目录</span></div><div class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; shutil.copytree(<span class="string">'srcdir'</span>, <span class="string">'desdir'</span>)</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 拆分路径</span></div><div class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; <span class="built_in">print</span>(os.path.split(path))</span></div><div class="line">('/Users/linxiaobin/Developer/python', 'testdir')</div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 拆分文件扩展名</span></div><div class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; <span class="built_in">print</span>(os.path.splitext(<span class="string">'/path/to/file.txt'</span>))</span></div><div class="line">('/path/to/file', '.txt')</div></pre></td></tr></table></figure>
<p>把两个路径合成一个时，不要直接拼字符串，而要通过<code>os.path.join()</code>函数，这样可以正确处理不同操作系统的路径分隔符。同样，要拆分路径时不要直接拆分字符串，而要通过<code>os.path.split()</code>函数，这样可以把一个路径拆分为两部分，后一部分总是最后级别的目录或文件名。</p>
<p>这些合并、拆分路径的函数并不要求目录和文件要真实存在，它们只对字符串进行操作。</p>
<h2 id="检索目录"><a href="#检索目录" class="headerlink" title="检索目录"></a>检索目录</h2><figure class="highlight lua"><table><tr><td class="code"><pre><div class="line"># 判断目录是否存在</div><div class="line">&gt;&gt;&gt; <span class="built_in">os</span>.<span class="built_in">path</span>.isdir(<span class="string">'hello.py'</span>)</div><div class="line">False</div><div class="line"># 判断文件是否存在</div><div class="line">&gt;&gt;&gt; <span class="built_in">os</span>.<span class="built_in">path</span>.isfile(<span class="string">'hello.py'</span>)</div><div class="line">True</div><div class="line"># 列出目录下所有文件</div><div class="line">&gt;&gt;&gt; <span class="built_in">os</span>.listdir(<span class="string">'.'</span>)</div><div class="line">[<span class="string">'.DS_Store'</span>, <span class="string">'hello.py'</span>, <span class="string">'hello.txt'</span>]</div><div class="line"></div><div class="line"># 列出所有的.py文件</div><div class="line">&gt;&gt;&gt; [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">os</span>.listdir(<span class="string">'.'</span>) <span class="keyword">if</span> <span class="built_in">os</span>.<span class="built_in">path</span>.isfile(x) <span class="keyword">and</span> <span class="built_in">os</span>.<span class="built_in">path</span>.splitext(x)[<span class="number">1</span>]==<span class="string">'.py'</span>]</div><div class="line">[<span class="string">'apis.py'</span>, <span class="string">'config.py'</span>, <span class="string">'models.py'</span>, <span class="string">'pymonitor.py'</span>, <span class="string">'test_db.py'</span>, <span class="string">'urls.py'</span>, <span class="string">'wsgiapp.py'</span>]</div></pre></td></tr></table></figure>
<h2 id="操作文件"><a href="#操作文件" class="headerlink" title="操作文件"></a>操作文件</h2><figure class="highlight shell"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; import os</span></div><div class="line"><span class="meta">#</span><span class="bash"> 对文件重命名:</span></div><div class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; os.rename(<span class="string">'test.txt'</span>, <span class="string">'test.py'</span>)</span></div><div class="line"><span class="meta">#</span><span class="bash"> 删掉文件:</span></div><div class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; os.remove(<span class="string">'test.py'</span>)</span></div><div class="line"><span class="meta"></span></div><div class="line">&gt;<span class="bash">&gt;&gt; import shutil</span></div><div class="line"><span class="meta">#</span><span class="bash"> 拷贝文件</span></div><div class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; shutil.copyfile(<span class="string">'hello.py'</span>, <span class="string">'hello.txt'</span>)</span></div></pre></td></tr></table></figure>
<h1 id="str"><a href="#str" class="headerlink" title="str"></a>str</h1><h2 id="读文件"><a href="#读文件" class="headerlink" title="读文件"></a>读文件</h2><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">with</span> open(<span class="string">'/tmp/aaa.txt'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</div><div class="line"><span class="meta">... </span>    print(f.read())</div><div class="line">...</div><div class="line">测试</div></pre></td></tr></table></figure>
<blockquote>
<p>调用read()会一次性读取文件的全部内容，如果文件有10G，内存就爆了，所以，要保险起见，可以反复调用read(size)方法，每次最多读取size个字节的内容。另外，调用readline()可以每次读取一行内容，调用readlines()一次读取所有内容并按行返回list。因此，要根据需要决定怎么调用。<br>如果文件很小，read()一次性读取最方便；如果不能确定文件大小，反复调用read(size)比较保险；如果是配置文件，调用readlines()最方便：</p>
</blockquote>
<p>上面的方法默认以UTF-8编码读取字符串，可以通过设置 <code>open()</code> 函数的 <code>encoding</code> 参数来指定编码格式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">with</span> open(<span class="string">'/tmp/aaa.txt'</span>, <span class="string">'r'</span> encoding=<span class="string">'gbk'</span>) <span class="keyword">as</span> f:</div><div class="line"><span class="meta">... </span>    print(f.read())</div></pre></td></tr></table></figure>
<h2 id="写文件"><a href="#写文件" class="headerlink" title="写文件"></a>写文件</h2><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><div class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'/tmp/aaa.txt'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> f:</div><div class="line">    f.<span class="built_in">write</span>(<span class="string">'测试'</span>)</div></pre></td></tr></table></figure>
<h1 id="二进制"><a href="#二进制" class="headerlink" title="二进制"></a>二进制</h1><h2 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h2><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">with</span> open(<span class="string">'/tmp/aaa.txt'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</div><div class="line"><span class="meta">... </span>    print(f.read())</div><div class="line">...</div><div class="line"><span class="string">b'a\xe5\x93\x88\n'</span></div></pre></td></tr></table></figure>
<p>代码中的<code>rb</code>表示以只读二进制格式打开文件。</p>
<h2 id="写文件-1"><a href="#写文件-1" class="headerlink" title="写文件"></a>写文件</h2><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><div class="line">&gt;&gt;&gt; <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'/tmp/aaa.txt'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</div><div class="line">...     f.<span class="built_in">write</span>(<span class="string">'测试'</span>.encode(<span class="string">'utf_8'</span>))</div></pre></td></tr></table></figure>
<p>代码中的<code>rw</code>表示以写二进制格式打开文件。</p>
<h1 id="json"><a href="#json" class="headerlink" title="json"></a>json</h1><h2 id="读文件-1"><a href="#读文件-1" class="headerlink" title="读文件"></a>读文件</h2><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> json</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">with</span> open(<span class="string">'/tmp/aaa.txt'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</div><div class="line"><span class="meta">... </span>    d = json.loads(f.read())</div><div class="line"><span class="meta">... </span>    print(d)</div><div class="line">...</div><div class="line">&#123;<span class="string">'age'</span>: <span class="number">20</span>, <span class="string">'score'</span>: <span class="number">88</span>, <span class="string">'name'</span>: <span class="string">'Bob'</span>&#125;</div></pre></td></tr></table></figure>
<h2 id="写文件-2"><a href="#写文件-2" class="headerlink" title="写文件"></a>写文件</h2><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> json</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d = dict(name=<span class="string">'Bob'</span>, age=<span class="number">20</span>, score=<span class="number">88</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">with</span> open(<span class="string">'/tmp/aaa.txt'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> f:</div><div class="line"><span class="meta">... </span>    f.write(json.dumps(d))</div></pre></td></tr></table></figure>
<p>json 除了可以序列化 dict，还可以用于序列化对象的属性，见<a href="http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/00143192607210600a668b5112e4a979dd20e4661cc9c97000" target="_blank" rel="external">这里</a>。</p>
<h1 id="sqlite"><a href="#sqlite" class="headerlink" title="sqlite"></a>sqlite</h1><p>sqlite 的应用有兴趣的读者可以看看这个封装库<a href="https://github.com/rogerbinns/apsw" target="_blank" rel="external">apsw</a>，笔者在此次开发是直接使用系统的 sqlite3 模块，先上代码，后面再解释需要注意的地方。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python3</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">from</span> singleton <span class="keyword">import</span> *</div><div class="line"><span class="keyword">import</span> sqlite3</div><div class="line"><span class="keyword">import</span> threading</div><div class="line"></div><div class="line">__author__ = <span class="string">'Lin Xiaobin'</span></div><div class="line"></div><div class="line">__all__ = [<span class="string">'Cacher'</span>]</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@singleton</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cacher</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        path = self._dbPath()</div><div class="line">        self._connection = sqlite3.connect(path, check_same_thread=<span class="keyword">False</span>)</div><div class="line">        self._lock = threading.Lock()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_directory</span><span class="params">(self)</span>:</span></div><div class="line">        path = os.getcwd()</div><div class="line">        path = os.path.split(path)[<span class="number">0</span>]</div><div class="line">        path = os.path.join(path, <span class="string">'data'</span>)</div><div class="line">        <span class="keyword">return</span> path</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_dbPath</span><span class="params">(self)</span>:</span></div><div class="line">        dir = self._directory()</div><div class="line">        path = os.path.join(dir, <span class="string">'data.db'</span>)</div><div class="line">        <span class="keyword">return</span> path</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_checkWorkspace</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="comment"># print('begin check workspace')</span></div><div class="line">        dir = self._directory()</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(dir):</div><div class="line">            print(<span class="string">'&gt;&gt;&gt;&gt; err: dir %s not exists.'</span> % dir)</div><div class="line"></div><div class="line">        path = self._dbPath()</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.isfile(path):</div><div class="line">            print(<span class="string">'&gt;&gt;&gt;&gt; err: db %s not exists.'</span> % dir)</div><div class="line">        <span class="comment"># print('end check workspace')</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_execute</span><span class="params">(self, cmd, isQueury=True)</span>:</span></div><div class="line">        values = []</div><div class="line">        rowCount = <span class="number">0</span></div><div class="line">        self._lock.acquire()</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            con = self._connection</div><div class="line">            cursor = con.cursor()</div><div class="line">            cursor.execute(cmd)</div><div class="line">            values = cursor.fetchall()</div><div class="line">            rowCount = cursor.rowcount</div><div class="line">            con.commit()</div><div class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">            print(<span class="string">'except: '</span>, e)</div><div class="line">            <span class="keyword">raise</span> e</div><div class="line">        <span class="keyword">finally</span>:</div><div class="line">            cursor.close()</div><div class="line">            self._lock.release()</div><div class="line"></div><div class="line">        <span class="keyword">if</span> isQueury:</div><div class="line">            <span class="keyword">return</span> values</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> rowCount</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_cleanEmptyData</span><span class="params">(self)</span>:</span></div><div class="line">        self._execute(<span class="string">'vacuum'</span>)</div><div class="line"></div><div class="line">Cacher()._checkWorkspace()</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    <span class="keyword">pass</span></div></pre></td></tr></table></figure>
<ul>
<li><p>singleton</p>
<p>  这里将缓存操作封装成单例，主要是为了让多线程应用在数据操作时有同一个出口，避免造成数据混乱。</p>
</li>
<li><p>检查操作目录和数据库路径</p>
<p>  注意到下面这行代码的缩进，和<code>Cacher</code>类定义是同一级的，在加载这个类文件的时候，会执行该检测方法，这里只检测了工作目录和db文件是否存在，说明db文件是通过其他方式创建后放到指定位置的，这样有个好处是不用写初始化的代码，毕竟初始化表格用图形界面更方便些，也可以在这里进行数据库的初始化操作，这个可据个人喜好而定。</p>
  <figure class="highlight stylus"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="title">Cacher</span><span class="params">()</span></span>._checkWorkspace()</div></pre></td></tr></table></figure>
</li>
<li><p>初始化连接</p>
  <figure class="highlight routeros"><table><tr><td class="code"><pre><div class="line">self._connection = sqlite3.connect(path, <span class="attribute">check_same_thread</span>=<span class="literal">False</span>)</div></pre></td></tr></table></figure>
<p>  <code>check_same_thread</code> 默认值是True，即如检验初始化连接和执行sql语句的线程是否是同一个，如果值为True，而线程又不是同一个，会报异常。因为我们的爬虫程序是多线程的，为了减少创建多个连接带来的性能损耗，以及开发的复杂度，这里我们将这个检查标记设置为False。</p>
</li>
<li><p>Lock</p>
<p>  多线程开发，绕不开锁的问题，即使这里使用了单例，如果没有在执行sql语句的时候加锁，仍然会引起操作异常，从而导致数据丢失。</p>
</li>
<li><p>_execute()</p>
<p>  <code>_execute()</code>方法封装了sql语句的执行方法，内部处理了加锁、解锁、异常处理，笔者的所有sql操作都是通过这个方法执行的，剩下的只需要拼凑sql语句了。</p>
</li>
<li><p>vacuum</p>
<p>  在对 sqlite 进行增删操作后，磁盘文件会越来越大，默认情况下，即使调用sql语句删除旧数据，磁盘文件也不会减小，此时执行 <code>vacuum</code> 可以回收无用的磁盘空间。</p>
</li>
<li><p>_directory()</p>
  <figure class="highlight stylus"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="title">print</span><span class="params">(__file__)</span></span></div></pre></td></tr></table></figure>
<p>  这里还要提一下存储目录的问题，一般数据存储的目录不是绝对路径，我们希望它是相对于可执行程序的一个目录，通过 <code>__file__</code> 可以获取到 python 文件的所在目录，笔者一开始也是使用这个方法定位目录的，这样在直接运行Python程序的情况下是不会有问题的，但是一旦打包成exe文件，通过该方法获取到的目录就不是我们期望的目录了，因此这里笔者改用 <code>os.getcwd()</code> 获取程序运行时的目录。</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;爬到的数据当然要固化下来了，一般是存储到本地就可以了，简单的直接用字符串、json存储即可，相对复杂、庞大的数据可以用sqlite存储，有条件的可以直接通过接口存储到服务器，调用接口前文已经讲了不少，这里就不赘述了，下面讲一些常用的数据存储方法。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://codingpub.github.io/categories/Python/"/>
    
    
      <category term="爬虫" scheme="http://codingpub.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Python爬虫入门-网络请求</title>
    <link href="http://codingpub.github.io/2016/09/05/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8-%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/"/>
    <id>http://codingpub.github.io/2016/09/05/Python爬虫入门-网络请求/</id>
    <published>2016-09-05T07:25:27.000Z</published>
    <updated>2017-07-16T07:29:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>介绍了许多语法基础，我们终于可以进入爬虫开发的正文了，就爬虫工具而言，Python对比于其他的语言有很大的优势，它内置的模块提供了强大的网络请求、数据处理功能。</p>
<a id="more"></a>
<h1 id="URL-Operation"><a href="#URL-Operation" class="headerlink" title="URL Operation"></a>URL Operation</h1><p>URL 作为网络请求最基础的部分，这里需要介绍一下 Python 的 URL 处理。</p>
<h2 id="编码-amp-解码"><a href="#编码-amp-解码" class="headerlink" title="编码 &amp; 解码"></a>编码 &amp; 解码</h2><figure class="highlight gcode"><table><tr><td class="code"><pre><div class="line">url = <span class="string">'https://www.test.com/photos?order_by=latest&amp;page=%d&amp;per_page=%d'</span> <span class="meta">%</span> <span class="comment">(pageIndex, pageSize)</span></div></pre></td></tr></table></figure>
<p>这是最简单的字符串拼接方式，在前面也有提过，不再展开。</p>
<p>假如我们有一个dict需要转成 URL 的 query 字符串，可以使用下面的方法：</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><div class="line">&gt;&gt;&gt; import urllib.parse</div><div class="line">&gt;&gt;&gt;</div><div class="line">&gt;&gt;&gt; <span class="keyword">values</span> = &#123;<span class="string">'action'</span>: <span class="string">'InsertPicReptile'</span>,</div><div class="line">...           <span class="string">'url'</span>: <span class="string">'http://www.google.com'</span>,</div><div class="line">...           <span class="string">'title'</span>: <span class="string">'标题'</span>,</div><div class="line">...           <span class="string">'sourceId'</span>: <span class="number">10</span>,</div><div class="line">...           <span class="string">'uniqueId'</span>: <span class="number">1122</span>&#125;</div><div class="line">&gt;&gt;&gt;</div><div class="line">&gt;&gt;&gt; query = urllib.parse.urlencode(<span class="keyword">values</span>)</div><div class="line">&gt;&gt;&gt; <span class="keyword">print</span>(query)</div><div class="line">action=InsertPicReptile&amp;sourceId=<span class="number">10</span>&amp;title=%E6%A0%87%E9%A2%98&amp;url=http%3A%2F%2Fwww.google.com&amp;uniqueId=<span class="number">1122</span></div></pre></td></tr></table></figure>
<p>你是不是注意到有一些字符被自动转码为带有<code>%</code>的格式，除了这个，urllib.parse 还提供了其他的方法：</p>
<ul>
<li><p>quote(string, safe=’/‘, encoding=None, errors=None)</p>
<p>  对字符串进行编码，参数 safe 指定了不需要编码的字符</p>
</li>
<li><p>unquote(string, encoding=’utf-8’, errors=’replace’)</p>
<p>  对字符串进行解码</p>
</li>
<li><p>quote_plus(string, safe=’’, encoding=None, errors=None)</p>
<p>  与 quote 类似，但这个方法用<code>&#39;+&#39;</code>来替换<code>&#39; &#39;</code>，而 quote 用<code>&#39;%20&#39;</code>来代替<code>&#39; &#39;</code></p>
</li>
<li><p>unquote_plus(string, encoding=’utf-8’, errors=’replace’)</p>
<p>  对字符串进行解码</p>
</li>
<li><p>urlencode(query, doseq=False, safe=’’, encoding=None, errors=None, quote_via=<function quote_plus="" at="" 0x10147ff28="">)</function></p>
<p>  将dict或者包含两个元素的元组列表转换成url参数</p>
</li>
</ul>
<h2 id="解析-URL"><a href="#解析-URL" class="headerlink" title="解析 URL"></a>解析 URL</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; from urllib import parse</div><div class="line"><span class="meta">&gt;&gt;</span>&gt;</div><div class="line">&gt;&gt;&gt; url = <span class="string">"http://www.baidu.com/s?wd=codeif.com&amp;rsv_spt=1&amp;issp=1&amp;rsv_bp=0&amp;ie=utf-8&amp;tn=baiduhome_pg&amp;rsv_sug3=4&amp;rsv_sug=1&amp;rsv_sug1=3&amp;rsv_sug4=74"</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; o = parse.urlparse(url)</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; print(<span class="string">'URL detail:'</span>, o)</div><div class="line">URL <span class="symbol">detail:</span> ParseResult(scheme=<span class="string">'http'</span>, netloc=<span class="string">'www.baidu.com'</span>, path=<span class="string">'/s'</span>, params=<span class="string">''</span>, query=<span class="string">'wd=codeif.com&amp;rsv_spt=1&amp;issp=1&amp;rsv_bp=0&amp;ie=utf-8&amp;tn=baiduhome_pg&amp;rsv_sug3=4&amp;rsv_sug=1&amp;rsv_sug1=3&amp;rsv_sug4=74'</span>, fragment=<span class="string">''</span>)</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; params = parse.parse_qs(o.query)</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; print(<span class="string">'URL query:'</span>, params)</div><div class="line">URL <span class="symbol">query:</span> &#123;<span class="string">'rsv_spt'</span>: [<span class="string">'1'</span>], <span class="string">'rsv_sug3'</span>: [<span class="string">'4'</span>], <span class="string">'ie'</span>: [<span class="string">'utf-8'</span>], <span class="string">'issp'</span>: [<span class="string">'1'</span>], <span class="string">'rsv_bp'</span>: [<span class="string">'0'</span>], <span class="string">'rsv_sug4'</span>: [<span class="string">'74'</span>], <span class="string">'tn'</span>: [<span class="string">'baiduhome_pg'</span>], <span class="string">'wd'</span>: [<span class="string">'codeif.com'</span>], <span class="string">'rsv_sug'</span>: [<span class="string">'1'</span>], <span class="string">'rsv_sug1'</span>: [<span class="string">'3'</span>]&#125;</div></pre></td></tr></table></figure>
<h1 id="发起请求"><a href="#发起请求" class="headerlink" title="发起请求"></a>发起请求</h1><p>一个完整的网络请求、解析过程：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</div><div class="line"><span class="keyword">import</span> json</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">requestUnsplash</span><span class="params">(pageIndex, pageSize)</span>:</span></div><div class="line">    url = <span class="string">'https://unsplash.com/napi/photos?order_by=latest&amp;page=%d&amp;per_page=%d'</span> % (pageIndex, pageSize)</div><div class="line"></div><div class="line">    headers = &#123;<span class="string">'accept-version'</span>: <span class="string">'v1'</span>,</div><div class="line">               <span class="string">'authorization'</span>: <span class="string">'Client-ID d69927c7ea5c770fa2ce9a2f1e3589bd896454f7068f689d8e41a25b54fa6042'</span>,</div><div class="line">               <span class="string">'Referer'</span>: <span class="string">'https://unsplash.com/new'</span>,</div><div class="line">               <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.112 Safari/537.36'</span>&#125;</div><div class="line"></div><div class="line">    req = request.Request(url, data=<span class="keyword">None</span>, headers=headers, origin_req_host=<span class="keyword">None</span>, unverifiable=<span class="keyword">False</span>, method=<span class="keyword">None</span>)</div><div class="line"></div><div class="line">    <span class="keyword">with</span> request.urlopen(req) <span class="keyword">as</span> f:</div><div class="line">        response = f.read().decode(<span class="string">'utf-8'</span>)</div><div class="line">        <span class="comment"># print(f.info())</span></div><div class="line">        <span class="keyword">return</span> json.loads(response)</div><div class="line"></div><div class="line"><span class="comment"># print(requestUnsplash(1, 5))</span></div></pre></td></tr></table></figure>
<h2 id="Request-Header"><a href="#Request-Header" class="headerlink" title="Request Header"></a>Request Header</h2><p>从上面的代码可以到在初始化 Request 的时候可以传递 headers、data 参数，其中 header 是 dict 对象，data 是 body 编码后的 bytes 数据。</p>
<p>在初始化 Request 之后，还可以通过下面的方法设置 Header 参数。</p>
<figure class="highlight ceylon"><table><tr><td class="code"><pre><div class="line">req.add<span class="number">_</span>header(kye, <span class="keyword">value</span>)</div></pre></td></tr></table></figure>
<h2 id="Request-Body"><a href="#Request-Body" class="headerlink" title="Request Body"></a>Request Body</h2><p>要传递的 body 可以是表单形式，也可以是 json 格式，最终都是字符串编码为 bytes 数据流，文件表单这里不做讨论，用的比较少。</p>
<ul>
<li><p>表单形式的 body</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</div><div class="line">&gt;&gt;&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>values = &#123;<span class="string">'action'</span>: <span class="string">'InsertPicReptile'</span>,</div><div class="line"><span class="meta">... </span>          <span class="string">'url'</span>: <span class="string">'http://www.google.com'</span>,</div><div class="line"><span class="meta">... </span>          <span class="string">'title'</span>: <span class="string">'标题'</span>,</div><div class="line"><span class="meta">... </span>          <span class="string">'sourceId'</span>: <span class="number">10</span>,</div><div class="line"><span class="meta">... </span>          <span class="string">'uniqueId'</span>: <span class="number">1122</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>body = parse.urlencode(values)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>data = body.encode(<span class="string">'utf-8'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(data)</div><div class="line"><span class="string">b'action=InsertPicReptile&amp;sourceId=10&amp;title=%E6%A0%87%E9%A2%98&amp;url=http%3A%2F%2Fwww.google.com&amp;uniqueId=1122'</span></div></pre></td></tr></table></figure>
</li>
<li><p>json 形式的 body</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> json</div><div class="line">&gt;&gt;&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>values = &#123;<span class="string">'action'</span>: <span class="string">'InsertPicReptile'</span>,</div><div class="line"><span class="meta">... </span>          <span class="string">'url'</span>: <span class="string">'http://www.google.com'</span>,</div><div class="line"><span class="meta">... </span>          <span class="string">'title'</span>: <span class="string">'标题'</span>,</div><div class="line"><span class="meta">... </span>          <span class="string">'sourceId'</span>: <span class="number">10</span>,</div><div class="line"><span class="meta">... </span>          <span class="string">'uniqueId'</span>: <span class="number">1122</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>body = json.dumps(values)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>data = body.encode(<span class="string">'utf-8'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(data)</div><div class="line"><span class="string">b'&#123;"action": "InsertPicReptile", "sourceId": 10, "title": "\\u6807\\u9898", "url": "http://www.google.com", "uniqueId": 1122&#125;'</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h2><p>接口请求经常会在Header或URL参数上增加校验参数，MD5加密算法是比较常用的不对成加密算法。Python已经封装了常用的加密算法，这里以MD5为例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; import hashlib</span></div><div class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;</span></div><div class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; md5Str = <span class="string">'key=hello'</span></span></div><div class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; sign = hashlib.md5(md5Str.encode(<span class="string">'utf-8'</span>)).hexdigest()</span></div><div class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; <span class="built_in">print</span>(sign)</span></div><div class="line">5be7dcd8127f86af33182c778f27a185</div></pre></td></tr></table></figure>
<h2 id="Response-Header"><a href="#Response-Header" class="headerlink" title="Response Header"></a>Response Header</h2><p>前文完整的请求示例中屏蔽掉的 <code>print(f.info())</code> 可以用于获取 HTTP 请求的 Response Header。</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><div class="line"># 提取 Header 信息</div><div class="line">resHeaders = <span class="keyword">f</span>.info()</div><div class="line"><span class="built_in">keys</span> = resHeaders.<span class="built_in">keys</span>()</div><div class="line"><span class="built_in">values</span> = resHeaders.<span class="built_in">values</span>()</div><div class="line"><span class="built_in">items</span> = resHeaders.<span class="built_in">items</span>()</div><div class="line"><span class="keyword">print</span>(<span class="string">'keys:'</span>, <span class="built_in">keys</span>, <span class="string">'\n'</span>)</div><div class="line"><span class="keyword">print</span>(<span class="string">'values:'</span>, <span class="built_in">values</span>, <span class="string">'\n'</span>)</div><div class="line"><span class="keyword">print</span>(<span class="string">'items:'</span>, <span class="built_in">items</span>, <span class="string">'\n'</span>)</div><div class="line"></div><div class="line"># 提取 HTTP 请求状态码</div><div class="line"><span class="keyword">print</span>(<span class="string">'status:'</span>, <span class="keyword">f</span>.getcode())</div></pre></td></tr></table></figure>
<h2 id="数据解析"><a href="#数据解析" class="headerlink" title="数据解析"></a>数据解析</h2><p>body 读取出来是 bytes 数据，需要经过编码转成 str，目前主流编码格式为 utf-8，不排除其他编码格式的可能，转成 str 以后，理想状态下我们希望它是 json 字符串，使用 <code>json.loads()</code> 方法很方便就可以解析出来。遗憾的是需要爬取数据的网站大部分是不提供或者不对外提供 json 接口，因此我们只能解析 HTML 文本。Python 自带的 HTML 解析库比较不方便使用，在开发爬虫工具的过程中接触了两个第三方库： <a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html" target="_blank" rel="external">Beautiful Soup</a> 和 <a href="http://lxml.de/" target="_blank" rel="external">lxml</a>。</p>
<p>Beautiful Soup 支持不同的解析器，包括 Python 标准库、lxml、html5lib，不过捣鼓了半天愣是没学会怎么用 BS 基于 lxml 支持的 xpath 来提取所需节点，最终选择直接用 lxml 来解析 HTML 文本。</p>
<p>lxml 的安装还是挺纠结的，笔者觉得除了缺少梯子的问题，它的文档都是英文的也是个问题，最终是通过 Anaconda Navigator 安装上的，如果读者有好的安装方法，麻烦花点时间给笔者留个言。</p>
<p>附上一个解析HTML的例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</div><div class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlparse</div><div class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">requestImcreator</span><span class="params">(pageIndex, pageSize=<span class="number">0</span>)</span>:</span></div><div class="line">    url = <span class="string">'http://imcreator.com/index.php'</span></div><div class="line">    body = <span class="string">'ajax_load_img=load&amp;m_cat_id=19&amp;page=%d'</span> % pageIndex</div><div class="line">    data = body.encode(encoding=<span class="string">'utf_8'</span>)</div><div class="line">    req = request.Request(url, data)</div><div class="line">    <span class="keyword">with</span> request.urlopen(req) <span class="keyword">as</span> f:</div><div class="line">        response = f.read().decode(<span class="string">'utf-8'</span>)</div><div class="line">        <span class="keyword">return</span> _serializerImcreator(response)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">_serializerImcreator</span><span class="params">(response)</span>:</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        tree = etree.HTML(response)</div><div class="line">        elements = tree.xpath(<span class="string">'//div[@class="box"]/a'</span>)</div><div class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">        print(<span class="string">'serializerImcreator except: '</span>, e)</div><div class="line">        <span class="keyword">raise</span> e</div><div class="line">    <span class="keyword">finally</span>:</div><div class="line">        <span class="keyword">pass</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> len(elements) == <span class="number">0</span>:</div><div class="line">        <span class="keyword">return</span> []</div><div class="line"></div><div class="line">    result = []</div><div class="line"></div><div class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> elements:</div><div class="line">        detailURL = a.get(<span class="string">'href'</span>)</div><div class="line">        h4s = a.xpath(<span class="string">'div/div/h4'</span>)</div><div class="line">        title = <span class="keyword">None</span></div><div class="line">        <span class="keyword">if</span> len(h4s) &gt; <span class="number">0</span>:</div><div class="line">            title = h4s[<span class="number">0</span>].text</div><div class="line"></div><div class="line">        result.append(&#123;<span class="string">'url'</span>: detailURL,</div><div class="line">                       <span class="string">'title'</span>: title&#125;)</div><div class="line">    <span class="keyword">return</span> result</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    print(requestImcreator(<span class="number">1</span>, <span class="number">2</span>))</div></pre></td></tr></table></figure>
<p>从上面的例子可以看到 tree 通过 <code>xpath()</code> 检索出来的 element 可以继续调用 <code>xpath()</code> 方法查找指定节点。</p>
<p>XPath 是一门在 XML 文档中查找信息的语言，可用来在 XML 文档中对元素和属性进行遍历，有点类似css的选择器，详细的语法请移步<a href="http://www.w3school.com.cn/xpath/" target="_blank" rel="external">XPath教程</a>。</p>
<p>通过 Chrome 浏览器可以很快得到我们需要的 XPath 路径：</p>
<p><img src="Snip20160902_8.png" alt=""></p>
<p>这个方法可以得到大部分我们需要的或者接近需要的 xpath，但是笔者目前知道的有一种例外情况，那就是伪元素，包含伪元素的 xpath 路径，通常无法正常解析出目标元素，只能检索到伪元素的上层元素，再通过遍历的手段获取到所需的目标元素。</p>
<h1 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h1><p>爬虫中的 Cookie 的操作主要是为了存储登录信息，遗憾的是模拟登录表单、缓存、上报 Cookie 都还不会，此处只能留白了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;介绍了许多语法基础，我们终于可以进入爬虫开发的正文了，就爬虫工具而言，Python对比于其他的语言有很大的优势，它内置的模块提供了强大的网络请求、数据处理功能。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://codingpub.github.io/categories/Python/"/>
    
    
      <category term="爬虫" scheme="http://codingpub.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Python爬虫入门-进阶知识</title>
    <link href="http://codingpub.github.io/2016/09/05/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8-%E8%BF%9B%E9%98%B6%E7%9F%A5%E8%AF%86/"/>
    <id>http://codingpub.github.io/2016/09/05/Python爬虫入门-进阶知识/</id>
    <published>2016-09-05T07:25:18.000Z</published>
    <updated>2017-07-16T07:29:35.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h2><p>Python 系统内置了许多函数，可以直接调用，调用函数时，不仅会检查参数的个数，还会检查参数的类型，如果有异常系统会报错。</p>
<a id="more"></a>
<figure class="highlight ruby"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; abs(<span class="number">100</span>)</div><div class="line"><span class="number">100</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; abs(-<span class="number">20</span>)</div><div class="line"><span class="number">20</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; abs(<span class="number">12.34</span>)</div><div class="line"><span class="number">12.34</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; abs(<span class="number">1</span>, <span class="number">2</span>)</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;<span class="class"><span class="keyword">module</span>&gt;</span></div><div class="line"><span class="symbol">TypeError:</span> abs() takes exactly one argument (<span class="number">2</span> given)</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; abs(<span class="string">'a'</span>)</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;<span class="class"><span class="keyword">module</span>&gt;</span></div><div class="line"><span class="symbol">TypeError:</span> bad operand type <span class="keyword">for</span> abs(): <span class="string">'str'</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; max(<span class="number">1</span>, <span class="number">2</span>)</div><div class="line"><span class="number">2</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; max(<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, -<span class="number">5</span>)</div><div class="line"><span class="number">3</span></div></pre></td></tr></table></figure>
<h2 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; int(<span class="string">'123'</span>)</div><div class="line"><span class="number">123</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; int(<span class="number">12.34</span>)</div><div class="line"><span class="number">12</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; float(<span class="string">'12.34'</span>)</div><div class="line"><span class="number">12.34</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; str(<span class="number">1.23</span>)</div><div class="line"><span class="string">'1.23'</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; str(<span class="number">100</span>)</div><div class="line"><span class="string">'100'</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; bool(<span class="number">1</span>)</div><div class="line">True</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; bool(<span class="string">''</span>)</div><div class="line">False</div></pre></td></tr></table></figure>
<h2 id="函数别名"><a href="#函数别名" class="headerlink" title="函数别名"></a>函数别名</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; a = abs <span class="comment"># 变量a指向abs函数</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; a(-<span class="number">1</span>) <span class="comment"># 所以也可以通过a调用abs函数</span></div><div class="line"><span class="number">1</span></div></pre></td></tr></table></figure>
<h2 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h2><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_abs</span><span class="params">(x)</span>:</span></div><div class="line">    <span class="keyword">if</span> x &gt;= <span class="number">0</span>:</div><div class="line">        <span class="keyword">return</span> x</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> -x</div></pre></td></tr></table></figure>
<h2 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h2><h3 id="位置参数"><a href="#位置参数" class="headerlink" title="位置参数"></a>位置参数</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><div class="line"><span class="comment"># x 就是位置参数</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">power</span><span class="params">(x)</span></span>:</div><div class="line">    <span class="keyword">return</span> x * x</div></pre></td></tr></table></figure>
<h3 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><div class="line"><span class="comment"># n 是默认参数，默认值2</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">power</span><span class="params">(x, n=<span class="number">2</span>)</span></span>:</div><div class="line">    s = <span class="number">1</span></div><div class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</div><div class="line">        n = n - <span class="number">1</span></div><div class="line">        s = s * x</div><div class="line">    <span class="keyword">return</span> s</div></pre></td></tr></table></figure>
<p>必选参数在前，默认参数在后，当函数有多个参数时，把变化大的参数放前面，变化小的参数放后面。变化小的参数就可以作为默认参数。</p>
<p>默认参数的使用还有一个坑，简单来说就是如果默认参数是一个容器，需要区别容器是只生成一次，还是每次调用都生成一个新的容器，如果是前者，可以给默认参数一个默认的容器，如果是后者，需要给默认参数一个 None 值，在函数内部判空再创建容器，详细说明见这篇<a href="http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431752945034eb82ac80a3e64b9bb4929b16eeed1eb9000" target="_blank" rel="external">文章</a>。</p>
<h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3><p>在Python函数中，还可以定义可变参数。顾名思义，可变参数就是传入的参数个数是可变的，可以是1个、2个到任意个，还可以是0个。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">calc</span><span class="params">(*numbers)</span>:</span></div><div class="line"><span class="meta">... </span>    sum = <span class="number">0</span></div><div class="line"><span class="meta">... </span>    <span class="keyword">for</span> n <span class="keyword">in</span> numbers:</div><div class="line"><span class="meta">... </span>        sum = sum + n * n</div><div class="line"><span class="meta">... </span>    <span class="keyword">return</span> sum</div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>calc(<span class="number">1</span>, <span class="number">2</span>)</div><div class="line"><span class="number">5</span></div></pre></td></tr></table></figure>
<p>如果已经有一个list或者tuple，还可以这样调用可变参数：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; calc(*nums)</div><div class="line"><span class="number">14</span></div></pre></td></tr></table></figure>
<h3 id="关键字参数"><a href="#关键字参数" class="headerlink" title="关键字参数"></a>关键字参数</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">(name, age, **kw)</span></span>:</div><div class="line">    print(<span class="string">'name:'</span>, name, <span class="string">'age:'</span>, age, <span class="string">'other:'</span>, kw)</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; person(<span class="string">'Bob'</span>, <span class="number">35</span>, city=<span class="string">'Beijing'</span>)</div><div class="line"><span class="symbol">name:</span> Bob <span class="symbol">age:</span> <span class="number">35</span> <span class="symbol">other:</span> &#123;<span class="string">'city'</span>: <span class="string">'Beijing'</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; person(<span class="string">'Adam'</span>, <span class="number">45</span>, gender=<span class="string">'M'</span>, job=<span class="string">'Engineer'</span>)</div><div class="line"><span class="symbol">name:</span> Adam <span class="symbol">age:</span> <span class="number">45</span> <span class="symbol">other:</span> &#123;<span class="string">'gender'</span>: <span class="string">'M'</span>, <span class="string">'job'</span>: <span class="string">'Engineer'</span>&#125;</div></pre></td></tr></table></figure>
<p>如果已经有一个 dict，还可以这样调用关键字参数：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; extra = &#123;<span class="string">'city'</span>: <span class="string">'Beijing'</span>, <span class="string">'job'</span>: <span class="string">'Engineer'</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; person(<span class="string">'Jack'</span>, <span class="number">24</span>, **extra)</div><div class="line"><span class="symbol">name:</span> Jack <span class="symbol">age:</span> <span class="number">24</span> <span class="symbol">other:</span> &#123;<span class="string">'city'</span>: <span class="string">'Beijing'</span>, <span class="string">'job'</span>: <span class="string">'Engineer'</span>&#125;</div></pre></td></tr></table></figure>
<p><em>注意kw获得的dict是extra的一份拷贝，对kw的改动不会影响到函数外的extra</em></p>
<h3 id="参数组合"><a href="#参数组合" class="headerlink" title="参数组合"></a>参数组合</h3><p>除了上述的参数类型，还有一种命名关键字参数，详细见<a href="http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431752945034eb82ac80a3e64b9bb4929b16eeed1eb9000" target="_blank" rel="external">这里</a>，相对用的比较少，就不多提。</p>
<p>在Python中定义函数，可以用必选参数、默认参数、可变参数、关键字参数和命名关键字参数，这5种参数都可以组合使用。但是参数定义的顺序必须是：<strong>必选参数、默认参数、可变参数、命名关键字参数和关键字参数.</strong></p>
<h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><h2 id="定义类"><a href="#定义类" class="headerlink" title="定义类"></a>定义类</h2><p>正常情况下，当我们定义了一个class，创建了一个class的实例后，我们可以给该实例绑定任何属性和方法，这就是动态语言的灵活性。定义的class如果没有父类，就继承object类，这类似于OC的NSObject。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line">s = Student()</div><div class="line">s.name = <span class="string">'Michael'</span></div><div class="line">print(s.name)</div></pre></td></tr></table></figure>
<p>Python 可以动态绑定类方法，不过做业务开发使用较少，有兴趣的话可以看<a href="http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/00143186739713011a09b63dcbd42cc87f907a778b3ac73000" target="_blank" rel="external">这里</a></p>
<p>大部分情况下，当我们定义一个类的时候，已经确定了该类的属性和方法：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="title">object</span>):</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>, name, age)</span></span>:</div><div class="line">        <span class="keyword">super</span>(Student, <span class="keyword">self</span>).__init_<span class="number">_</span>()</div><div class="line">        <span class="keyword">self</span>.name = name</div><div class="line">        <span class="keyword">self</span>.age = age</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sayHello</span><span class="params">(<span class="keyword">self</span>)</span></span>:</div><div class="line">        print(<span class="string">'Hello, my name is %s, I am %d.'</span> % (<span class="keyword">self</span>.name, <span class="keyword">self</span>.age))</div><div class="line"></div><div class="line">s = Student(<span class="string">'Michel'</span>, <span class="number">19</span>)</div><div class="line">s.sayHello()</div></pre></td></tr></table></figure>
<h2 id="property"><a href="#property" class="headerlink" title="@property"></a>@property</h2><p>在绑定属性时，如果我们直接把属性暴露出去，虽然写起来很简单，但是，没办法检查参数。这显然不够合理，我们可以通过封装 <code>getter</code> and <code>setter</code> 方法来达到检查参数的目的，不过 Python 提供了 <code>@property</code> 装饰器用来实现对属性的封装，装饰器的详细知识笔者并没有深入了解，目前只是当做约定语法来使用，以后如果有需求再深入了解。直接来看看怎么使用吧：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="title">object</span>):</span></div><div class="line"></div><div class="line">    @property</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">score</span><span class="params">(<span class="keyword">self</span>)</span></span>:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">self</span>._score</div><div class="line"></div><div class="line">    @score.setter</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">score</span><span class="params">(<span class="keyword">self</span>, value)</span></span>:</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> isinstance(value, int):</div><div class="line">            raise ValueError(<span class="string">'score must be an integer!'</span>)</div><div class="line">        <span class="keyword">if</span> value &lt; <span class="number">0</span> <span class="keyword">or</span> value &gt; <span class="number">100</span>:</div><div class="line">            raise ValueError(<span class="string">'score must between 0 ~ 100!'</span>)</div><div class="line">        <span class="keyword">self</span>._score = value</div></pre></td></tr></table></figure>
<p>把一个getter方法变成属性，只需要加上@property就可以了，此时，@property本身又创建了另一个装饰器@score.setter，负责把一个setter方法变成属性赋值，于是，我们就拥有一个可控的属性操作：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; s = Student()</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; s.score = <span class="number">60</span> <span class="comment"># OK，实际转化为s.set_score(60)</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; s.score <span class="comment"># OK，实际转化为s.get_score()</span></div><div class="line"><span class="number">60</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; s.score = <span class="number">9999</span></div><div class="line">Traceback (most recent call last):</div><div class="line">  ...</div><div class="line"><span class="symbol">ValueError:</span> score must between <span class="number">0</span> ~ <span class="number">100</span>!</div></pre></td></tr></table></figure>
<p><strong>只定义getter方法，不定义setter方法就是一个只读属性。</strong></p>
<h2 id="调用父类方法"><a href="#调用父类方法" class="headerlink" title="调用父类方法"></a>调用父类方法</h2><figure class="highlight oxygene"><table><tr><td class="code"><pre><div class="line"><span class="keyword">class</span> A:</div><div class="line">    def <span class="function"><span class="keyword">method</span><span class="params">(<span class="keyword">self</span>, arg)</span>:</span></div><div class="line">        pass</div><div class="line"></div><div class="line"><span class="keyword">class</span> B(A):</div><div class="line">    def <span class="function"><span class="keyword">method</span><span class="params">(<span class="keyword">self</span>, arg)</span>:</span></div><div class="line">       # A.method(<span class="keyword">self</span>,arg)              # <span class="number">1</span></div><div class="line">       # super(B, <span class="keyword">self</span>).method(arg)      # <span class="number">2</span></div><div class="line">        super().method(arg)             # <span class="number">3</span></div></pre></td></tr></table></figure>
<ol>
<li>直接写类名调用(不建议使用)</li>
<li>用 super(type, obj).method(arg) 方法调用</li>
<li>在类定义中调用本类的父类方法，可以直接 super().method(arg)</li>
</ol>
<h2 id="多重继承"><a href="#多重继承" class="headerlink" title="多重继承"></a>多重继承</h2><p>Python 支持多重继承，通过多重继承，一个子类可以同时获得多个父类的所有功能。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mammal</span><span class="params">(Animal)</span>:</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">RunnableMixIn</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        print(<span class="string">'Running...'</span>)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FlyableMixIn</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fly</span><span class="params">(self)</span>:</span></div><div class="line">        print(<span class="string">'Flying...'</span>)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">(Mammal, RunnableMixIn)</span>:</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bat</span><span class="params">(Mammal, FlyableMixIn)</span>:</span></div><div class="line">    <span class="keyword">pass</span></div></pre></td></tr></table></figure>
<p>在设计类的继承关系时，通常，主线都是单一继承下来的。如果需要“混入”额外的功能，通过多重继承就可以实现。这种设计通常称之为MixIn。</p>
<p>为了更好地看出继承关系，我们把Runnable和Flyable类改为RunnableMixIn和FlyableMixIn。</p>
<h2 id="类方法"><a href="#类方法" class="headerlink" title="类方法"></a>类方法</h2><p>和大部分语言一样，Python也支持类方法，这样就可以在不创建实例的情况下，执行一些公共方法。</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="title">object</span>):</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>, name, age)</span></span>:</div><div class="line">        <span class="keyword">super</span>(Student, <span class="keyword">self</span>).__init_<span class="number">_</span>()</div><div class="line">        <span class="keyword">self</span>.name = name</div><div class="line">        <span class="keyword">self</span>.age = age</div><div class="line"></div><div class="line">    @classmethod</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Func</span><span class="params">(cls)</span></span>:</div><div class="line">        print(<span class="string">'cls:'</span>, cls)</div><div class="line"></div><div class="line">s = Student(<span class="string">'Michel'</span>, <span class="number">19</span>)</div><div class="line">s.Func()</div><div class="line"></div><div class="line"><span class="comment"># cls: &lt;class '__main__.Student'&gt;</span></div><div class="line"><span class="comment"># cls: &lt;class '__main__.Student'&gt;</span></div></pre></td></tr></table></figure>
<p>从上面的例子中可以看出，Python不但可以通过类名调用类方法，还可以通过实例调用类方法。</p>
<h2 id="定制类"><a href="#定制类" class="headerlink" title="定制类"></a>定制类</h2><p>Python的class中有许多特殊用途的函数，可以帮助我们定制类。常用的有以下几个：</p>
<ul>
<li><code>__slots__</code> 限制class实例能添加的属性</li>
<li><code>__str__()</code> 格式化字符串时返回的字符串</li>
<li><code>__iter__()</code> 返回一个迭代对象，用于实现 <code>for ... in</code> 循环</li>
<li><code>__getitem__()</code> 用于取出指定下标的对象</li>
<li><code>__getattr__()</code> 用于动态返回一个不存在的属性</li>
</ul>
<p>这里就介绍一下最常用的 <code>__str__()</code>，其他的如果有兴趣可看<a href="http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014319098638265527beb24f7840aa97de564ccc7f20f6000" target="_blank" rel="external">这里</a></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="title">object</span>):</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>, name, age)</span></span>:</div><div class="line">        <span class="keyword">super</span>(Student, <span class="keyword">self</span>).__init_<span class="number">_</span>()</div><div class="line">        <span class="keyword">self</span>.name = name</div><div class="line">        <span class="keyword">self</span>.age = age</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(<span class="keyword">self</span>)</span></span>:</div><div class="line">        <span class="keyword">return</span> <span class="string">'%s: &#123;name: %s, age: %d&#125;'</span> % (<span class="keyword">super</span>().__str_<span class="number">_</span>(), <span class="keyword">self</span>.name, <span class="keyword">self</span>.age)</div><div class="line"></div><div class="line">s = Student(<span class="string">'Michel'</span>, <span class="number">19</span>)</div><div class="line">print(s)</div><div class="line"></div><div class="line"><span class="comment"># &lt;__main__.Student object at 0x1012355c0&gt;: &#123;name: Michel, age: 19&#125;</span></div></pre></td></tr></table></figure>
<p>这还是一个如何调用父类方法的例子。</p>
<h1 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h1><p>枚举可以用来定义一组相关常量，Python中的Enum功能是通过定义一个class实现的，每个常量都是class的一个唯一实例。</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; from enum import Enum</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; Month = Enum(<span class="string">'Month'</span>, (<span class="string">'Jan'</span>, <span class="string">'Feb'</span>, <span class="string">'Mar'</span>, <span class="string">'Apr'</span>, <span class="string">'May'</span>, <span class="string">'Jun'</span>, <span class="string">'Jul'</span>, <span class="string">'Aug'</span>, <span class="string">'Sep'</span>, <span class="string">'Oct'</span>, <span class="string">'Nov'</span>, <span class="string">'Dec'</span>))</div></pre></td></tr></table></figure>
<p>这样我们就获得了<code>Month</code>类型的枚举类，可以直接使用<code>Month.Jan</code>来引用一个常量，或者枚举它的所有成员：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><div class="line">&gt;&gt;&gt; <span class="keyword">for</span> name, member <span class="keyword">in</span> Month.__members__.items():</div><div class="line">...     print(name, <span class="string">'=&gt;'</span>, member, <span class="string">','</span>, member.value)</div><div class="line">...</div><div class="line">Jan =&gt; Month<span class="selector-class">.Jan</span> , <span class="number">1</span></div><div class="line">Feb =&gt; Month<span class="selector-class">.Feb</span> , <span class="number">2</span></div><div class="line">Mar =&gt; Month<span class="selector-class">.Mar</span> , <span class="number">3</span></div><div class="line">Apr =&gt; Month<span class="selector-class">.Apr</span> , <span class="number">4</span></div><div class="line">May =&gt; Month<span class="selector-class">.May</span> , <span class="number">5</span></div><div class="line">Jun =&gt; Month<span class="selector-class">.Jun</span> , <span class="number">6</span></div><div class="line">Jul =&gt; Month<span class="selector-class">.Jul</span> , <span class="number">7</span></div><div class="line">Aug =&gt; Month<span class="selector-class">.Aug</span> , <span class="number">8</span></div><div class="line">Sep =&gt; Month<span class="selector-class">.Sep</span> , <span class="number">9</span></div><div class="line">Oct =&gt; Month<span class="selector-class">.Oct</span> , <span class="number">10</span></div><div class="line">Nov =&gt; Month<span class="selector-class">.Nov</span> , <span class="number">11</span></div><div class="line">Dec =&gt; Month<span class="selector-class">.Dec</span> , <span class="number">12</span></div></pre></td></tr></table></figure>
<p>这时value属性则是自动赋给成员的int常量，默认从1开始计数。</p>
<p>如果需要更精确地控制枚举类型，可以从Enum派生出自定义类：</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><div class="line">from <span class="class"><span class="keyword">enum</span> <span class="title">import</span> <span class="title">Enum</span>, <span class="title">unique</span></span></div><div class="line"></div><div class="line">@unique</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Weekday</span>(<span class="title">Enum</span>):</span></div><div class="line">    Sun = <span class="number">0</span> <span class="comment"># Sun的value被设定为0</span></div><div class="line">    Mon = <span class="number">1</span></div><div class="line">    Tue = <span class="number">2</span></div><div class="line">    Wed = <span class="number">3</span></div><div class="line">    Thu = <span class="number">4</span></div><div class="line">    Fri = <span class="number">5</span></div><div class="line">    Sat = <span class="number">6</span></div></pre></td></tr></table></figure>
<p><code>@unique</code>装饰器可以帮助我们检查保证没有重复值。</p>
<p>枚举的用法：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; day1 = Weekday.Mon</span></div><div class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; <span class="built_in">print</span>(day1)</span></div><div class="line">Weekday.Mon</div><div class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; <span class="built_in">print</span>(Weekday.Tue)</span></div><div class="line">Weekday.Tue</div><div class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; <span class="built_in">print</span>(Weekday[<span class="string">'Tue'</span>])</span></div><div class="line">Weekday.Tue</div><div class="line"><span class="meta">#</span><span class="bash"> 枚举转 value</span></div><div class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; <span class="built_in">print</span>(Weekday.Tue.value)</span></div><div class="line">2</div><div class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; <span class="built_in">print</span>(day1 == Weekday.Mon)</span></div><div class="line">True</div><div class="line"><span class="meta">#</span><span class="bash"> 值判断</span></div><div class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; <span class="built_in">print</span>(day1 == Weekday.Tue)</span></div><div class="line">False</div><div class="line"><span class="meta">#</span><span class="bash"> value 转枚举</span></div><div class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; <span class="built_in">print</span>(Weekday(1))</span></div><div class="line">Weekday.Mon</div><div class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; <span class="built_in">print</span>(day1 == Weekday(1))</span></div><div class="line">True</div><div class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Weekday(7)</span></div><div class="line">Traceback (most recent call last):</div><div class="line">  ...</div><div class="line">ValueError: 7 is not a valid Weekday</div><div class="line"><span class="meta">#</span><span class="bash"> 遍历枚举值</span></div><div class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; <span class="keyword">for</span> name, member <span class="keyword">in</span> Weekday.__members__.items():</span></div><div class="line">...     print(name, '=&gt;', member)</div><div class="line">...</div><div class="line">Sun =&gt; Weekday.Sun</div><div class="line">Mon =&gt; Weekday.Mon</div><div class="line">Tue =&gt; Weekday.Tue</div><div class="line">Wed =&gt; Weekday.Wed</div><div class="line">Thu =&gt; Weekday.Thu</div><div class="line">Fri =&gt; Weekday.Fri</div><div class="line">Sat =&gt; Weekday.Sat</div></pre></td></tr></table></figure>
<p>顺带提一下，<strong>Python枚举的value不一定是int型，还可以是其他类型，比如str：</strong>，例如</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><div class="line">from <span class="class"><span class="keyword">enum</span> <span class="title">import</span> <span class="title">Enum</span></span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UploadServer</span>(<span class="title">Enum</span>):</span></div><div class="line">    Intranet = <span class="string">'http://www.xxxxx.com/upload'</span></div><div class="line">    Extranet = <span class="string">'http://www.yyyyy.com/upload'</span></div></pre></td></tr></table></figure>
<h1 id="单例"><a href="#单例" class="headerlink" title="单例"></a>单例</h1><p>开发多线程的产品，经常会需要使用单例模式管理一些公用资源，比如缓存数据的操作。Python的单例模式实现方式有很多，附上一个Python式的线程安全的单例实现：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python3</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> threading</div><div class="line"></div><div class="line">__all__ = [<span class="string">'singleton'</span>]</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">singleton</span><span class="params">(cls, *args, **kw)</span>:</span></div><div class="line">    _instances = &#123;&#125;</div><div class="line">    _lock = threading.Lock()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_singleton</span><span class="params">()</span>:</span></div><div class="line">        _lock.acquire()</div><div class="line"></div><div class="line">        <span class="keyword">if</span> cls <span class="keyword">not</span> <span class="keyword">in</span> _instances:</div><div class="line">            _instances[cls] = cls(*args, **kw)</div><div class="line"></div><div class="line">        _lock.release()</div><div class="line">        <span class="keyword">return</span> _instances[cls]</div><div class="line"></div><div class="line">    <span class="keyword">return</span> _singleton</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line"></div><div class="line"><span class="meta">    @singleton</span></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ClassA</span><span class="params">(object)</span>:</span></div><div class="line">        <span class="keyword">pass</span></div><div class="line"></div><div class="line">    print(ClassA())</div><div class="line">    print(ClassA())</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># &lt;__main__.ClassA object at 0x101340550&gt;</span></div><div class="line"><span class="comment"># &lt;__main__.ClassA object at 0x101340550&gt;</span></div></pre></td></tr></table></figure>
<h1 id="模块-amp-包"><a href="#模块-amp-包" class="headerlink" title="模块 &amp; 包"></a>模块 &amp; 包</h1><p>到这里基本上已经可以开始写Python程序了，唯一的问题就是你肯定不会想把所有的功能塞到一个文件里，那样的代码维护不说维护起来想死，开发起来都想哭吧。</p>
<h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><p>在Python中，一个.py文件就称之为一个模块（Module）。使用模块最大的好处是大大提高了代码的可维护性。其次，编写代码不必从零开始。当一个模块编写完毕，就可以被其他地方引用。我们在编写程序的时候，也经常引用其他模块，包括Python内置的模块和来自第三方的模块。</p>
<p>使用模块还可以避免函数名和变量名冲突。相同名字的函数和变量完全可以分别存在不同的模块中，因此，我们自己在编写模块时，不必考虑名字会与其他模块冲突。但是也要注意，尽量不要与内置函数名字冲突。点这<a href="https://docs.python.org/3/library/functions.html" target="_blank" rel="external">里查</a>看Python的所有内置函数。</p>
<h3 id="使用模块"><a href="#使用模块" class="headerlink" title="使用模块"></a>使用模块</h3><p>Python本身就内置了很多非常有用的模块，只要安装完毕，这些模块就可以立刻使用。</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><div class="line">#!/usr/bin/env <span class="keyword">python3</span></div><div class="line"># -*- codin<span class="variable">g:</span> utf-<span class="number">8</span> -*-</div><div class="line"></div><div class="line"><span class="string">' a test module '</span></div><div class="line"></div><div class="line">__author__ = <span class="string">'Michael Liao'</span></div><div class="line"></div><div class="line">import sys</div><div class="line"></div><div class="line">def test():</div><div class="line">    <span class="keyword">args</span> = sys.<span class="built_in">argv</span></div><div class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(<span class="keyword">args</span>)==<span class="number">1</span>:</div><div class="line">            <span class="keyword">print</span>(<span class="string">'Hello, world!'</span>)</div><div class="line">    elif <span class="built_in">len</span>(<span class="keyword">args</span>)==<span class="number">2</span>:</div><div class="line">        <span class="keyword">print</span>(<span class="string">'Hello, %s!'</span> % <span class="keyword">args</span>[<span class="number">1</span>])</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">print</span>(<span class="string">'Too many arguments!'</span>)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</div><div class="line">    test()</div></pre></td></tr></table></figure>
<blockquote>
<p>第1行和第2行是标准注释，第1行注释可以让这个hello.py文件直接在Unix/Linux/Mac上运行，第2行注释表示.py文件本身使用标准UTF-8编码；<br>第4行是一个字符串，表示模块的文档注释，任何模块代码的第一个字符串都被视为模块的文档注释；<br>第6行使用<strong>author</strong>变量把作者写进去，这样当你公开源代码后别人就可以瞻仰你的大名；<br>以上就是Python模块的标准文件模板，当然也可以全部删掉不写，但是，按标准办事肯定没错。<br>后面开始就是真正的代码部分。<br>你可能注意到了，使用sys模块的第一步，就是导入该模块，导入sys模块后，我们就有了变量sys指向该模块，利用sys这个变量，就可以访问sys模块的所有功能。</p>
</blockquote>
<p>最后，注意到这两行代码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</div><div class="line">    <span class="built_in">test</span>()</div></pre></td></tr></table></figure>
<blockquote>
<p>当我们在命令行运行hello模块文件时，Python解释器把一个特殊变量<strong>name</strong>置为<strong>main</strong>，而如果在其他地方导入该hello模块时，if判断将失败，因此，这种if测试可以让一个模块通过命令行运行时执行一些额外的代码，最常见的就是运行测试。</p>
</blockquote>
<p>这个功能很实用，这样在开发的时候就可以快速验证自己的不确定的想法，对于初学者来说，简直完美。</p>
<h3 id="开发模块"><a href="#开发模块" class="headerlink" title="开发模块"></a>开发模块</h3><p>其实上文在介绍使用模块的时候已经把开发模块的注意事项讲的差不多了，这里补充一点。</p>
<p>回到上面单例的代码块，读者是否注意到下面这行代码：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><div class="line"><span class="attr">__all__</span> = [<span class="string">'singleton'</span>]</div></pre></td></tr></table></figure>
<p>这行代码通常紧跟在 <code>import</code> 语句之后，列出了当前模块默认开放的功能。</p>
<p>这样使用该模块时，可以通过下面的方法导入若干模块：</p>
<figure class="highlight capnproto"><table><tr><td class="code"><pre><div class="line"><span class="keyword">from</span> singleton <span class="keyword">import</span> *</div></pre></td></tr></table></figure>
<p>如果模块内部没有定义 <code>__all__</code> 或者 <code>__all__</code> 中没有列出模块外部所需的方法，就需要使用下面的方法导入指定的功能：</p>
<figure class="highlight capnproto"><table><tr><td class="code"><pre><div class="line"><span class="keyword">from</span> moduleA <span class="keyword">import</span> fun1, fun2</div></pre></td></tr></table></figure>
<p>或者导入整个模块：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> moduleB</div><div class="line"></div><div class="line"><span class="meta"># 通过 moduleB 调用所需方法</span></div><div class="line"><span class="title">moduleB</span>.xxx()</div></pre></td></tr></table></figure>
<h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><p>为了避免模块名冲突，Python又引入了按目录来组织模块的方法，称为包（Package）。</p>
<p>事实上，在写这篇博文的时候还是没有搞懂python3怎么开发一个分包的模块，稍后看下是否有时间研究研究。</p>
<h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><p>Python 语法的介绍到这里就差不多了，笔者的基础语法知识主要是从<a href="http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000" target="_blank" rel="external">廖雪峰的官方网站</a>上学习的，之后的开发过程中遇到的问题，基本靠搜索，这里要提一下，搜索到的解决方案很多都是基于 Python2.7 的，Python3.5 的 API 变化比较大，建议对照<a href="https://docs.python.org/3.5/c-api/" target="_blank" rel="external">官方文档</a>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;函数&quot;&gt;&lt;a href=&quot;#函数&quot; class=&quot;headerlink&quot; title=&quot;函数&quot;&gt;&lt;/a&gt;函数&lt;/h1&gt;&lt;h2 id=&quot;调用函数&quot;&gt;&lt;a href=&quot;#调用函数&quot; class=&quot;headerlink&quot; title=&quot;调用函数&quot;&gt;&lt;/a&gt;调用函数&lt;/h2&gt;&lt;p&gt;Python 系统内置了许多函数，可以直接调用，调用函数时，不仅会检查参数的个数，还会检查参数的类型，如果有异常系统会报错。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://codingpub.github.io/categories/Python/"/>
    
    
      <category term="爬虫" scheme="http://codingpub.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Python爬虫入门-基础知识</title>
    <link href="http://codingpub.github.io/2016/09/05/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>http://codingpub.github.io/2016/09/05/Python爬虫入门-基础知识/</id>
    <published>2016-09-05T07:25:03.000Z</published>
    <updated>2017-07-16T07:29:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>这篇博文主要介绍 Python3 的一些常用语法，因为大部分基础语法在廖雪峰大神的 <a href="http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000" target="_blank" rel="external">Python 教程</a> 都有详细的介绍，此文主要介绍一些常用的入门知识，并提供详细知识点的学习链接。</p>
<a id="more"></a>
<h1 id="输入-amp-输出"><a href="#输入-amp-输出" class="headerlink" title="输入&amp;输出"></a>输入&amp;输出</h1><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>用 <code>print()</code> 在括号中加上字符串，就可以向屏幕上输出指定的文字，<code>print()</code> 方法支持可变参数，支持同时打印多个值，用逗号隔开，遇到逗号时会输出一个空格。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; <span class="built_in">print</span>(<span class="string">'The quick brown fox'</span>, <span class="string">'jumps over'</span>, <span class="string">'the lazy dog'</span>)</span></div><div class="line">The quick brown fox jumps over the lazy dog</div></pre></td></tr></table></figure>
<p><code>print()</code> 还可以直接打印表达式的运算结果</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><div class="line">&gt;&gt;&gt; print('<span class="number">100</span> + <span class="number">200</span> =', <span class="number">100</span> + <span class="number">200</span>)</div><div class="line"><span class="number">100</span> + <span class="number">200</span> = <span class="number">300</span></div></pre></td></tr></table></figure>
<h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>之所以把输入放到输出的后面，是因为就爬虫而言，输入实在很少用，即使有定制的需求，通常也是通过读取配置文件实现。笔者目前唯一用到输入的功能，就是在程序运行结束后等待用户输入确认再退出程序，避免程序运行结束后自动退出，因为自动退出会让用户误以为是闪退。</p>
<p>有需要了解输入部分的请看<a href="http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431643484137e38b44e5925440ec8b1e4c70f800b4e2000" target="_blank" rel="external">这里</a>，把下面的代码加到程序最后就可以等待用户确认后再退出程序：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="title">input</span><span class="params">(<span class="string">'enter anything to exit: '</span>)</span></span></div></pre></td></tr></table></figure>
<p>当然也可以通过线程睡眠达到这个效果，但是笔者认为它即麻烦又不够友好，并不建议使用。</p>
<h1 id="数据类型和变量"><a href="#数据类型和变量" class="headerlink" title="数据类型和变量"></a>数据类型和变量</h1><p>Python 基础数据类型包括 int、float、str、bool、None，分别是整形、浮点型、字符串、布尔值、空值。</p>
<p>其中整形和浮点型不多介绍，跟其他语言差别不大。</p>
<h2 id="字符串表示"><a href="#字符串表示" class="headerlink" title="字符串表示"></a>字符串表示</h2><p>字符串可以用单引号或双引号括起来，具体使用哪个看个人习惯或团队约定，建议是单个项目使用统一的约定。如果字符串内部既包含 <code>&#39;</code> 又包含 <code>&quot;</code>，Python 的处理和大部分语言一样，可以在引号的前面加上转义字符 <code>\</code> 来标识。</p>
<p>如果字符串里面有很多字符都需要转义，就需要加很多 <code>\</code>，为了简化，Python还允许用 <code>r&#39;&#39;</code> 表示 <code>&#39;&#39;</code> 内部的字符串默认不转义：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'\\\t\\'</span>)</div><div class="line">\       \</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">r'\\\t\\'</span>)</div><div class="line">\\\t\\</div></pre></td></tr></table></figure>
<p>如果字符串内部有很多换行，用\n写在一行里不好阅读，为了简化，Python允许用 <code>&#39;&#39;&#39;...&#39;&#39;&#39;</code> 的格式表示多行内容：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line">print(<span class="string">'''line1</span></div><div class="line">line2</div><div class="line">line3''')</div></pre></td></tr></table></figure>
<p>多行字符串 <code>&#39;&#39;&#39;...&#39;&#39;&#39;</code> 还可以在前面加上 <code>r</code> 使用。</p>
<h2 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h2><p>布尔值只有 <code>True</code> 和 <code>False</code> 两种值，可以用 <code>and</code>、<code>or</code>、<code>not</code> 对布尔值进行运算操作，这相对于其他语言来说比较奇葩，不过也不是很难接受：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">True</span> <span class="keyword">or</span> <span class="keyword">True</span></div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">True</span> <span class="keyword">or</span> <span class="keyword">False</span></div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">False</span> <span class="keyword">or</span> <span class="keyword">False</span></div><div class="line"><span class="keyword">False</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">5</span> &gt; <span class="number">3</span> <span class="keyword">or</span> <span class="number">1</span> &gt; <span class="number">3</span></div><div class="line"><span class="keyword">True</span></div></pre></td></tr></table></figure>
<p>布尔值经常用于条件判断：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><div class="line"><span class="built_in">if</span> age &gt;= <span class="number">18</span>:</div><div class="line">    <span class="built_in">print</span>(<span class="string">'adult'</span>)</div><div class="line"><span class="built_in">else</span>:</div><div class="line">    <span class="built_in">print</span>(<span class="string">'teenager'</span>)</div></pre></td></tr></table></figure>
<h2 id="空值"><a href="#空值" class="headerlink" title="空值"></a>空值</h2><p>空值是 Python 里一个特殊的值，用 <code>None</code> 表示。None 不能理解为0，因为0是有意义的，而 None 是一个特殊的空值。</p>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>变量名必须是大小写英文、数字和 <code>_</code> 的组合，且不能用数字开头。</p>
<p>可以把任意数据类型赋值给变量，同一个变量可以反复赋值，而且可以是不同类型的变量。</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><div class="line"><span class="keyword">a</span> = <span class="number">123</span> <span class="comment"># a是整数</span></div><div class="line">print(<span class="keyword">a</span>)</div><div class="line"><span class="keyword">a</span> = <span class="string">'ABC'</span> <span class="comment"># a变为字符串</span></div><div class="line">print(<span class="keyword">a</span>)</div></pre></td></tr></table></figure>
<p>这种变量本身类型不固定的语言称之为动态语言，与之对应的是静态语言。静态语言在定义变量时必须指定变量类型，如果赋值的时候类型不匹配，就会报错。</p>
<p>对于动态语言的这种特性是好是坏，笔者无法做出断言，不过建议不要随意修改变量的类型，这会导致出错从概率变大，而且不易维护。</p>
<h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>所谓常量就是不能变的变量，比如常用的数学常数π就是一个常量。在Python中，通常用全部大写的变量名表示常量：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><div class="line"><span class="attr">PI</span> = <span class="number">3.14159265359</span></div></pre></td></tr></table></figure>
<blockquote>
<p>但事实上PI仍然是一个变量，Python根本没有任何机制保证PI不会被改变，所以，用全部大写的变量名表示常量只是一个习惯上的用法，如果你一定要改变变量PI的值，也没人能拦住你。</p>
</blockquote>
<h1 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h1><h2 id="编码转换"><a href="#编码转换" class="headerlink" title="编码转换"></a>编码转换</h2><p>前文已经提过，在最新的 Python 3 版本中，字符串 str 是以 Unicode 编码的，通过 <code>encode()</code> 方法可以将 str 编码为指定的 bytes，例如：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="string">'ABC'</span>.encode(<span class="string">'ascii'</span>)</div><div class="line">b<span class="string">'ABC'</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="string">'中文'</span>.encode(<span class="string">'utf-8'</span>)</div><div class="line">b<span class="string">'\xe4\xb8\xad\xe6\x96\x87'</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="string">'中文'</span>.encode(<span class="string">'ascii'</span>)</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;<span class="class"><span class="keyword">module</span>&gt;</span></div><div class="line"><span class="symbol">UnicodeEncodeError:</span> <span class="string">'ascii'</span> codec can<span class="string">'t encode characters in position 0-1: ordinal not in range(128)</span></div></pre></td></tr></table></figure>
<p>反过来，要把 bytes 变为 str，就需要用 <code>decode()</code> 方法，例如：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; b<span class="string">'ABC'</span>.decode(<span class="string">'ascii'</span>)</div><div class="line"><span class="string">'ABC'</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; b<span class="string">'\xe4\xb8\xad\xe6\x96\x87'</span>.decode(<span class="string">'utf-8'</span>)</div><div class="line"><span class="string">'中文'</span></div></pre></td></tr></table></figure>
<p>由于Python源代码也是一个文本文件，所以，当你的源代码中包含中文的时候，在保存源代码时，就需要务必指定保存为UTF-8编码。当Python解释器读取源代码时，为了让它按UTF-8编码读取，我们通常在文件开头写上这两行：</p>
<figure class="highlight d"><table><tr><td class="code"><pre><div class="line"><span class="meta">#!/usr/bin/env python3</span></div><div class="line"># -*- coding: utf-<span class="number">8</span> -*-</div></pre></td></tr></table></figure>
<p>第一行注释是为了告诉Linux/OS X系统，这是一个Python可执行程序，Windows系统会忽略这个注释；</p>
<p>第二行注释是为了告诉Python解释器，按照UTF-8编码读取源代码，否则，你在源代码中写的中文输出可能会有乱码。</p>
<p>申明了UTF-8编码并不意味着你的.py文件就是UTF-8编码的，必须并且要确保文本编辑器正在使用 UTF-8 without BOM 编码</p>
<h2 id="长度计算"><a href="#长度计算" class="headerlink" title="长度计算"></a>长度计算</h2><p>要计算str包含多少个字符，可以用len()函数，len()函数计算的是str的字符数，如果换成bytes，len()函数就计算字节数：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; len(b<span class="string">'ABC'</span>)</div><div class="line"><span class="number">3</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; len(b<span class="string">'\xe4\xb8\xad\xe6\x96\x87'</span>)</div><div class="line"><span class="number">6</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; len(<span class="string">'中文'</span>.encode(<span class="string">'utf-8'</span>))</div><div class="line"><span class="number">6</span></div></pre></td></tr></table></figure>
<h2 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h2><p>在Python中，采用的格式化方式和C语言是一致的，用 <code>%</code> 实现</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="string">'Hello, %s'</span> % <span class="string">'world'</span></div><div class="line"><span class="string">'Hello, world'</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="string">'Hi, %s, you have $%d.'</span> % (<span class="string">'Michael'</span>, <span class="number">1000000</span>)</div><div class="line"><span class="string">'Hi, Michael, you have $1000000.'</span></div></pre></td></tr></table></figure>
<p>常见的占位符有：</p>
<table>
<thead>
<tr>
<th>占位符</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>%d</td>
<td>整数</td>
</tr>
<tr>
<td>%f</td>
<td>浮点数</td>
</tr>
<tr>
<td>%s</td>
<td>字符串</td>
</tr>
<tr>
<td>%x</td>
<td>十六进制整数</td>
</tr>
</tbody>
</table>
<p>其中，格式化整数和浮点数还可以指定是否补0和整数与小数的位数：</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><div class="line">&gt;&gt;&gt; '%<span class="number">2</span>d-%<span class="number">02</span>d' % (<span class="number">3</span>, <span class="number">1</span>)</div><div class="line">' <span class="number">3</span><span class="number">-01</span>'</div><div class="line">&gt;&gt;&gt; '%<span class="number">.2</span>f' % <span class="number">3.1415926</span></div><div class="line">'<span class="number">3.14</span>'</div></pre></td></tr></table></figure>
<p>如果你不太确定应该用什么，<code>%s</code> 永远起作用，它会把任何数据类型转换为字符串：</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><div class="line">&gt;&gt;&gt; <span class="symbol">'Age</span>: %s. Gender: %s' % (<span class="number">25</span>, <span class="literal">True</span>)</div><div class="line"><span class="symbol">'Age</span>: <span class="number">25</span>. Gender: <span class="literal">True</span>'</div></pre></td></tr></table></figure>
<p>如果要在字符串里显示 % ，可以用 %% 表示：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="string">'growth rate: %d %%'</span> % <span class="number">7</span></div><div class="line"><span class="string">'growth rate: 7 %'</span></div></pre></td></tr></table></figure>
<h2 id="匹配和搜索文本"><a href="#匹配和搜索文本" class="headerlink" title="匹配和搜索文本"></a>匹配和搜索文本</h2><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>text = <span class="string">'yeah, but no, but yeah, but no, but yeah'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># Exact match</span></div><div class="line"><span class="meta">... </span>text == <span class="string">'yeah'</span></div><div class="line"><span class="keyword">False</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># Match at start or end</span></div><div class="line"><span class="meta">... </span>text.startswith(<span class="string">'yeah'</span>)</div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>text.endswith(<span class="string">'no'</span>)</div><div class="line"><span class="keyword">False</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># Search for the location of the first occurrence</span></div><div class="line"><span class="meta">... </span>text.find(<span class="string">'no'</span>)</div><div class="line"><span class="number">10</span></div></pre></td></tr></table></figure>
<h2 id="字符串拼凑"><a href="#字符串拼凑" class="headerlink" title="字符串拼凑"></a>字符串拼凑</h2><p>str 支持 +、+= 运算符：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; s1 = <span class="string">'a'</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; s2 = <span class="string">'b'</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; s1 + s2</div><div class="line"><span class="string">'ab'</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; s1 += s2</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; s1</div><div class="line"><span class="string">'ab'</span></div></pre></td></tr></table></figure>
<h2 id="字符串分割、合并"><a href="#字符串分割、合并" class="headerlink" title="字符串分割、合并"></a>字符串分割、合并</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; s = <span class="string">'my name is python'</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; arr = s.split(<span class="string">' '</span>)</div><div class="line">[<span class="string">'my'</span>, <span class="string">'name'</span>, <span class="string">'is'</span>, <span class="string">'python'</span>]</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="string">'-'</span>.join(arr)</div><div class="line"><span class="string">'my-name-is-python'</span></div></pre></td></tr></table></figure>
<h2 id="字符串替换"><a href="#字符串替换" class="headerlink" title="字符串替换"></a>字符串替换</h2><figure class="highlight vbnet"><table><tr><td class="code"><pre><div class="line">&gt;&gt;&gt; <span class="keyword">text</span> = <span class="comment">'yeah, but no, but yeah, but no, but yeah'</span></div><div class="line">&gt;&gt;&gt; <span class="keyword">text</span>.replace(<span class="comment">'yeah', 'yep')</span></div><div class="line"><span class="comment">'yep, but no, but yep, but no, but yep'</span></div></pre></td></tr></table></figure>
<h2 id="去除两侧字符"><a href="#去除两侧字符" class="headerlink" title="去除两侧字符"></a>去除两侧字符</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; s = <span class="string">' test '</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; s.strip(<span class="string">' '</span>)</div><div class="line"><span class="string">'test'</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; s.lstrip(<span class="string">' '</span>)</div><div class="line"><span class="string">'test '</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; s.rstrip(<span class="string">' '</span>)</div><div class="line"><span class="string">' test'</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; s.rstrip(<span class="string">'t '</span>)</div><div class="line"><span class="string">' tes'</span></div></pre></td></tr></table></figure>
<h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p>正则表达式的使用见这个<a href="http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/00143193331387014ccd1040c814dee8b2164bb4f064cff000" target="_blank" rel="external">教程</a>，需要注意的是正则规则使用 <code>r&#39;&#39;</code> 格式的字符串，可以减少大量的转义字符。</p>
<p>这边只介绍简单的字符提取，提取结果是 None or 字符串数组：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line">result = re.findall(<span class="string">r'(?&lt;=uploads)/.*'</span>, url)</div><div class="line"><span class="keyword">if</span> result <span class="keyword">and</span> len(result) &gt; <span class="number">0</span>:</div><div class="line">    result = result[<span class="number">0</span>]</div></pre></td></tr></table></figure>
<h1 id="list-amp-tuple"><a href="#list-amp-tuple" class="headerlink" title="list &amp; tuple"></a>list &amp; tuple</h1><h2 id="list"><a href="#list" class="headerlink" title="list"></a>list</h2><p>list是一种有序的集合，可以随时添加和删除其中的元素。</p>
<h3 id="初始化和检索"><a href="#初始化和检索" class="headerlink" title="初始化和检索"></a>初始化和检索</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; classmates = [<span class="string">'Michael'</span>, <span class="string">'Bob'</span>, <span class="string">'Tracy'</span>]</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; classmates</div><div class="line">[<span class="string">'Michael'</span>, <span class="string">'Bob'</span>, <span class="string">'Tracy'</span>]</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; len(classmates)</div><div class="line"><span class="number">3</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; classmates[<span class="number">0</span>]</div><div class="line"><span class="string">'Michael'</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; classmates[-<span class="number">1</span>]</div><div class="line"><span class="string">'Tracy'</span></div></pre></td></tr></table></figure>
<p>下标为负数时表示逆向检索，下标越界会导致崩溃</p>
<h3 id="插入、删除、替换元素"><a href="#插入、删除、替换元素" class="headerlink" title="插入、删除、替换元素"></a>插入、删除、替换元素</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; classmates.append(<span class="string">'Adam'</span>)</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; classmates</div><div class="line">[<span class="string">'Michael'</span>, <span class="string">'Bob'</span>, <span class="string">'Tracy'</span>, <span class="string">'Adam'</span>]</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; classmates.insert(<span class="number">1</span>, <span class="string">'Jack'</span>)</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; classmates</div><div class="line">[<span class="string">'Michael'</span>, <span class="string">'Jack'</span>, <span class="string">'Bob'</span>, <span class="string">'Tracy'</span>, <span class="string">'Adam'</span>]</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; classmates.pop()</div><div class="line"><span class="string">'Adam'</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; classmates</div><div class="line">[<span class="string">'Michael'</span>, <span class="string">'Jack'</span>, <span class="string">'Bob'</span>, <span class="string">'Tracy'</span>]</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; classmates.pop(<span class="number">1</span>)</div><div class="line"><span class="string">'Jack'</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; classmates</div><div class="line">[<span class="string">'Michael'</span>, <span class="string">'Bob'</span>, <span class="string">'Tracy'</span>]</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; classmates[<span class="number">1</span>] = <span class="string">'Sarah'</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; classmates</div><div class="line">[<span class="string">'Michael'</span>, <span class="string">'Sarah'</span>, <span class="string">'Tracy'</span>]</div></pre></td></tr></table></figure>
<h2 id="tuple"><a href="#tuple" class="headerlink" title="tuple"></a>tuple</h2><p>tuple和list非常类似，但是tuple一旦初始化就不能修改。</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; classmates = (<span class="string">'Michael'</span>, <span class="string">'Bob'</span>, <span class="string">'Tracy'</span>)</div></pre></td></tr></table></figure>
<p>不可变的tuple有什么意义？因为tuple不可变，所以代码更安全。如果可能，能用tuple代替list就尽量用tuple。</p>
<p>一个空的tuple:</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; t = ()</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; t</div><div class="line">()</div></pre></td></tr></table></figure>
<p>一个只有1个元素的tuple:</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; t = (<span class="number">1</span>,)</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; t</div><div class="line">(<span class="number">1</span>,)</div></pre></td></tr></table></figure>
<p>Why?</p>
<p>这是因为括号 <code>()</code> 既可以表示 tuple，又可以表示数学公式中的小括号，这会导致 <code>(1)</code> 产生歧义，因此，Python 规定，<code>(1)</code> 按小括号进行计算，表示只有一个元素的 tuple 时，加上逗号来消除歧义。</p>
<h1 id="dict-amp-set"><a href="#dict-amp-set" class="headerlink" title="dict &amp; set"></a>dict &amp; set</h1><h2 id="dict"><a href="#dict" class="headerlink" title="dict"></a>dict</h2><p>Python内置了字典 <a href="http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/00143167793538255adf33371774853a0ef943280573f4d000" target="_blank" rel="external">dict</a> 的支持，dict 全称 dictionary，在其他语言中也称为 map，使用键-值（key-value）存储，具有极快的查找速度。</p>
<blockquote>
<p>dict的key必须是不可变对象，这是因为dict根据key来计算value的存储位置，如果每次计算相同的key得出的结果不同，那dict内部就完全混乱了。这个通过key计算位置的算法称为哈希算法（Hash）。要保证hash的正确性，作为key的对象就不能变。在Python中，字符串、整数等都是不可变的，因此，可以放心地作为key。</p>
</blockquote>
<h3 id="初始化和检索-1"><a href="#初始化和检索-1" class="headerlink" title="初始化和检索"></a>初始化和检索</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; d = &#123;<span class="string">'Michael'</span>: <span class="number">95</span>, <span class="string">'Bob'</span>: <span class="number">75</span>, <span class="string">'Tracy'</span>: <span class="number">85</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; d[<span class="string">'Michael'</span>]</div><div class="line"><span class="number">95</span></div></pre></td></tr></table></figure>
<p>检索时如果 key 不存在就会报错：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; d[<span class="string">'Thomas'</span>]</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;<span class="class"><span class="keyword">module</span>&gt;</span></div><div class="line"><span class="symbol">KeyError:</span> <span class="string">'Thomas'</span></div></pre></td></tr></table></figure>
<p>有两个方案可以解决这个问题，一个是取值之前使用 <code>in</code> 判断 key 是否存在，另一个是用 <code>get()</code> 方法取值，其中 <code>get()</code> 方法在查找失败时，默认返回 None， 也可以指定 Value。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; <span class="string">'Thomas'</span> <span class="keyword">in</span> d</span></div><div class="line">False</div><div class="line"><span class="meta"></span></div><div class="line">&gt;<span class="bash">&gt;&gt; d.get(<span class="string">'Thomas'</span>)</span></div><div class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; d.get(<span class="string">'Thomas'</span>, -1)</span></div><div class="line">-1</div></pre></td></tr></table></figure>
<h2 id="set"><a href="#set" class="headerlink" title="set"></a>set</h2><p>set和dict类似，也是一组key的集合，但不存储value。由于key不能重复，所以，在set中，没有重复的key，重复元素在set中自动被过滤。</p>
<h3 id="初始化、检索set"><a href="#初始化、检索set" class="headerlink" title="初始化、检索set"></a>初始化、检索set</h3><figure class="highlight lsl"><table><tr><td class="code"><pre><div class="line">&gt;&gt;&gt; s = set([<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>])</div><div class="line">&gt;&gt;&gt; s</div><div class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</div></pre></td></tr></table></figure>
<h3 id="添加、删除元素"><a href="#添加、删除元素" class="headerlink" title="添加、删除元素"></a>添加、删除元素</h3><figure class="highlight lsl"><table><tr><td class="code"><pre><div class="line">&gt;&gt;&gt; s.add(<span class="number">4</span>)</div><div class="line">&gt;&gt;&gt; s</div><div class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</div><div class="line">&gt;&gt;&gt; s.add(<span class="number">4</span>)</div><div class="line">&gt;&gt;&gt; s</div><div class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</div><div class="line"></div><div class="line">&gt;&gt;&gt; s.remove(<span class="number">4</span>)</div><div class="line">&gt;&gt;&gt; s</div><div class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</div></pre></td></tr></table></figure>
<h3 id="交集、并集"><a href="#交集、并集" class="headerlink" title="交集、并集"></a>交集、并集</h3><figure class="highlight lsl"><table><tr><td class="code"><pre><div class="line">&gt;&gt;&gt; s1 = set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</div><div class="line">&gt;&gt;&gt; s2 = set([<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</div><div class="line">&gt;&gt;&gt; s1 &amp; s2</div><div class="line">&#123;<span class="number">2</span>, <span class="number">3</span>&#125;</div><div class="line">&gt;&gt;&gt; s1 | s2</div><div class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</div></pre></td></tr></table></figure>
<p><em>注意：返回None的时候Python的交互式命令行不显示结果。</em></p>
<h3 id="插入、删除、替换元素-1"><a href="#插入、删除、替换元素-1" class="headerlink" title="插入、删除、替换元素"></a>插入、删除、替换元素</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; d[<span class="string">'Adam'</span>] = <span class="number">67</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; d[<span class="string">'Adam'</span>]</div><div class="line"><span class="number">67</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; d.pop(<span class="string">'Bob'</span>)</div><div class="line"><span class="number">75</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; d</div><div class="line">&#123;<span class="string">'Michael'</span>: <span class="number">95</span>, <span class="string">'Tracy'</span>: <span class="number">85</span>&#125;</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; d[<span class="string">'Jack'</span>] = <span class="number">90</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; d[<span class="string">'Jack'</span>]</div><div class="line"><span class="number">90</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; d[<span class="string">'Jack'</span>] = <span class="number">88</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; d[<span class="string">'Jack'</span>]</div><div class="line"><span class="number">88</span></div></pre></td></tr></table></figure>
<h1 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h1><p><code>if</code> 语句的形式：</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><div class="line">if <span class="params">&lt;x1&gt;</span>:</div><div class="line">    <span class="params">&lt;执行<span class="number">1</span>&gt;</span></div><div class="line">elif <span class="params">&lt;x2&gt;</span>:</div><div class="line">    <span class="params">&lt;执行<span class="number">2</span>&gt;</span></div><div class="line">elif <span class="params">&lt;x3&gt;</span>:</div><div class="line">    <span class="params">&lt;执行<span class="number">3</span>&gt;</span></div><div class="line"><span class="symbol">else:</span></div><div class="line">    <span class="params">&lt;执行<span class="number">4</span>&gt;</span></div></pre></td></tr></table></figure>
<p>只要<code>x</code>是非零数值、非空字符串、非空list、非空tuple、非空dict、非空set、非None等，就判断为True，否则为False。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">if</span> []:</div><div class="line"><span class="meta">... </span>    print(<span class="keyword">True</span>)</div><div class="line"><span class="meta">... </span><span class="keyword">else</span>:</div><div class="line"><span class="meta">... </span>    print(<span class="keyword">False</span>)</div><div class="line"><span class="keyword">False</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">if</span> <span class="keyword">None</span>:</div><div class="line"><span class="meta">... </span>    print(<span class="string">'None is True'</span>)</div><div class="line"><span class="meta">... </span><span class="keyword">else</span>:</div><div class="line"><span class="meta">... </span>    print(<span class="string">'None is False'</span>)</div><div class="line">...</div><div class="line"><span class="keyword">None</span> <span class="keyword">is</span> <span class="keyword">False</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">if</span> <span class="number">0</span>:</div><div class="line"><span class="meta">... </span>    print(<span class="string">'0 is True'</span>)</div><div class="line"><span class="meta">... </span><span class="keyword">else</span>:</div><div class="line"><span class="meta">... </span>    print(<span class="string">'0 is False'</span>)</div><div class="line">...</div><div class="line"><span class="number">0</span> <span class="keyword">is</span> <span class="keyword">False</span></div></pre></td></tr></table></figure>
<h1 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h1><p><code>for x in ...</code> 循环</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><div class="line"><span class="built_in">sum</span> = <span class="number">0</span></div><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]:</div><div class="line">    <span class="built_in">sum</span> = <span class="built_in">sum</span> + x</div><div class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>)</div></pre></td></tr></table></figure>
<p>用 <code>range()</code> 生成序列整数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">arr = []</div><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(2, 10):</div><div class="line">    arr.append(x)</div><div class="line"><span class="built_in">print</span>(<span class="string">'arr ='</span>, arr)</div><div class="line"><span class="comment"># arr = [2, 3, 4, 5, 6, 7, 8, 9]</span></div></pre></td></tr></table></figure>
<p>用 <code>range()</code> 生成 list</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><div class="line">arr2 = <span class="type">list</span>(range(<span class="number">1</span>, <span class="number">10</span>, <span class="number">2</span>))</div><div class="line">print('arr2 =', arr2)</div><div class="line"># arr2 = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]</div></pre></td></tr></table></figure>
<p><code>while</code> 循环</p>
<figure class="highlight excel"><table><tr><td class="code"><pre><div class="line"><span class="built_in">sum</span> = <span class="number">0</span></div><div class="line"><span class="built_in">n</span> = <span class="number">99</span></div><div class="line">while <span class="built_in">n</span> &gt; <span class="symbol">0:</span></div><div class="line">    <span class="built_in">sum</span> = <span class="built_in">sum</span> + <span class="built_in">n</span></div><div class="line">    <span class="built_in">n</span> = <span class="built_in">n</span> - <span class="number">2</span></div><div class="line">print(<span class="built_in">sum</span>)</div></pre></td></tr></table></figure>
<h1 id="高级特性"><a href="#高级特性" class="headerlink" title="高级特性"></a>高级特性</h1><h2 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; L = [<span class="string">'Michael'</span>, <span class="string">'Sarah'</span>, <span class="string">'Tracy'</span>, <span class="string">'Bob'</span>, <span class="string">'Jack'</span>]</div><div class="line"><span class="comment"># 从0到2</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; L[<span class="number">0</span><span class="symbol">:</span><span class="number">3</span>]</div><div class="line">[<span class="string">'Michael'</span>, <span class="string">'Sarah'</span>, <span class="string">'Tracy'</span>]</div><div class="line"><span class="comment"># 从2到3</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; L[<span class="number">2</span><span class="symbol">:</span><span class="number">4</span>]</div><div class="line">[<span class="string">'Tracy'</span>, <span class="string">'Bob'</span>]</div><div class="line"><span class="comment"># 从0到2</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; L[<span class="symbol">:</span><span class="number">3</span>]</div><div class="line">[<span class="string">'Michael'</span>, <span class="string">'Sarah'</span>, <span class="string">'Tracy'</span>]</div><div class="line"><span class="comment"># 从2到结尾</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; L[<span class="number">2</span><span class="symbol">:</span>]</div><div class="line">[<span class="string">'Tracy'</span>, <span class="string">'Bob'</span>, <span class="string">'Jack'</span>]</div><div class="line"><span class="comment"># 下标-1表示最后一个索引值</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; L[<span class="number">0</span><span class="symbol">:-</span><span class="number">1</span>]</div><div class="line">[<span class="string">'Michael'</span>, <span class="string">'Sarah'</span>, <span class="string">'Tracy'</span>, <span class="string">'Bob'</span>]</div></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; L = list(range(100))</span></div><div class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; L</span></div><div class="line">[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]</div><div class="line"><span class="meta">#</span><span class="bash"> 前10个数，每两个取一个</span></div><div class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; L[:10:2]</span></div><div class="line">[0, 2, 4, 6, 8]</div><div class="line"><span class="meta">#</span><span class="bash"> 所有数，每5个取一个</span></div><div class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; L[::5]</span></div><div class="line">[0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95]</div></pre></td></tr></table></figure>
<p><strong>tuple 和 str 也可以进行切片操作，操作结果分别是 tuple 和 str。</strong></p>
<h2 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h2><h3 id="list-1"><a href="#list-1" class="headerlink" title="list"></a>list</h3><p>迭代 value</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>L = [<span class="string">'Michael'</span>, <span class="string">'Sarah'</span>, <span class="string">'Tracy'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> x <span class="keyword">in</span> L:</div><div class="line"><span class="meta">... </span>    print(x)</div><div class="line">...</div><div class="line">Michael</div><div class="line">Sarah</div><div class="line">Tracy</div></pre></td></tr></table></figure>
<p>同时迭代 index, value</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><div class="line">&gt;&gt;&gt; <span class="keyword">for</span> <span class="selector-tag">i</span>, value <span class="keyword">in</span> enumerate([<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>]):</div><div class="line">...     print(<span class="selector-tag">i</span>, value)</div><div class="line">...</div><div class="line"><span class="number">0</span> A</div><div class="line"><span class="number">1</span> B</div><div class="line"><span class="number">2</span> C</div></pre></td></tr></table></figure>
<h3 id="dict-1"><a href="#dict-1" class="headerlink" title="dict"></a>dict</h3><p>迭代 key</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>d = &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'c'</span>: <span class="number">3</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> key <span class="keyword">in</span> d:</div><div class="line"><span class="meta">... </span>    print(key)</div><div class="line">a</div><div class="line">c</div><div class="line">b</div></pre></td></tr></table></figure>
<p>迭代 value</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>d = &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'c'</span>: <span class="number">3</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> v <span class="keyword">in</span> d.values():</div><div class="line"><span class="meta">... </span>    print(v)</div><div class="line"><span class="number">2</span></div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">3</span></div></pre></td></tr></table></figure>
<p>同时迭代 key, value</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>d = &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'c'</span>: <span class="number">3</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> k, v <span class="keyword">in</span> d.items():</div><div class="line"><span class="meta">... </span>    print(k, v)</div><div class="line">b <span class="number">2</span></div><div class="line">a <span class="number">1</span></div><div class="line">c <span class="number">3</span></div></pre></td></tr></table></figure>
<p>当我们使用for循环时，只要作用于一个可迭代对象，for循环就可以正常运行，我们不太关心该对象究竟是list还是其他数据类型。</p>
<p>那么，如何判断一个对象是可迭代对象呢？方法是通过collections模块的Iterable类型判断：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> Iterable</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(<span class="string">'abc'</span>, Iterable) <span class="comment"># str是否可迭代</span></div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], Iterable) <span class="comment"># list是否可迭代</span></div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(<span class="number">123</span>, Iterable) <span class="comment"># 整数是否可迭代</span></div><div class="line"><span class="keyword">False</span></div></pre></td></tr></table></figure>
<p>所以 str 也是可迭代的。</p>
<h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><p>最初列大纲时，是没有进阶知识这一文的，因为差不多都是基础知识，但是写着写着发现 demo 太多，导致篇幅有点大，决定分出去，又不太想写个一二三，就标题党一回，叫进阶知识了，虽然不是多高深，但相对此文的基础语法，还是有一定提高的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇博文主要介绍 Python3 的一些常用语法，因为大部分基础语法在廖雪峰大神的 &lt;a href=&quot;http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Python 教程&lt;/a&gt; 都有详细的介绍，此文主要介绍一些常用的入门知识，并提供详细知识点的学习链接。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://codingpub.github.io/categories/Python/"/>
    
    
      <category term="爬虫" scheme="http://codingpub.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Python爬虫入门-开发环境</title>
    <link href="http://codingpub.github.io/2016/09/05/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    <id>http://codingpub.github.io/2016/09/05/Python爬虫入门-开发环境/</id>
    <published>2016-09-05T07:24:41.000Z</published>
    <updated>2017-07-16T07:29:35.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h1><p>Python 有不少开发工具，因涉猎较少，这里就只介绍使用 Sublime Text3 搭建 Python IDE。</p>
<p>开始使用 Sublime Text 进行一些简单的文本编辑已经是好几年前的事情，那时候选择它的理由是跨平台，默认UTF8编码，可以很方便的在 Windows 和 Mac 两个平台同步编辑文本，自从一年多前开始使用 ST3 的插件功能，对它的喜爱也就一发不可收拾了。</p>
<a id="more"></a>
<p>ST 最原始的状态只是一个简单的编辑器，但是它的插件扩展功能十分强大，特别是 ST3 对插件的支持比起 ST2 有了很大的提升。现在 ST3 经过一些简单定制，就可以成为各种语言的 IDE，比如 NodeJs、React Native、Html5、C++ 等，当然也包括 Python。除了可以使用 ST3 编码，它还能编译、执行程序，简直是程序员必备的开发利器。</p>
<h2 id="Anaconda"><a href="#Anaconda" class="headerlink" title="Anaconda"></a>Anaconda</h2><p><a href="https://packagecontrol.io/packages/Anaconda" target="_blank" rel="external">Anaconda</a> for ST3 集成了许多 Python 开发需要使用的插件，包括 PyFlakes、pep8、McCabe 等，Anaconda 集成了 Python 的语法提醒、语法检查、代码格式化、编译、运行等功能。Anaconda 让一切都变得很简单，安装之后只需要简单的几个配置就可以得到一个顺手的 Python IDE。<em>(ST 插件的安装方法在以前的博文中已经讲过，这里不做赘述，有需要的自行翻查。)</em></p>
<ul>
<li><p>支持代码提示</p>
<p>  在 <code>~/Library/Application Support/Sublime Text 3/Packages/User</code> 目录下创建 Python.sublime-settings 文件，内容如下</p>
  <figure class="highlight json"><table><tr><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"auto_complete_triggers"</span>: [</div><div class="line">        &#123;</div><div class="line">            <span class="attr">"selector"</span>: <span class="string">"source.python - string - comment - constant.numeric"</span>,</div><div class="line">            <span class="attr">"characters"</span>: <span class="string">"."</span></div><div class="line">        &#125;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  对应Windows的目录是：<code>C:\Users\Administrator\AppData\Roaming\Sublime Text 3\Packages\User</code></p>
</li>
<li><p>Anaconda 的个性配置</p>
<p>  配置入口</p>
<p>  <code>Sublime Text &gt; Preferences &gt; Package Settings &gt; Anaconda &gt; Setting-User</code></p>
<p>  配置内容</p>
  <figure class="highlight"><table><tr><td class="code"><pre><div class="line">/*</div><div class="line">    Anaconda user settings</div><div class="line">*/</div><div class="line">&#123;</div><div class="line">    /*</div><div class="line">        If complete_parameters is true, anaconda will add function and class</div><div class="line">        parameters to its completions.</div><div class="line">        If complete_all_parameters is true, it will add all the possible</div><div class="line">        parameters, if it's false, it will add only required parameters</div><div class="line">    */</div><div class="line">    "complete_parameters": true,</div><div class="line">    "complete_all_parameters": true,</div><div class="line"></div><div class="line">    /*</div><div class="line">        Default python interpreter.</div><div class="line">        This can (and should) be overridden by project settings</div><div class="line">    */</div><div class="line">    "python_interpreter": "/Users/linxiaobin/anaconda/envs/py3/bin/python",</div><div class="line"></div><div class="line">    "pep8_ignore":["E501"]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  其中 <code>&quot;pep8_ignore&quot;:[&quot;E501&quot;]</code> 是用于关闭语法检查时对字符数的限制，Python 语法标准建议单行字符不超过 79 个字符，会有这样的限制肯定是有它的道理，但是在实际开发中，个人比较不喜欢这样的限制，大概是做 iOS 开发习惯了长命名，一下子转不过来。默认情况下，一旦字符数超过80就会出现一些边框将该行圈住，表示语法不符合标准，这不仅会影响强迫症程序猿的心情，还会导致我们忽略重要的语法错误，果断屏蔽。</p>
</li>
<li><p>hello world</p>
<p>  配置好环境，你是不是已经迫不及待的想练练手了呢，那就来个最简单的 hello world 吧。</p>
<ol>
<li>新建 <code>hello.py</code> 文件</li>
<li>用 ST 打开 <code>hello.py</code> 文件</li>
<li>编码 <code>print(&#39;Hello world!&#39;)</code></li>
<li><p>运行 <code>⌘+B</code>，第一次运行在顶部会弹出框选择 Python 的运行环境，建议选择 Anaconda 自带的，如果选了其他的后面想改回来，可以使用 <code>⇧+⌘+B</code> 重新选择。</p>
<p>如果你运气不差，可以看到 ST 下方的控制台输出了 <code>Hello world!</code>，如果你运气不好，就需要自行搜索解决方案了，因为笔者没有在这里遇到问题，也就没有建议可以给读者了。</p>
</li>
</ol>
</li>
</ul>
<h2 id="中文支持问题"><a href="#中文支持问题" class="headerlink" title="中文支持问题"></a>中文支持问题</h2><p>字符串作为一种特殊的数据类型，它有个比较麻烦的问题，那就是它的编码问题，Python2 默认的编码格式是 ASCII，到 Python3 时已经改为 Unicode，也就是说 Python 的字符串支持多语言，这是一个比较大的变化。</p>
<p>字符串编码问题会出现在三个阶段：存储、编辑、运行。通常编辑器会以 UTF-8 存储源码，编辑器读取文件时将其转化成 Unicode 字符存到内存里，编辑完成后再转成 UTF-8 存储到文件里。这里要提一下笔者在开发时遇到的一个环境问题，通过控制台执行 Python3 的程序输出中文正常，而通过 ST3 的控制台运行输出中文时会因编码异常而导致程序退出：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><div class="line">UnicodeEncodeError: 'ascii' codec can't encode characters in position 0-3: ordinal not in range(128)</div></pre></td></tr></table></figure>
<p>从这一现象中笔者推测 ST3 的编译和运行环境的编码格式不同于控制台，经过排查，最终定位到这是 Anaconda 自带的 Python 编译脚本不兼容中文导致的，因为没有找到修改 Anaconda 对应配置的方法，只好另外建一个 ST3 的 Python 编译环境，方法如下：</p>
<p>Tools &gt; Build System &gt; New Build System …</p>
<p>输入以下内容：</p>
<figure class="highlight"><table><tr><td class="code"><pre><div class="line">&#123;</div><div class="line">    "shell_cmd": "'/YourPythonDir/python' -u '$file'",</div><div class="line">    "file_regex": "^[ ]*File '(...*?)', line ([0-9]*)",</div><div class="line">    "selector": "source.python",</div><div class="line">    // support chinese</div><div class="line">    "env": &#123;"LANG": "en_US.UTF-8"&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>第一次切换编译环境可使用 ⌘+⇧+B 快捷键，之后继续使用 ⌘+B 编译即可。</p>
<p><em>注：env 配置适用于 Python3，Python2 配置为 <code>&quot;encoding&quot;: &quot;cp936&quot;</code>（备用，未测试）</em></p>
<h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><ul>
<li>⌘+B     编译执行</li>
<li>⌘+⇧+B   修改编译环境</li>
<li>⌘+R     搜索当前文件下的方法</li>
</ul>
<p>前两个快捷之前已经提过，这里主要讲一下 <code>⌘+R</code>，该快捷可以列出当前文件的所有类、方法的定义，支持模糊搜索，文件较大的情况下，适当使用可以带来不少方便。</p>
<h1 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h1><p>讲完 ST3 的 Anaconda 插件，再来讲讲 <a href="https://docs.continuum.io/anaconda/" target="_blank" rel="external">Anaconda Navigator</a>，这两个东东除了名字很像以外，还没有其他的关联笔者是不清楚的，比较懒，虽然好奇，还是没有深究，或许并没有什么关联~</p>
<p>Python 目前的最新版本是 3.5.2，还记得最开始接触 Python 使用的是 2.7 版本，其实那时候已经有 3.x 版本了，不过因为刚出来不久，还不够稳定，第三方的插件也比较少，这次在选 2.7 还是 3.5.2 版本的时候还犹豫了一下，毕竟还是比较熟悉 2.7 的语法，最终因个人比较喜欢使用最新版本，而且语法实在不应该成为程序员的障碍，花点时间了解一下也就开始动工了。</p>
<p>说这些的主要目的想说明 Python 还是个在成长的编程语言，各版本的发布都会带来新的功能，也会影响到旧功能的使用，因此进行 Python 开发通常需要同时具备若干版本的 Python 运行环境，而 Anaconda Navigator 就是用于管理多版本 Python 开发环境的 GUI 利器，除了 Anaconda Navigator 以外，<a href="https://github.com/yyuu/pyenv" target="_blank" rel="external">pyenv</a> 也有类似的功能，不过是命令行的，习惯命令行操作的读者可以了解一下。</p>
<p>相对来说 Anaconda Navigator 的优势是跨平台、有图形界面，可能因为设备性能不够的原因，运行起来会比较卡，好在配置好环境后基本不怎么需要打开这个应用~ Anaconda Navigator 还可以用来安装 Python 第三方库，只是默认的插件源是国外的，国内访问会比较慢，这个可以通过替换源解决。就目前而言，Anaconda Navigator 还算够用，以后如果有机会长期使用 Python 开发，再研究一下国内比较好的插件源和其他的工具。</p>
<h2 id="Anaconda-Navigator"><a href="#Anaconda-Navigator" class="headerlink" title="Anaconda Navigator"></a>Anaconda Navigator</h2><p>Anaconda Navigator 支持 Mac OS、Windows、Linux 三大平台，可以根据需要从官网<a href="https://docs.continuum.io/anaconda/install" target="_blank" rel="external">下载安装</a>，安装很简单，这里就不多提，安装好后运行程序，从左侧的边栏切换到 Environments，这里会带一个名为 root 的默认 Python 环境。在下方可以选择 Create or Clone 一个 Python 运行环境。</p>
<p><img src="Snip20160901_1.png" alt=""></p>
<p>单击环境名称行就可以切换到该环境下，在右侧列出了该环境下的 Python 包，可以检索、安装、移除依赖包，还可以通过 Chanels 按钮编辑源。默认源的库似乎不是很完整，不过它支持的插件管理起来很是方便，不支持的插件应该可以通过添加源的方式来支持，只是笔者并没有找到很全面的源，在国内可以使用<a href="https://mirror.tuna.tsinghua.edu.cn/help/anaconda/" target="_blank" rel="external">清华大学源</a>来提高包的安装速度，不过它只是 Anaconda 仓库的镜像，并没有提供更多的 Python 插件。</p>
<p>顺带一提这次用到的两个插件 <a href="http://lxml.de/" target="_blank" rel="external">lxml</a> 和 <a href="https://pypi.python.org/pypi/PrettyTable" target="_blank" rel="external">PrettyTable</a>，其中 lxml 查了很多安装方法，因为 Mac 环境和网络环境的限制，一直没有安装成功，直到使用 Anaconda 才顺利安装上了，不过 Anaconda 也不是万能的，PrettyTable 就检索不出来，是下载了安装包后手动装上的，所幸安装它没有遇到其他的问题。</p>
<p><img src="Snip20160901_2.png" alt=""></p>
<p>读者应该已经注意到 Python 环境名后面的三角启动标志，通过它就可以运行指定版本的 Python 了</p>
<p>Open Terminal 可以打开控制台，在这个控制台下执行 python 命令就是当前的配置环境了：</p>
<p><img src="Snip20160901_3.png" alt=""></p>
<p>Open With Python 可以打开控制台，直接进入 Python 运行环境：</p>
<p><img src="Snip20160901_4.png" alt=""></p>
<p>前文提到我们使用 ST 开发 Python 程序，那怎么让 ST 在编译执行程序的时候使用指定版本的 Python 呢？其实在前文的 Anaconda user settings 配置中已经列出了修改方法，修改 python_interpreter 配置，指向模板版本的 Python 即可。</p>
<p>Anaconda Navigator 配置的 Python 路径如下</p>
<ul>
<li><p>Mac OS</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><div class="line">~/anaconda/envs/&lt;YourEnviromentName&gt;/bin/python</div></pre></td></tr></table></figure>
</li>
<li><p>Windows</p>
  <figure class="highlight cmd"><table><tr><td class="code"><pre><div class="line">&lt;AnacondaInstallDir&gt;\\envs\\&lt;YourEnviromentName&gt;\\bin\\python</div></pre></td></tr></table></figure>
</li>
</ul>
<p>Anaconda 默认带的 Python 路径为 <code>~/anaconda/python</code></p>
<h2 id="pyenv"><a href="#pyenv" class="headerlink" title="pyenv"></a>pyenv</h2><blockquote>
<p><a href="https://github.com/yyuu/pyenv" target="_blank" rel="external">pyenv</a> lets you easily switch between multiple versions of Python. It’s simple, unobtrusive, and follows the UNIX tradition of single-purpose tools that do one thing well.</p>
</blockquote>
<p>刚开始使用 Anaconda Navigator 的时候，一度以为不再需要其他的 Python 版本管理工具，但事实说明存在即是道理。</p>
<p>pyenv 也是一个 Python 的版本管理工具，不同于 Anaconda Navigator，它是基于命令行的，安装 Python 的时候支持添加编译选项，就是这一特性让我开始了解并使用它，到现在反而觉得它比 Anaconda Navigator 更适合博主。（Ps: 最主要的原因大概是 AN 的启动实在是太慢了~）</p>
<p>首先通过homebrew安装pyenv，之后的所有Python安装和管理通过pyenv进行。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><div class="line">brew install pyenv</div></pre></td></tr></table></figure>
<p>pyenv 安装完以后，就可以选择性的进行 Python 环境安装了。下面已安装 Python3.5 为例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><div class="line">pyenv install 3.5</div></pre></td></tr></table></figure>
<p>pyenv install 出错：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><div class="line">zipimport.ZipImportError: can't decompress data; zlib not available</div></pre></td></tr></table></figure>
<p>解决办法：在命令行执行<code>xcode-select --install</code>，然后根据提示安装工具就可以解决了。</p>
<p>如果需要在不同版本的Python间进行切换的话，使用以下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> 全局切换</span></div><div class="line"><span class="meta">$</span><span class="bash"> pyenv global 3.3.1</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 本地切换</span></div><div class="line"><span class="meta">$</span><span class="bash"> pyenv <span class="built_in">local</span> 2.7.5</span></div></pre></td></tr></table></figure>
<p>配置好新版本之后你是不是已经迫不及待地测试了一下新版本的 Python 呢？咦，怎么没有效果？博主是个骗纸~</p>
<p>不要捉急，编辑<code>~/.bash_profile</code>文件，加上下面的内容：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><div class="line">export PYENV_ROOT="$HOME/.pyenv"</div><div class="line">export PATH="$PYENV_ROOT/bin:$PATH"</div><div class="line">eval "$(pyenv init -)"</div></pre></td></tr></table></figure>
<p>重新打开命令行窗口，执行 Python 命令就可以了。</p>
<p>查看已安装的 Python 版本：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> 所有版本</span></div><div class="line"><span class="meta">$</span><span class="bash"> pyenv versions</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 当前版本</span></div><div class="line"><span class="meta">$</span><span class="bash"> pyenv version</span></div></pre></td></tr></table></figure>
<p>查看 Python 程序的真实目录：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><div class="line">pyenv which python</div></pre></td></tr></table></figure>
<p>更多命令在<a href="https://github.com/yyuu/pyenv/blob/master/COMMANDS.md" target="_blank" rel="external">这里</a>。</p>
<h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><p>Ok，到这里读者应该懂得怎么使用 ST 学习、开发 Python 程序了，下一篇文章会介绍一些 Python3 的常用语法以及入门学习材料。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;开发工具&quot;&gt;&lt;a href=&quot;#开发工具&quot; class=&quot;headerlink&quot; title=&quot;开发工具&quot;&gt;&lt;/a&gt;开发工具&lt;/h1&gt;&lt;p&gt;Python 有不少开发工具，因涉猎较少，这里就只介绍使用 Sublime Text3 搭建 Python IDE。&lt;/p&gt;
&lt;p&gt;开始使用 Sublime Text 进行一些简单的文本编辑已经是好几年前的事情，那时候选择它的理由是跨平台，默认UTF8编码，可以很方便的在 Windows 和 Mac 两个平台同步编辑文本，自从一年多前开始使用 ST3 的插件功能，对它的喜爱也就一发不可收拾了。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://codingpub.github.io/categories/Python/"/>
    
    
      <category term="爬虫" scheme="http://codingpub.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="Sublime Text" scheme="http://codingpub.github.io/tags/Sublime-Text/"/>
    
  </entry>
  
  <entry>
    <title>Python爬虫入门（序）</title>
    <link href="http://codingpub.github.io/2016/09/05/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8%EF%BC%88%E5%BA%8F%EF%BC%89/"/>
    <id>http://codingpub.github.io/2016/09/05/Python爬虫入门（序）/</id>
    <published>2016-09-05T07:24:17.000Z</published>
    <updated>2017-07-16T07:29:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>Python 是一个跨平台的编程语言，可以在 Linux、Windows 或 Mac OS 上进行一次开发，然后运行在各个平台。</p>
<a id="more"></a>
<p>最初接触 Python 差不多是两年多以前了，期间陆续写过几个简单的脚本工具，但对于 Python 的了解乃至使用始终处于门外的程度。究其原因，从这次捡起 Python 来写个相对完整的爬虫程序来看，最主要的原因大概是因为 IDE 环境的问题了，之前写 Python 脚本的时候，笔者没有找到合适自己的开发工具，最开始学习 Python 时使用简单的编辑器编码，使用 Dos 命令行运行 Python 程序，开发效率可想而知。</p>
<p>这次捡起 Python 开发的主要原因是业务驱动，其实接到编写爬虫工具需求的时候，首先想到的就是 Python，可惜最初的使用体验太差，为了能够快速实现爬虫工具，使用熟悉的 OC 开发了一个简单的爬虫工具，陆续维护了几个月笔者就后悔了，各种不方便使用。于是决定使用 Python 重写该爬虫工具，从重新熟悉语法、配置开发工具和运行环境、编码到最终打包程序交付使用，差不多历时一周。</p>
<p>之前虽然有过使用 Python 写过简单脚本工具的经历，但那些真的只能称之为工具，只有一个 Python 文件，还是是面向过程的。这次为了能写个好点的爬虫程序，方便日后维护，也是恶补了一些 Python 的语法，终于出品了一个自我感觉比较良好的爬虫产品。在开发过程中，主要使用了以下技术和方法：</p>
<ul>
<li>面向对象</li>
<li>分模块、分文件开发</li>
<li>单例模式</li>
<li>多线程并发</li>
<li>lxml 解析HTML文本</li>
<li>Sqlite 本地缓存</li>
<li>PrettyTable 格式化表单输出</li>
<li>pyinstaller 打包生成 exe</li>
</ul>
<p><em>注：本来还想分包开发的（也就是分文件夹开发），但是 Python3 的分包开发开发还有一些坑，考虑到这次开发的工具差不多在 15~20 个文件之间，为了能快速输出产品，分包的功能先缓缓，日后有需要再研究。</em></p>
<p>在开发的过程中接触了许多 Python 开发的知识点，考虑到日常使用 Python 开发的机会还是比较少，决定写下这个系列文章，方便以后查阅：</p>
<p>《Python爬虫入门（序）》<br><a href="../Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/">《Python爬虫入门-开发环境》</a><br><a href="../Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/">《Python爬虫入门-基础知识》</a><br><a href="../Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8-%E8%BF%9B%E9%98%B6%E7%9F%A5%E8%AF%86/">《Python爬虫入门-进阶知识》</a><br><a href="../Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8-%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/">《Python爬虫入门-网络请求》</a><br><a href="../Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8-%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/">《Python爬虫入门-数据存储》</a><br><a href="../Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8-%E5%A4%9A%E7%BA%BF%E7%A8%8B/">《Python爬虫入门-多线程》</a><br><a href="../Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8-%E6%89%93%E5%8C%85%E7%A8%8B%E5%BA%8F/">《Python爬虫入门-打包程序》</a></p>
<p><em>注：笔者已经习惯了 Mac 开发环境，此系列文章除了最后的打包部分是在 Windows 环境进行外，其他部分都是在 Mac 平台基于 Python 3.5 完成。</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Python 是一个跨平台的编程语言，可以在 Linux、Windows 或 Mac OS 上进行一次开发，然后运行在各个平台。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://codingpub.github.io/categories/Python/"/>
    
    
      <category term="爬虫" scheme="http://codingpub.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Universal Link 填坑</title>
    <link href="http://codingpub.github.io/2016/07/21/Universal-Link-%E5%A1%AB%E5%9D%91/"/>
    <id>http://codingpub.github.io/2016/07/21/Universal-Link-填坑/</id>
    <published>2016-07-21T10:06:00.000Z</published>
    <updated>2017-07-16T07:29:35.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Universal Link 是 iOS9 的新特性，通过它可以使用传统的 HTTPS 链接来启动客户端APP，使用相同的地址来访问网站和APP。</p>
<blockquote>
<p>When you support universal links, iOS 9 users can tap a link to your website and get seamlessly redirected to your installed app without going through Safari. If your app isn’t installed, tapping a link to your website opens your website in Safari.</p>
</blockquote>
<a id="more"></a>
<p>要开启 Universal Link 功能，服务端的配置比较重要，客户端的代码相对简洁，主要包括以下几步：</p>
<ul>
<li>创建 apple-app-site-association 文件，文件内容包含客户端可以响应的 URL 地址。</li>
<li>上传 apple-app-site-association 文件到 HTTPS 服务器，可以把文件放到域名根目录或者 <code>.well-known</code> 子目录。</li>
<li>客户端响应 universal links。</li>
</ul>
<p>其中 HTTPS 服务器需要支持 ATS。</p>
<h1 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h1><h2 id="apple-app-site-association-文件内容"><a href="#apple-app-site-association-文件内容" class="headerlink" title="apple-app-site-association 文件内容"></a>apple-app-site-association 文件内容</h2><figure class="highlight json"><table><tr><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"applinks"</span>: &#123;</div><div class="line">        <span class="attr">"apps"</span>: [],</div><div class="line">        <span class="attr">"details"</span>: [</div><div class="line">            &#123;</div><div class="line">                <span class="attr">"appID"</span>: <span class="string">"9JA89QQLNQ.com.apple.wwdc"</span>,</div><div class="line">                <span class="attr">"paths"</span>: [ <span class="string">"/wwdc/news/"</span>, <span class="string">"/videos/wwdc/2015/*"</span>]</div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                <span class="attr">"appID"</span>: <span class="string">"ABCD1234.com.apple.wwdc"</span>,</div><div class="line">                <span class="attr">"paths"</span>: [ <span class="string">"*"</span> ]</div><div class="line">            &#125;</div><div class="line">        ]</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>参数说明：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>applinks</td>
<td>根节点，保持不变</td>
</tr>
<tr>
<td>apps</td>
<td>默认节点，保持不变</td>
</tr>
<tr>
<td>details</td>
<td>应用信息</td>
</tr>
<tr>
<td>appID</td>
<td>TeamID.Bundle_ID</td>
</tr>
<tr>
<td>paths</td>
<td>客户端支持的路径列表，支持通配符*</td>
</tr>
</tbody>
</table>
<p>其中TeamID有两个获取途径</p>
<ul>
<li>钥匙访问串中对应开发证书名称后面的括号里的那一串字符</li>
<li>在<a href="https://developer.apple.com/account/" target="_blank" rel="external">https://developer.apple.com/account</a> 的 Membership 可以查到 TeamID</li>
</ul>
<p>注意 apple-app-site-association 不带有文件后缀名，编辑好后，把 apple-app-site-association 上传到 HTTPS 服务器，可以把文件放到域名根目录或者 <code>.well-known</code> 子目录，之后验证下载地址是否正常，如：<a href="https://yourdomain.com/apple-app-site-association，其中" target="_blank" rel="external">https://yourdomain.com/apple-app-site-association，其中</a> <code>yourdomain.com</code> 记得改成你的域名哈。</p>
<h2 id="ATS"><a href="#ATS" class="headerlink" title="ATS"></a>ATS</h2><p>如果服务器已经支持 App Transport Security（ATS），请跳过这里。</p>
<p>一个符合 ATS 要求的 HTTPS，应该满足如下条件：</p>
<ol>
<li>Transport Layer Security协议版本要求TLS1.2以上</li>
<li>服务的Ciphers配置要求支持Forward Secrecy等</li>
<li>证书签名算法符合ATS要求等</li>
</ol>
<blockquote>
<p>Certificates must be signed using a SHA256 or better signature hash algorithm, with either a 2048 bit or greater RSA key or a 256 bit or greater Elliptic-Curve (ECC) key. Invalid certificates result in a hard failure and no connection</p>
</blockquote>
<p>博主测试时申请的是沃通的<a href="https://buy.wosign.com/free/" target="_blank" rel="external">免费证书</a>，可以使用2年。</p>
<p><img src="ATS.png" alt=""></p>
<h1 id="iOS客户端"><a href="#iOS客户端" class="headerlink" title="iOS客户端"></a>iOS客户端</h1><ol>
<li>在 identifier 管理页面 <a href="https://developer.apple.com/account/ios/identifier/bundle" target="_blank" rel="external">https://developer.apple.com/account/ios/identifier/bundle</a> 找到对应的 Bundle_ID &gt; 编辑 &gt; 开启 Associated Domains &gt; Done.</li>
<li>在 profile 管理页面 <a href="https://developer.apple.com/account/ios/profile/" target="_blank" rel="external">https://developer.apple.com/account/ios/profile</a> 找到对应的 profile 文件，重新生成。</li>
<li>更新 Xcode 的 profile 文件。</li>
<li><p>进入工程配置，定位到 Target &gt; Capabilities &gt; Associated Domains，开启该功能，之后点击 Associated Domains 下面的 <code>+</code>，输入待支持 Universal Link 的域名，格式如下：</p>
 <figure class="highlight stylus"><table><tr><td class="code"><pre><div class="line">applinks:www<span class="selector-class">.mywebsite</span><span class="selector-class">.com</span></div></pre></td></tr></table></figure>
<p> 其中前缀 <code>applinks:</code> 是固定写法，域名要明确是否包含 <code>www</code>，<code>applinks:</code> 后面只能跟上域名，不能 IP 直连。</p>
</li>
<li><p>实现 <code>UIApplicationDelegate</code> 的回调方法：</p>
 <figure class="highlight objectivec"><table><tr><td class="code"><pre><div class="line"><span class="comment">// Availability : iOS (9.0 and later)</span></div><div class="line">- (<span class="built_in">BOOL</span>)application:(<span class="built_in">UIApplication</span> *)application continueUserActivity:(<span class="built_in">NSUserActivity</span> *)userActivity restorationHandler:(<span class="keyword">void</span> (^)(<span class="built_in">NSArray</span> *))restorationHandler &#123;</div><div class="line">    <span class="built_in">BOOL</span> handledByDeepShare = ...;</div><div class="line">    <span class="keyword">return</span> handledByDeepShare;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="内网环境"><a href="#内网环境" class="headerlink" title="内网环境"></a>内网环境</h1><p>如果你是外网环境，可以跳到<a href="#测试-填坑">测试+填坑</a>部分。</p>
<p>如果是内网测环境测试，就需要解决https网络代理的问题，博主就是栽在这个坑里了。在之前的开发过程中，因为有用Fiddler来拦截HTTPS请求，导致系统在安装客户端时发起的 apple-app-site-association 请求一直都是失败的，即使 iOS 客户端已经安装了 Fiddler 生成的根证书，也一样不能通过测试。</p>
<p><img src="Fiddler.jpg" alt=""></p>
<p>将 Fiddler 的 Capture HTTPS CONTENTs 功能关闭，再开启 Fiddler 的 hosts 功能就可以访问到内网的 HTTPS 服务器了。</p>
<h1 id="测试-填坑"><a href="#测试-填坑" class="headerlink" title="测试+填坑"></a>测试+填坑</h1><h2 id="安装新包"><a href="#安装新包" class="headerlink" title="安装新包"></a>安装新包</h2><ol>
<li>Xcode联调安装，需要先把旧客户端删除，不然系统不会发起 apple-app-site-association 请求，这个是目前存在的现象，不确定以后是否会优化。</li>
<li>将app打包成ipa，通过其他安装工具安装。</li>
</ol>
<p>在新包的安装过程中，系统会发起 apple-app-site-association 的请求，注意这里是系统发起，而不是 app 发起，因此只能由服务器支持 ATS。</p>
<p>贴一个客户端支持的 Universal Link 到备忘录，保存，点击链接，希望你能顺利启动 app，并执行 <code>application:continueUserActivity:restorationHandler:</code> 方法，不然就有的折腾了。</p>
<h2 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h2><p>你是不是会奇怪，为什么要点备忘录里的链接，而不是网页上的，因为网页上还有一些坑，先确定 Universal Link 是否调通，再去填别的坑也不会太累，你说是不。</p>
<blockquote>
<ul>
<li>Universal Links will not work if you paste the link into the browser URL field.</li>
<li>Universal Links work with a user driven <code>&lt;a href=&quot;...&quot;&gt;</code> element click across domains. Example: if there is a Universal Link on google.com pointing to bnc.lt, it will open the app.</li>
<li>Universal Links will not work with a user driven <code>&lt;a href=&quot;...&quot;&gt;</code> element click on the same domain. Example: if there is a Universal Link on google.com pointing to a different Universal Link on google.com, it will not open the app.</li>
<li>Universal Links cannot be triggered via Javascript (in window.onload or via a .click() call on an <code>&lt;a&gt;</code> element), unless it is part of a user action.</li>
</ul>
</blockquote>
<p>也就是从iOS 9.2开始，直接把 Universal Link 拷贝到 Safari 的地址栏是无效的，在相同的 domain 内 Universal Links 是无效的，通过 js 调用也是无效的，真的是醉了。</p>
<h2 id="欢迎填坑"><a href="#欢迎填坑" class="headerlink" title="欢迎填坑"></a>欢迎填坑</h2><p>如果还有其他坑，欢迎来填！！</p>
<h1 id="验证外网环境"><a href="#验证外网环境" class="headerlink" title="验证外网环境"></a>验证外网环境</h1><p>苹果官方提供了 <a href="https://search.developer.apple.com/appsearch-validation-tool/" target="_blank" rel="external">appsearch-validation-tool</a> 可以用于验证 apple-app-site-association 文件是否正确，appsearch-validation-tool 目测是用于检测客户端搜索功能，顺带支持检测 Universal Link，因 iOS8 支持客户端搜索对应的 apple-app-site-association 需要签名，因博主写此文时尚无外网环境，也没有做过客户端搜索功能的支持，因此没用过这个工具，写在这里只为备用。</p>
<blockquote>
<p>参考:</p>
<ul>
<li><a href="https://developer.apple.com/library/ios/documentation/General/Conceptual/AppSearch/UniversalLinks.html" target="_blank" rel="external">Support Universal Links
</a></li>
<li><a href="https://github.com/ChenYilong/iOS9AdaptationTips#1-demo1_ios9网络适配_ats改用更安全的https" target="_blank" rel="external">iOS9网络适配_ATS：改用更安全的HTTPS</a></li>
<li><a href="http://eleme.io/mobilists/2016/01/10/%E7%AA%81%E7%A0%B4%E5%BE%AE%E4%BF%A1%E8%B7%B3%E8%BD%AC%E9%99%90%E5%88%B6%EF%BC%8DUniversal-Links%E9%82%A3%E4%BA%9B%E5%9D%91/" target="_blank" rel="external">突破微信跳转限制－Universal-Links那些坑</a></li>
</ul>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;Universal Link 是 iOS9 的新特性，通过它可以使用传统的 HTTPS 链接来启动客户端APP，使用相同的地址来访问网站和APP。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When you support universal links, iOS 9 users can tap a link to your website and get seamlessly redirected to your installed app without going through Safari. If your app isn’t installed, tapping a link to your website opens your website in Safari.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://codingpub.github.io/categories/iOS/"/>
    
    
      <category term="Universal Link" scheme="http://codingpub.github.io/tags/Universal-Link/"/>
    
      <category term="iOS9" scheme="http://codingpub.github.io/tags/iOS9/"/>
    
      <category term="ATS" scheme="http://codingpub.github.io/tags/ATS/"/>
    
  </entry>
  
  <entry>
    <title>Fiddler拦截HTTPS请求</title>
    <link href="http://codingpub.github.io/2016/07/08/Fiddler%E6%8B%A6%E6%88%AAhttps%E8%AF%B7%E6%B1%82/"/>
    <id>http://codingpub.github.io/2016/07/08/Fiddler拦截https请求/</id>
    <published>2016-07-08T07:44:01.000Z</published>
    <updated>2017-07-16T07:29:35.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://www.telerik.com/fiddler" target="_blank" rel="external">Fiddler</a> 作为一个拦截网络请求的神器，程序猿们经常用它调试接口请求，虽然一直知道它可以拦截HTTPS请求，但是真正要用它来调试HTTPS请求的时候，还是踩了一些坑，正所谓好记性不如烂笔头，还写篇短文做个记录。</p>
<a id="more"></a>
<ol>
<li><p>开启拦截 HTTPS 功能</p>
<p>Tools &gt; Fiddler Option &gt; HTTPS</p>
<p><img src="https_config.jpg" alt=""></p>
<p>Fiddler 默认是不拦截 https 请求的，因此需要先开启这个功能。</p>
</li>
<li><p>导出 Fiddler 根证书</p>
<p>Tools &gt; Fiddler Option &gt; HTTPS</p>
<p>Fiddler 拦截 https 请求后使用它自己伪造的CA证书进行签名操作，因此需要导出Fiddler的根证书，然后安装到需要拦截https请求的设备上。</p>
<p> <img src="export.jpg" alt=""></p>
</li>
<li><p>安装 Fiddler 根证书</p>
<p>Fiddler 导出到桌面的根证书 <code>FiddlerRoot.cer</code> 在 Windows 上可以直接安装使用，如果要装到 iOS 设备上，通过 Safari 访问 <code>http://[FIDDLER_SERVER]:[Port]/FiddlerRoot.cer</code> 就可以进入证书的安装页面了。</p>
</li>
<li><p>允许 Fiddler 拦局域网请求</p>
<p>Tools &gt; Fiddler Option &gt; Connection</p>
<p><img src="remote.jpg" alt=""></p>
</li>
<li><p>手机设置 host</p>
<p>设置 &gt; 无线局域网 &gt; 选中当前WIFI</p>
<p>设置 http 代理 IP 和端口，端口默认是 8888，如果有修改，以修改后的为准。</p>
</li>
</ol>
<p>愉快地调试 https 请求吧 ~~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://www.telerik.com/fiddler&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Fiddler&lt;/a&gt; 作为一个拦截网络请求的神器，程序猿们经常用它调试接口请求，虽然一直知道它可以拦截HTTPS请求，但是真正要用它来调试HTTPS请求的时候，还是踩了一些坑，正所谓好记性不如烂笔头，还写篇短文做个记录。&lt;/p&gt;
    
    </summary>
    
      <category term="开发工具" scheme="http://codingpub.github.io/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="网络接口" scheme="http://codingpub.github.io/tags/%E7%BD%91%E7%BB%9C%E6%8E%A5%E5%8F%A3/"/>
    
      <category term="Fiddler" scheme="http://codingpub.github.io/tags/Fiddler/"/>
    
  </entry>
  
  <entry>
    <title>Xcode实用插件</title>
    <link href="http://codingpub.github.io/2016/07/04/Xcode%E5%AE%9E%E7%94%A8%E6%8F%92%E4%BB%B6/"/>
    <id>http://codingpub.github.io/2016/07/04/Xcode实用插件/</id>
    <published>2016-07-04T03:37:42.000Z</published>
    <updated>2017-07-16T07:29:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>开始接触 Xcode 的插件的时候应该还在使用 Xcode5，那时候是通过下载插件源码，编译后使用的，后来升级到 Xcode6 发现很多插件不兼容，升级进度比较慢，插件冲突也比较厉害，一段时间后也就淡化了插件的使用。不知道为什么苹果官方为什么没有较规范的插件开发、管理流程，难道不知道 <code>插件就是生产力</code> 吗~ 前阵子因为 Sublime Text 的插件用起来各种顺心，忍不住又把 Xcode 的插件翻出来试试，感觉比以前顺畅多了，果然是时代在前进啊。</p>
<a id="more"></a>
<h2 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h2><p>Xcode插件大部分是以源码的形式传播，找到你喜欢的插件，下载源码，然后编译插件，将生成的 <code>xcplugin</code> 拷贝到 Xcode 的插件目录，重启 Xcode 即可。若插件无效，可能是还没有适配到你使用的 Xcode，试试 <a href="#Xcode升级适配">Xcode升级适配</a>。</p>
<h3 id="插件目录"><a href="#插件目录" class="headerlink" title="插件目录"></a>插件目录</h3><figure class="highlight awk"><table><tr><td class="code"><pre><div class="line">~<span class="regexp">/Library/</span>Application Support<span class="regexp">/Developer/</span>Shared<span class="regexp">/Xcode/</span>Plug-ins<span class="regexp">/</span></div></pre></td></tr></table></figure>
<h3 id="Xcode升级适配"><a href="#Xcode升级适配" class="headerlink" title="Xcode升级适配"></a>Xcode升级适配</h3><ol>
<li><p>获取待适配版本 Xcode 的 UUID</p>
 <figure class="highlight gradle"><table><tr><td class="code"><pre><div class="line">defaults <span class="keyword">read</span> <span class="regexp">/Applications/</span>Xcode.app<span class="regexp">/Contents/</span>Info.plist DVTPlugInCompatibilityUUID</div></pre></td></tr></table></figure>
</li>
<li><p>批量更新插件适配列表</p>
 <figure class="highlight gradle"><table><tr><td class="code"><pre><div class="line"><span class="keyword">find</span> ~<span class="regexp">/Library/</span>Application\ Support<span class="regexp">/Developer/</span>Shared<span class="regexp">/Xcode/</span>Plug-ins -name Info.plist -maxdepth <span class="number">3</span> | xargs -I&#123;&#125; defaults <span class="keyword">write</span> &#123;&#125; DVTPlugInCompatibilityUUIDs -array-add `defaults <span class="keyword">read</span> <span class="regexp">/Applications/</span>Xcode.app<span class="regexp">/Contents/</span>Info.plist DVTPlugInCompatibilityUUID`</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="实用插件"><a href="#实用插件" class="headerlink" title="实用插件"></a>实用插件</h2><h3 id="Alcatraz-插件管理器"><a href="#Alcatraz-插件管理器" class="headerlink" title="Alcatraz 插件管理器"></a>Alcatraz 插件管理器</h3><p>讲到 Xcode 的插件，绕不开 Alcatraz，因为它是一款用于管理 Xcode 的插件、模板和主题的插件，至今博主没有见过更好的替代产品。</p>
<blockquote>
<p><a href="http://alcatraz.io/" target="_blank" rel="external">Alcatraz</a> is an open-source package manager for Xcode. It lets you discover and install plugins, templates and color schemes without the need for manually cloning or copying files. It installs itself as a part of Xcode and it feels like home.</p>
</blockquote>
<ul>
<li>Usage</li>
</ul>
<blockquote>
<p>Select Package Manager from the Window menu, then check or uncheck packages to install or remove them. You’ll need to restart Xcode after installing certain packages, as indicated after installation.</p>
</blockquote>
<p><img src="Alcatraz1@2x.png" alt=""><br><img src="Alcatraz2@2x.png" alt=""></p>
<ul>
<li>Install</li>
</ul>
<figure class="highlight vim"><table><tr><td class="code"><pre><div class="line">curl -fsSL http<span class="variable">s:</span>//raw.githubusercontent.<span class="keyword">com</span>/supermarin/Alcatraz/deploy/Scripts/install.<span class="keyword">sh</span> | <span class="keyword">sh</span></div></pre></td></tr></table></figure>
<ul>
<li>Uninstall</li>
</ul>
<figure class="highlight awk"><table><tr><td class="code"><pre><div class="line">rm -rf ~<span class="regexp">/Library/</span>Application\ Support<span class="regexp">/Developer/</span>Shared<span class="regexp">/Xcode/</span>Plug-ins<span class="regexp">/Alcatraz.xcplugin</span></div></pre></td></tr></table></figure>
<ul>
<li>Remove all cached data:</li>
</ul>
<figure class="highlight awk"><table><tr><td class="code"><pre><div class="line">rm -rf ~<span class="regexp">/Library/</span>Application\ Support<span class="regexp">/Alcatraz</span></div></pre></td></tr></table></figure>
<h3 id="Injection"><a href="#Injection" class="headerlink" title="Injection"></a>Injection</h3><p>接触 <a href="https://github.com/johnno1962/injectionforxcode" target="_blank" rel="external">Injection</a> 只是最近的事情，但因为它的强大功能对于使用低端 Mac Mini 做产品开发的博主而言，开发效率的提升显而易见，所以在插件管理器之后就迫不及待的转入 Injection。</p>
<blockquote>
<p>Injection for Xcode is an Xcode plugin (available via Alcatraz) or AppCode that dynamically inserts new Swift / Objective-C code into a running app in order to speed up your build process. It does this without making any changes to your project.</p>
</blockquote>
<p><img src="injected.gif" alt=""></p>
<p>Injection 可以在修改代码后，不必经过重新编译-启动的过程，使代码立即生效。</p>
<p>入口：Prodouct &gt; Injection Plugin</p>
<p>快捷键</p>
<ul>
<li>注入代码：⌃=</li>
<li>注入代码并重置App： ⌃⇧=</li>
</ul>
<h3 id="ESJsonFormat"><a href="#ESJsonFormat" class="headerlink" title="ESJsonFormat"></a>ESJsonFormat</h3><p><a href="https://github.com/EnjoySR/ESJsonFormat-Xcode" target="_blank" rel="external">ESJsonFormat</a> 用于将JSON格式化输出为模型的属性</p>
<ul>
<li>通过JSON字符串生成对应属性</li>
<li>通过文件写入的方式生成到.m文件</li>
<li>支持输入嵌套模型名称</li>
<li>支持自动生成 MJExtension 框架中objectClassInArray方法（因MJExtension非线程安全，已转到 <a href="https://github.com/ibireme/YYModel" target="_blank" rel="external">YYModel</a>），可在设置界面关闭</li>
</ul>
<p><strong>Usage</strong></p>
<ul>
<li>Window-ESJsonFormat-输入Json-Enter</li>
<li>快捷键(Control+Shift+J)-输入JSON-Enter</li>
</ul>
<p><img src="ESJsonFormat-Xcode.gif" alt=""></p>
<h3 id="FuzzyAutocomplete"><a href="#FuzzyAutocomplete" class="headerlink" title="FuzzyAutocomplete"></a>FuzzyAutocomplete</h3><p><a href="https://github.com/FuzzyAutocomplete/FuzzyAutocompletePlugin" target="_blank" rel="external">FuzzyAutocomplete</a> 是对 Xcode 智能提醒功能的扩展，支持模糊代码提示。</p>
<p><img src="FuzzyAutocomplete.gif" alt=""></p>
<h3 id="HOStringSense"><a href="#HOStringSense" class="headerlink" title="HOStringSense"></a>HOStringSense</h3><p><a href="https://github.com/holtwick/HOStringSense-for-Xcode" target="_blank" rel="external">HOStringSense</a> 是一个大文本编辑利器，可以自动转意特殊字符，如双引号、回车符。</p>
<blockquote>
<p>Perfect for editing regular expressions, multi line texts, inline HTML and many more use cases. Also provides quick feedback on string length.</p>
</blockquote>
<p><img src="StringDemoAnimation.gif" alt=""></p>
<h3 id="XToDo"><a href="#XToDo" class="headerlink" title="XToDo"></a>XToDo</h3><p><a href="https://github.com/trawor/XToDo" target="_blank" rel="external">XToDo</a> 用于管理需要延迟实现的代码注释。</p>
<blockquote>
<p>What Can XToDo do?</p>
<ul>
<li>collect and list the TODO,FIXME,???,!!!</li>
<li>show stat for an item finished or not (still can not switch on/off)</li>
<li>filter results if you have too much todos</li>
<li>snippets make a todo comment easily</li>
<li>standalone App if you’d like not to wait for 10-sec Xcode starting</li>
</ul>
</blockquote>
<p><img src="XToDo1.png" alt=""><br><img src="XToDo2.png" alt=""></p>
<h3 id="VVDocumenter"><a href="#VVDocumenter" class="headerlink" title="VVDocumenter"></a>VVDocumenter</h3><p><a href="https://github.com/onevcat/VVDocumenter-Xcode.git" target="_blank" rel="external">VVDocumenter</a> 用于快速插入规范的代码注释，是可以在一定程度上提升写注释的效率以及规范性。</p>
<blockquote>
<p>Writing documentation is so important for developing, but it is really painful with Xcode. Think about how much time you are wasting in pressing ‘*’ or ‘/‘, and typing the parameters again and again. Now, you can find the method (or any code) you want to document to, and type in ///, the document will be generated for you and all params and return will be extracted into a Javadoc style, which is compatible with appledoc, Doxygen and HeaderDoc. You can just fill the inline placeholder tokens to finish your document.</p>
</blockquote>
<p><img src="VVDocumenter.gif" alt=""></p>
<h2 id="试用中"><a href="#试用中" class="headerlink" title="试用中"></a>试用中</h2><h3 id="Part-1"><a href="#Part-1" class="headerlink" title="Part 1"></a>Part 1</h3><ul>
<li><a href="https://github.com/omz/Dash-Plugin-for-Xcode" target="_blank" rel="external">OMQuickHelp</a> (or Dash) 离线文档查看器，集成了CocoaPods文档</li>
<li><a href="https://github.com/dhcdht/DXXcodeConsoleUnicodePlugin" target="_blank" rel="external">DXXcodeConsoleUnicodePlugin</a> 转换 Xcode 控制台中一些不可阅读的字符</li>
<li><a href="https://github.com/stefanceriu/SCXcodeSwitchExpander" target="_blank" rel="external">SCXcodeSwitchExpander</a> 自动补齐 Switch 分支</li>
<li><a href="https://github.com/markohlebar/Peckham" target="_blank" rel="external">Peckham</a> 更便捷地导入头文件</li>
</ul>
<h3 id="Part-2"><a href="#Part-2" class="headerlink" title="Part 2"></a>Part 2</h3><ul>
<li><a href="https://github.com/johnno1962/GitDiff" target="_blank" rel="external">GitDiff</a> 在 Xcode 高亮当前修改和上次提交之间的不同之处</li>
<li><a href="https://github.com/benoitsan/BBUncrustifyPlugin-Xcode" target="_blank" rel="external">BBUncrustifyPlugin</a> 格式化代码</li>
<li><a href="https://github.com/qfish/XAlign" target="_blank" rel="external">XAlign</a> 用来对齐代码，等号对齐，属性对齐等</li>
<li><a href="https://github.com/neonichu/BBUDebuggerTuckAway" target="_blank" rel="external">BBUDebuggerTuckAway</a> 编辑源码时自动隐藏控制台</li>
</ul>
<h2 id="其他插件"><a href="#其他插件" class="headerlink" title="其他插件"></a>其他插件</h2><ul>
<li><a href="https://github.com/ksuther/KSImageNamed-Xcode" target="_blank" rel="external">KSImageNamed</a> 快速预览图片，目前编码习惯使用宏定义取图片，先 mark</li>
<li><a href="https://github.com/omz/ColorSense-for-Xcode" target="_blank" rel="external">ColorSense</a> 选中UIColor时可以直接看到对应的颜色，缺点是不支持RGB宏，个人认为对OC来说不实用</li>
<li><a href="https://github.com/kattrali/deriveddata-exterminator" target="_blank" rel="external">DerivedData Exterminator</a> 清除Xcode缓存目录，这个建议还是手动清除吧，不是很有必要装个插件</li>
<li><a href="https://github.com/kattrali/cocoapods-xcode-plugin" target="_blank" rel="external">CocoaPods</a> 更新CocoaPods库，刚用了一天，就因为发现新大陆而被弃用了，转到 <a href="https://cocoapods.org/app" target="_blank" rel="external">CocoaPods-app</a></li>
<li><a href="https://github.com/Galeas/CocoaPodUI" target="_blank" rel="external">CocoaPodUI</a> 管理CocoaPods库，Xcode7上不稳定，管理方式也没有达到预期，谨慎测试，会重写现有的 Podfile 文件，mark 后续关注</li>
<li><a href="https://github.com/limejelly/Backlight-for-XCode" target="_blank" rel="external">Backlight</a> 高亮当前正在编辑的那一行</li>
</ul>
<blockquote>
<p>参考</p>
<ul>
<li><a href="http://joeshang.github.io/2015/04/10/fix-xcode-upgrade-plugin-invalid/" target="_blank" rel="external">Xcode升级后插件失效的原理与修复办法</a></li>
<li><a href="http://blog.jobbole.com/80697/" target="_blank" rel="external">iOS 开发者能用上的 10 个 Xcode 插件</a></li>
<li><a href="http://www.jianshu.com/p/00410d75b83f" target="_blank" rel="external">Xcode插件推荐</a></li>
<li><a href="http://www.cnblogs.com/dsxniubility/p/5099191.html" target="_blank" rel="external">Xcode插件优缺点对比（推荐20款插件）</a></li>
</ul>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;开始接触 Xcode 的插件的时候应该还在使用 Xcode5，那时候是通过下载插件源码，编译后使用的，后来升级到 Xcode6 发现很多插件不兼容，升级进度比较慢，插件冲突也比较厉害，一段时间后也就淡化了插件的使用。不知道为什么苹果官方为什么没有较规范的插件开发、管理流程，难道不知道 &lt;code&gt;插件就是生产力&lt;/code&gt; 吗~ 前阵子因为 Sublime Text 的插件用起来各种顺心，忍不住又把 Xcode 的插件翻出来试试，感觉比以前顺畅多了，果然是时代在前进啊。&lt;/p&gt;
    
    </summary>
    
      <category term="开发工具" scheme="http://codingpub.github.io/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Xcode" scheme="http://codingpub.github.io/tags/Xcode/"/>
    
  </entry>
  
</feed>
